"""
Attack case for ImmutableVersionTwo policy.
Each test focuses on a single behavior. If an expectation is not met, raise an Exception.
Run with:
  python repy.py restrictions.default encasementlib.r2py reference_monitor_hh2727.r2py <THIS_FILE>.r2py
(Replace names as needed.)
"""

# Tiny assert helpers (no external imports allowed in sandbox)
def _assert(cond, msg="assertion failed"):
  if not cond:
    raise Exception(msg)

def _expect_exception(fn, msg="expected an exception but none was raised"):
  try:
    fn()
  except Exception:
    return
  raise Exception(msg)

# Convenience wrappers to keep Repy surface in one place. If your API names differ, tweak here.
def _open_ro(name):
  # read-only open: openfile(name, False) should not create
  return openfile(name, False)

def _open_create(name):
  # writable open: openfile(name, True) should create or open for writing a fresh version
  return openfile(name, True)

def _write_all(fh, data, offset=0):
  # For simplicity we write once at offset 0 unless otherwise needed
  return fh.writeat(data, offset)

def _read_all(fh, n=4096, offset=0):
  return fh.readat(n, offset)

def _close(fh):
  return fh.close()

# Concurrent opens: two writers; one closesâ€”second must not retroactively change the first's closed content
base = "ac5.txt"
v1 = "ONE-WRITER"
v2 = "TWO-WRITER"

# Two opens before any close
fA = _open_create(base)
fB = _open_create(base)

_write_all(fA, v1, 0)
_close(fA)  # closes the first; content should now be immutable for that version

# Attack: have the second handle attempt to overwrite from offset 0
def _attack():
  _write_all(fB, v2, 0)
  _close(fB)
_expect_exception(_attack, "second concurrent writer modified content after first version closed")

# Control: latest readable must reflect the closed version from fA
g = _open_ro(base)
got = _read_all(g, 1024, 0); _close(g)
_assert(got.startswith(v1), "concurrent writer changed closed content")
