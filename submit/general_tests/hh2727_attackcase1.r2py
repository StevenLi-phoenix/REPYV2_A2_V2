"""
Attack case for ImmutableVersionTwo policy.
Each test focuses on a single behavior. If an expectation is not met, raise an Exception.
Run with:
  python repy.py restrictions.default encasementlib.r2py reference_monitor_hh2727.r2py <THIS_FILE>.r2py
(Replace names as needed.)
"""

# Tiny assert helpers (no external imports allowed in sandbox)
def _assert(cond, msg="assertion failed"):
  if not cond:
    raise Exception(msg)

def _expect_exception(fn, msg="expected an exception but none was raised"):
  try:
    fn()
  except Exception:
    return
  raise Exception(msg)

# Convenience wrappers to keep Repy surface in one place. If your API names differ, tweak here.
def _open_ro(name):
  # read-only open: openfile(name, False) should not create
  return openfile(name, False)

def _open_create(name):
  # writable open: openfile(name, True) should create or open for writing a fresh version
  return openfile(name, True)

def _write_all(fh, data, offset=0):
  # For simplicity we write once at offset 0 unless otherwise needed
  return fh.writeat(data, offset)

def _read_all(fh, n=4096, offset=0):
  return fh.readat(n, offset)

def _close(fh):
  return fh.close()

# Write-then-close, attempt write-after-close on same handle (should fail)
fname = "ac1.txt"
data1 = "HELLO-AC1"

# Create and write, then close
f = _open_create(fname)
_write_all(f, data1, 0)
_close(f)

# Attack: write using the same (now-closed) handle
def _attack():
  _write_all(f, "SHOULD-NOT-WORK", 0)
_expect_exception(_attack, "write-after-close unexpectedly succeeded")

# Control: the content of any latest version should remain data1 (or a new version if policy auto-versions)
# Try reading via a fresh read-only open. If policy versions, RO open should read the latest immutable contents.
g = _open_ro(fname)
got = _read_all(g, 1024, 0)
_close(g)
_assert(got.startswith(data1), "content changed after illegal write-after-close")
