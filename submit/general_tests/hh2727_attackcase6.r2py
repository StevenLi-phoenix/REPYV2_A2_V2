"""
Attack case for ImmutableVersionTwo policy.
Each test focuses on a single behavior. If an expectation is not met, raise an Exception.
Run with:
  python repy.py restrictions.default encasementlib.r2py reference_monitor_hh2727.r2py <THIS_FILE>.r2py
(Replace names as needed.)
"""

# Tiny assert helpers (no external imports allowed in sandbox)
def _assert(cond, msg="assertion failed"):
  if not cond:
    raise Exception(msg)

def _expect_exception(fn, msg="expected an exception but none was raised"):
  try:
    fn()
  except Exception:
    return
  raise Exception(msg)

# Convenience wrappers to keep Repy surface in one place. If your API names differ, tweak here.
def _open_ro(name):
  # read-only open: openfile(name, False) should not create
  return openfile(name, False)

def _open_create(name):
  # writable open: openfile(name, True) should create or open for writing a fresh version
  return openfile(name, True)

def _write_all(fh, data, offset=0):
  # For simplicity we write once at offset 0 unless otherwise needed
  return fh.writeat(data, offset)

def _read_all(fh, n=4096, offset=0):
  return fh.readat(n, offset)

def _close(fh):
  return fh.close()

# Rename/overwrite attack: try to create a new base and rename over old to hide earlier versions
# If the API exposes 'rename' it would be used; RepyV2 typically does not.
# We simulate by trying to remove old name and re-create it to 'erase' history.
base = "ac6.txt"
payload = "ORIGINAL"
attack = "MALICIOUS"

f = _open_create(base)
_write_all(f, payload, 0); _close(f)

def _attack():
  removefile(base)   # should be disallowed if immutable
  f2 = _open_create(base)
  _write_all(f2, attack, 0); _close(f2)
_expect_exception(_attack, "able to remove immutable object and replace it")

# Control: ensure original content still present
g = _open_ro(base); got = _read_all(g, 1024, 0); _close(g)
_assert(g.startswith(payload), "history erased by rename/overwrite simulation")
