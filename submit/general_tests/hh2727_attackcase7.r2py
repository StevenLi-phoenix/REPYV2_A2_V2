"""
Attack case for ImmutableVersionTwo policy.
Each test focuses on a single behavior. If an expectation is not met, raise an Exception.
Run with:
  python repy.py restrictions.default encasementlib.r2py reference_monitor_hh2727.r2py <THIS_FILE>.r2py
(Replace names as needed.)
"""

# Tiny assert helpers (no external imports allowed in sandbox)
def _assert(cond, msg="assertion failed"):
  if not cond:
    raise Exception(msg)

def _expect_exception(fn, msg="expected an exception but none was raised"):
  try:
    fn()
  except Exception:
    return
  raise Exception(msg)

# Convenience wrappers to keep Repy surface in one place. If your API names differ, tweak here.
def _open_ro(name):
  # read-only open: openfile(name, False) should not create
  return openfile(name, False)

def _open_create(name):
  # writable open: openfile(name, True) should create or open for writing a fresh version
  return openfile(name, True)

def _write_all(fh, data, offset=0):
  # For simplicity we write once at offset 0 unless otherwise needed
  return fh.writeat(data, offset)

def _read_all(fh, n=4096, offset=0):
  return fh.readat(n, offset)

def _close(fh):
  return fh.close()

# Offset overwrite: attempt to modify middle of closed content by reopening specific version name
base = "ac7.txt"
v1 = "0123456789"

# make v1
f = _open_create(base); _write_all(f, v1, 0); _close(f)

# find a versioned filename to target
targets = [x for x in listfiles() if x.startswith(base + ".v")]
if targets:
  target = sorted(targets)[0]
  def _attack():
    fh = _open_create(target)
    # attempt mid-file write
    fh.writeat("X", 5)
    _close(fh)
  _expect_exception(_attack, "able to mid-file overwrite a historical version")
else:
  # As a fallback, try normal base reopen and ensure policy creates a fresh version; it should not mutate v1
  fh = _open_create(base); fh.writeat("X", 5); _close(fh)
  # Now ensure earliest content isn't mutated (if versions are visible)
  vers = sorted([x for x in listfiles() if x.startswith(base + ".v")])
  if vers:
    rf = _open_ro(vers[0]); got = _read_all(rf, 1024, 0); _close(rf)
    _assert(got.startswith(v1), "earliest version mutated by offset overwrite")
