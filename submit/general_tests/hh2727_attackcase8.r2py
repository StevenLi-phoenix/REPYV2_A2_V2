"""
Attack case for ImmutableVersionTwo policy.
Each test focuses on a single behavior. If an expectation is not met, raise an Exception.
Run with:
  python repy.py restrictions.default encasementlib.r2py reference_monitor_hh2727.r2py <THIS_FILE>.r2py
(Replace names as needed.)
"""

# Tiny assert helpers (no external imports allowed in sandbox)
def _assert(cond, msg="assertion failed"):
  if not cond:
    raise Exception(msg)

def _expect_exception(fn, msg="expected an exception but none was raised"):
  try:
    fn()
  except Exception:
    return
  raise Exception(msg)

# Convenience wrappers to keep Repy surface in one place. If your API names differ, tweak here.
def _open_ro(name):
  # read-only open: openfile(name, False) should not create
  return openfile(name, False)

def _open_create(name):
  # writable open: openfile(name, True) should create or open for writing a fresh version
  return openfile(name, True)

def _write_all(fh, data, offset=0):
  # For simplicity we write once at offset 0 unless otherwise needed
  return fh.writeat(data, offset)

def _read_all(fh, n=4096, offset=0):
  return fh.readat(n, offset)

def _close(fh):
  return fh.close()

# Time-of-check/time-of-use: capture a handle, close via another, then try stale-handle write
base = "ac8.txt"
v1 = "TOCTOU"

# open two handles to same base
fa = _open_create(base)
fb = _open_create(base)

# write via A and close; this should seal the content A wrote
_write_all(fa, v1, 0); _close(fa)

# Attack: attempt to use still-open B to change bytes; should fail if immutability is enforced after any close
def _attack():
  fb.writeat("Z", 0)
  _close(fb)
_expect_exception(_attack, "stale open handle could mutate closed content")

# sanity: latest must still show v1
g = _open_ro(base); got = _read_all(g, 1024, 0); _close(g)
_assert(got.startswith(v1), "TOCTOU attack changed closed content")
