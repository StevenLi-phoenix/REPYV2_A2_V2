"""
==============================================================================
ATTACK CASE: app7633_attackcase8.r2py
==============================================================================
Target NetID:        app7633
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3112
  Task UUID:         d9a5238b-b0ab-4ac5-a9d1-47bd75f31c14
  Machine Type:      t3.medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:19:40.687566
  End Time:          2025-10-27T19:19:45.749311
  Runtime:           5.0617 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       ddac7a6a61480929d1f4beb7ba0feed3
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      dbba688c1f0f78080af6377373df1915

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 370, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 22, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 226, in writeat
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 370, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 22, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 226, in writeat
  Exception (with type 'exceptions.ValueError'): Cannot overwrite already written data
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: app7633)
# ============================================================================
# """
# This security layer implements Versioned and Immutable functionality for files.
# It ensures that once data is written and the file is closed, it cannot be overwritten.
# 
# Note:
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
# """
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# # Track positions written BEFORE file was closed (immutable)
# closed_file_writes = {}
# 
# # Track positions written in CURRENT session (before close)
# open_file_writes = {}
# 
# # Track which files are currently open
# currently_open = {}
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#         self.filename = filename
#         self.is_version = False
#         self.version_num = None
#         self.original_name = filename
#         self.is_writable = False
#         self.closed = False
#         
#         # Parse version file format: "name.vN"
#         if ".v" in filename:
#             parts = filename.rsplit(".v", 1)
#             if len(parts) == 2:
#                 try:
#                     self.version_num = int(parts[1])
#                     self.original_name = parts[0]
#                     self.is_version = True
#                 except:
#                     pass
#         
#         if create:
#             # Cannot manually create version files
#             if self.is_version:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             
#             # Check if file already exists
#             existing_files = listfiles()
#             
#             if filename in existing_files:
#                 # File exists - must create new version
#                 if filename in currently_open:
#                     raise FileInUseError("Cannot create new version while file is open")
#                 
#                 # Find highest existing version
#                 highest = 0
#                 for f in existing_files:
#                     if f.startswith(filename + ".v"):
#                         try:
#                             v = int(f[len(filename + ".v"):])
#                             if v > highest:
#                                 highest = v
#                         except:
#                             pass
#                 
#                 # Create next version
#                 next_version = highest + 1
#                 version_filename = filename + ".v" + str(next_version)
#                 
#                 # Get content from latest version
#                 if highest > 0:
#                     source = filename + ".v" + str(highest)
#                 else:
#                     source = filename
#                 
#                 src = openfile(source, False)
#                 data = src.readat(None, 0)
#                 src.close()
#                 
#                 # Create new version with copied content
#                 self.VMfile = openfile(version_filename, True)
#                 if len(data) > 0:
#                     self.VMfile.writeat(data, 0)
#                 
#                 self.actual_filename = version_filename
#                 self.version_num = next_version
#                 self.is_version = True
#                 self.original_name = filename
#                 self.is_writable = True
#                 currently_open[filename] = True
#                 
#                 # Clear any stale tracking for the new version file
#                 if version_filename in closed_file_writes:
#                     del closed_file_writes[version_filename]
#                 if version_filename in open_file_writes:
#                     del open_file_writes[version_filename]
#                 
#                 # Mark copied positions as closed (immutable)
#                 if len(data) > 0:
#                     closed_file_writes[version_filename] = set(range(len(data)))
#                 else:
#                     closed_file_writes[version_filename] = set()
#                 
#                 open_file_writes[version_filename] = set()
#             else:
#                 # Brand new file - clear any stale tracking data!
#                 self.VMfile = openfile(filename, True)
#                 self.actual_filename = filename
#                 self.is_writable = True
#                 currently_open[filename] = True
#                 
#                 # CRITICAL: Clear all stale tracking for this filename
#                 # This handles cases where previous runs left tracking data
#                 if filename in closed_file_writes:
#                     del closed_file_writes[filename]
#                 if filename in open_file_writes:
#                     del open_file_writes[filename]
#                 
#                 # Initialize fresh tracking
#                 closed_file_writes[filename] = set()
#                 open_file_writes[filename] = set()
#         else:
#             # Open existing file
#             existing_files = listfiles()
#             
#             if self.is_version:
#                 # Opening specific version
#                 if self.original_name in currently_open:
#                     raise FileInUseError("File is currently open")
#                 
#                 if filename not in existing_files:
#                     raise FileNotFoundError("File not found")
#                 
#                 self.VMfile = openfile(filename, False)
#                 self.actual_filename = filename
#                 currently_open[self.original_name] = True
#                 
#                 # Find highest version
#                 highest = 0
#                 for f in existing_files:
#                     if f.startswith(self.original_name + ".v"):
#                         try:
#                             v = int(f[len(self.original_name + ".v"):])
#                             if v > highest:
#                                 highest = v
#                         except:
#                             pass
#                 
#                 # Only latest version is writable
#                 self.is_writable = (self.version_num == highest)
#                 
#                 # Initialize tracking
#                 if filename not in closed_file_writes:
#                     try:
#                         content = self.VMfile.readat(None, 0)
#                         closed_file_writes[filename] = set(range(len(content)))
#                     except:
#                         closed_file_writes[filename] = set()
#                 
#                 open_file_writes[filename] = set()
#             else:
#                 # Opening original file
#                 if filename in currently_open:
#                     raise FileInUseError("File is currently open")
#                 
#                 if filename not in existing_files:
#                     raise FileNotFoundError("File not found")
#                 
#                 self.VMfile = openfile(filename, False)
#                 self.actual_filename = filename
#                 currently_open[filename] = True
#                 
#                 # Find if versions exist
#                 highest = 0
#                 for f in existing_files:
#                     if f.startswith(filename + ".v"):
#                         try:
#                             v = int(f[len(filename + ".v"):])
#                             if v > highest:
#                                 highest = v
#                         except:
#                             pass
#                 
#                 # Original only writable if no versions
#                 self.is_writable = (highest == 0)
#                 
#                 # Initialize tracking
#                 if filename not in closed_file_writes:
#                     try:
#                         content = self.VMfile.readat(None, 0)
#                         closed_file_writes[filename] = set(range(len(content)))
#                     except:
#                         closed_file_writes[filename] = set()
#                 
#                 open_file_writes[filename] = set()
#     
#     def readat(self, num_bytes, offset):
#         if self.closed:
#             raise ValueError("File is closed")
#         return self.VMfile.readat(num_bytes, offset)
#     
#     def writeat(self, data, offset):
#         if self.closed:
#             raise ValueError("File is closed")
#         
#         if not self.is_writable:
#             raise ValueError("Cannot write to an older version")
#         
#         fname = self.actual_filename
#         
#         # Get all previously written positions
#         already_written = closed_file_writes.get(fname, set())
#         currently_writing = open_file_writes.get(fname, set())
#         all_written = already_written | currently_writing
#         
#         # Check for overwrites
#         length = len(data)
#         if length > 0:
#             new_pos = set(range(offset, offset + length))
#             if all_written & new_pos:
#                 raise ValueError("Cannot overwrite already written data")
#             
#             # Do the write
#             result = self.VMfile.writeat(data, offset)
#             
#             # Track the write
#             if fname not in open_file_writes:
#                 open_file_writes[fname] = set()
#             open_file_writes[fname].update(new_pos)
#             
#             return result
#         else:
#             return self.VMfile.writeat(data, offset)
#     
#     def close(self):
#         if self.closed:
#             return None
#         
#         result = self.VMfile.close()
#         self.closed = True
#         
#         fname = self.actual_filename
#         
#         # Merge open writes into closed writes
#         if fname in open_file_writes:
#             if fname not in closed_file_writes:
#                 closed_file_writes[fname] = set()
#             closed_file_writes[fname].update(open_file_writes[fname])
#             del open_file_writes[fname]
#         
#         # Remove from currently open
#         if self.original_name in currently_open:
#             del currently_open[self.original_name]
#         
#         return result
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# 
# def LPremovefile(filename):
#     # Remove file and ALL its versions
#     existing = listfiles()
#     to_remove = []
#     
#     if filename in existing:
#         to_remove.append(filename)
#     
#     # Find versions
#     for f in existing:
#         if f.startswith(filename + ".v"):
#             try:
#                 int(f[len(filename + ".v"):])
#                 to_remove.append(f)
#             except:
#                 pass
#     
#     # Remove files and tracking
#     for f in to_remove:
#         try:
#             removefile(f)
#         except:
#             pass
#         
#         if f in closed_file_writes:
#             del closed_file_writes[f]
#         if f in open_file_writes:
#             del open_file_writes[f]
#         if f in currently_open:
#             del currently_open[f]
#     
#     if filename in currently_open:
#         del currently_open[filename]
#     
#     return None
# 
# 
# def LPlistfiles():
#     existing = listfiles()
#     result = []
#     seen = set()
#     
#     for f in existing:
#         if ".v" in f:
#             parts = f.rsplit(".v", 1)
#             if len(parts) == 2:
#                 try:
#                     int(parts[1])
#                     orig = parts[0]
#                     if orig not in seen:
#                         result.append(orig)
#                         seen.add(orig)
#                 except:
#                     if f not in seen:
#                         result.append(f)
#                         seen.add(f)
#             else:
#                 if f not in seen:
#                     result.append(f)
#                     seen.add(f)
#         else:
#             if f not in seen:
#                 result.append(f)
#                 seen.add(f)
#     
#     return result
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
