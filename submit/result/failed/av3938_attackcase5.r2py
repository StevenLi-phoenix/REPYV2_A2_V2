"""
==============================================================================
ATTACK CASE: av3938_attackcase5.r2py
==============================================================================
Target NetID:        av3938
Original Test:       test03_no_explicit_version.r2py
Test File Path:      submit/general_tests/test03_no_explicit_version.r2py

RUNNER INFORMATION:
  Runner ID:         runner-2534
  Task UUID:         7df783a8-4784-41b0-b851-398ecf75d78c
  Machine Type:      Standard_D4s_v3
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:19:59.953709
  End Time:          2025-10-27T19:20:05.724222
  Runtime:           5.7705 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       d9a90625ed7280b889b835d426dcbe13
  Attack MD5:        0b741119a5b52397192943ffa568e39b
  Combined MD5:      5b51a86613ecde3776f59793c485e15f

FAILURE DETAILS:
  Reason:            ERROR: Should not allow explicit version creation


STDOUT:
  ERROR: Should not allow explicit version creation

ORIGINAL TEST DESCRIPTION:
  Test 3: Cannot create explicit version files
  Verifies that users cannot directly create files with version pattern (e.g., file.v5)

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: av3938)
# ============================================================================
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# # Track open files and their versions
# open_files = {}
# file_versions = {}
# 
# def is_valid_filename(filename):
#     # Check if the filename follows all the rules
#     try:
#         # Empty filename is not allowed
#         if filename == '':
#             return False
#         
#         # Dot and double dot are not allowed
#         if filename == '.' or filename == '..':
#             return False
#         
#         # Filename cannot start with a dot
#         if filename.startswith('.'):
#             return False
#         
#         # Filename can be at most 120 characters long
#         if len(filename) > 120:
#             return False
#         
#         # Only lowercase letters, numbers, dash, underscore, and dot are allowed
#         for char in filename:
#             if not (char.islower() or char.isdigit() or char in '-_.'):
#                 return False
#         
#         return True
#     except:
#         return False
# 
# class VMFile():
#     def __init__(self, filename, create):
#         try:
#             self.filename = filename
#             self.is_versioned = False
#             self.base_filename = filename
#             self.is_writable = True
#             self.VMfile = None
#             self.failed = False
#             
#             # Validate filename first
#             if not is_valid_filename(filename):
#                 self.failed = True
#                 return
#             
#             if '.v' in filename:
#                 parts = filename.rsplit('.v', 1)
#                 if len(parts) == 2 and parts[1].isdigit():
#                     self.is_versioned = True
#                     self.base_filename = parts[0]
#                     version_num = int(parts[1])
#                     
#                     if create:
#                         self.failed = True
#                         return
#                     
#                     if filename not in listfiles():
#                         self.failed = True
#                         return
#                     
#                     current_version = file_versions.get(self.base_filename, 0)
#                     if version_num < current_version:
#                         self.is_writable = False
#                     
#                     self.VMfile = openfile(filename, False)
#                     return
#             
#             if create:
#                 if self.base_filename in open_files:
#                     self.failed = True
#                     return
#                 
#                 if filename in listfiles():
#                     current_version = file_versions.get(self.base_filename, 0)
#                     new_version = current_version + 1
#                     file_versions[self.base_filename] = new_version
#                     
#                     if current_version == 0:
#                         latest_file = openfile(filename, False)
#                     else:
#                         latest_name = filename + ".v" + str(current_version)
#                         latest_file = openfile(latest_name, False)
#                     
#                     content = latest_file.readat(None, 0)
#                     latest_file.close()
#                     
#                     new_name = filename + ".v" + str(new_version)
#                     self.VMfile = openfile(new_name, True)
#                     self.VMfile.writeat(content, 0)
#                     self.filename = new_name
#                     
#                     open_files[self.base_filename] = new_version
#                 else:
#                     self.VMfile = openfile(filename, True)
#                     file_versions[self.base_filename] = 0
#                     open_files[self.base_filename] = 0
#             else:
#                 if filename not in listfiles():
#                     self.failed = True
#                     return
#                 
#                 if self.base_filename in open_files:
#                     self.failed = True
#                     return
#                 
#                 self.VMfile = openfile(filename, False)
#                 current_version = file_versions.get(self.base_filename, 0)
#                 
#                 if current_version > 0 and filename == self.base_filename:
#                     self.is_writable = False
#                 
#                 open_files[self.base_filename] = current_version
#         except:
#             self.failed = True
#     
#     def readat(self, num_bytes, offset):
#         if self.VMfile is None:
#             return ""
#         return self.VMfile.readat(num_bytes, offset)
#     
#     def writeat(self, data, offset):
#         if self.VMfile is None:
#             return
#         if not self.is_writable:
#             raise FileInUseError("Cannot write to older version")
#         return self.VMfile.writeat(data, offset)
#     
#     def close(self):
#         if self.VMfile is None:
#             return
#         if self.base_filename in open_files:
#             del open_files[self.base_filename]
#         return self.VMfile.close()
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     all_files = listfiles()
#     base_files = []
#     # Hide version files from the list
#     for f in all_files:
#         if '.v' in f:
#             parts = f.rsplit('.v', 1)
#             if len(parts) == 2 and parts[1].isdigit():
#                 continue
#         base_files.append(f)
#     return base_files
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

try:
    f1 = openfile("testfile3.v5", True)
    log("ERROR: Should not allow explicit version creation\n")
    exitall()
except RepyArgumentError:
    pass

