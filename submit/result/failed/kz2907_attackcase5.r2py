"""
==============================================================================
ATTACK CASE: kz2907_attackcase5.r2py
==============================================================================
Target NetID:        kz2907
Original Test:       test03_no_explicit_version.r2py
Test File Path:      submit/general_tests/test03_no_explicit_version.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3751
  Task UUID:         b84affa8-a740-46f7-9516-e40665a585e1
  Machine Type:      Standard_F4s_v2
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:58.216676
  End Time:          2025-10-27T19:24:02.774340
  Runtime:           4.5577 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       3973c51ce5f3fdcea4ea6762593038bb
  Attack MD5:        0b741119a5b52397192943ffa568e39b
  Combined MD5:      9ca20a265d0b5a7d3fdd19e2021df3e7

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 150, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 7, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 106, in LPopenfile
    "monitor.r2py", line 34, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 150, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 7, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 106, in LPopenfile
    "monitor.r2py", line 34, in __init__
  Exception (with type 'exceptions.Exception'): Cannot create versioned files directly
  ---

ORIGINAL TEST DESCRIPTION:
  Test 3: Cannot create explicit version files
  Verifies that users cannot directly create files with version pattern (e.g., file.v5)

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: kz2907)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# 
# original_openfile = openfile
# original_removefile = removefile  
# original_listfiles = listfiles
# 
# immutable_files = set() 
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# MAX_VERSIONS_PER_FILE = 100
# 
# class VMFile():
#     def __init__(self, filename, create):
#         self.filename = filename 
#         self.creating_version = False
# 
#         if create:
#             if self.is_versioned_fname(filename):
#                 raise Exception("Cannot create versioned files directly")
# 
#             self.creating_version = True
#             if filename in original_listfiles():
#                 existing_versions = self.get_all_versions(filename)
# 
#                 if existing_versions:
#                     next_version = max(existing_versions) + 1
# 
#                 else:
#                     next_version = 2
#                 if next_version > MAX_VERSIONS_PER_FILE:
#                     raise Exception("Too many versions")
#                 version_name = filename + '.v' + str(next_version)
#                 
#                 self.VMfile = original_openfile(version_name, True)
#                 self.filename = version_name
#                 self.is_base_file = False
#                 
#             else:
#                 # New file
#                 self.creating_version = False
#                 self.VMfile = original_openfile(filename, True)
#                 self.filename = filename
#                 self.is_base_file = True
#         else:
#             # Open existing (could be original or version)
#             self.VMfile = original_openfile(filename, False)
#             self.filename = filename
# 
#     def is_versioned_fname(self, filename):
#         if self.creating_version:
#             return False
# 
#         if ".v" in filename:
#             parts = filename.split(".v", 1)
#             if len(parts) == 2 and parts[1].isdigit():
#                 return True
#         return False
#     
#     def get_all_versions(self, filename):
#         files = original_listfiles()
#         versions = []
# 
#         if filename in files:
#             versions.append(1)
#         for file in files:
#             if file.startswith(filename + '.v'):
#                 try:
#                     version_num = int(file.split('.v')[-1])
#                     versions.append(version_num)
#                 except ValueError:
#                     pass
# 
#         return versions 
#                 
#                 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.filename in immutable_files:
#             raise Exception("Cannot write to immutable file: " + str(self.filename))
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.creating_version:
#             immutable_files.add(self.filename)
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise Exception("Cannot remove immutable file")
# 
# def LPlistfiles():
#     return original_listfiles()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

try:
    f1 = openfile("testfile3.v5", True)
    log("ERROR: Should not allow explicit version creation\n")
    exitall()
except RepyArgumentError:
    pass

