"""
==============================================================================
ATTACK CASE: rk4299_attackcase15.r2py
==============================================================================
Target NetID:        rk4299
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-8232
  Task UUID:         2555e42b-939d-49c5-9dbb-d9437074ac85
  Machine Type:      t3.medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:26:28.268632
  End Time:          2025-10-27T19:26:33.730543
  Runtime:           5.4619 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       8f0b951194212e04af0de7e0da9b8689
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      35ed31e8fe43ecfb82130ea5b94593e7

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 19, in <module>
    "/app/safe.py", line 515, in exceptionraiser
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 19, in <module>
  Unsafe call: ("Unsafe call 'dir' with args '()', kwargs '{}'",)
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: rk4299)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
# 
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# # Global dictionaries to track file state
# if 'mycontext' not in dir():
#     mycontext = {}
# 
# 
# if 'open_files' not in mycontext:
#     mycontext['open_files'] = {}
# if 'file_versions' not in mycontext:
#     mycontext['file_versions'] = {}
# if 'version_map' not in mycontext:
#     mycontext['version_map'] = {}
# if 'file_handles' not in mycontext:
#     mycontext['file_handles'] = {}
# 
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
#         self.filename = filename
#         self.is_old_version = False
# 
#         if '.v' in filename and create:
#             raise RepyArgumentError("Cannot create explicit version files")
# 
#         if '.v' in filename:
#             if filename not in listfiles():
#                 raise FileNotFoundError("File not found: " + filename)
#             base_name = filename.split('.v')[0]
#             version_num = int(filename.split('.v')[1])
#             if base_name in mycontext['file_versions']:
#                 if version_num < mycontext['file_versions'][base_name]:
#                     self.is_old_version = True
#             self.VMfile = openfile(filename, False)
# 
#         elif create:
#             if filename in mycontext['open_files'] and mycontext['open_files'][filename]:
#                 raise FileInUseError("Cannot create new version while file is open")
# 
#             if filename in listfiles():
#                 # File exists → create version 1
#                 if filename not in mycontext['file_versions']:
#                     mycontext['file_versions'][filename] = 0
# 
#                 if mycontext['file_versions'][filename] == 0:
#                     prev_file = openfile(filename, False)
#                 else:
#                     latest_version_name = filename + ".v" + str(mycontext['file_versions'][filename])
#                     prev_file = openfile(latest_version_name, False)
# 
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
# 
#                 mycontext['file_versions'][filename] += 1
#                 new_version_num = mycontext['file_versions'][filename]
# 
#                 new_name = filename + ".v" + str(new_version_num)
#                 self.VMfile = openfile(new_name, True)
#                 self.VMfile.writeat(content, 0)
# 
#                 mycontext['version_map'][new_name] = filename
#                 mycontext['open_files'][filename] = True
# 
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#                 mycontext['file_versions'][filename] = 0
#                 mycontext['open_files'][filename] = True
#         else:
#             # Open existing file normally
#             if filename not in listfiles():
#                 raise FileNotFoundError("File not found: " + filename)
#             self.VMfile = openfile(filename, False)
#             if '.v' not in filename:
#                 mycontext['open_files'][filename] = True
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.is_old_version:
#             raise FileInUseError("Cannot write to old version")
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         result = self.VMfile.close()
#         if self.filename in mycontext['open_files']:
#             mycontext['open_files'][self.filename] = False
#         elif '.v' in self.filename:
#             base_name = self.filename.split('.v')[0]
#             if base_name in mycontext['open_files']:
#                 mycontext['open_files'][base_name] = False
#         return result
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     all_files = listfiles()
#     filtered_files = []
#     for f in all_files:
#         if '.v' not in f:
#             filtered_files.append(f)
#     return filtered_files
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)),
#                 "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str,
#                "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)),
#               "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
