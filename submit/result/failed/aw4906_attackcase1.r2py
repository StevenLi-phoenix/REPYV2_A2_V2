"""
==============================================================================
ATTACK CASE: aw4906_attackcase1.r2py
==============================================================================
Target NetID:        aw4906
Original Test:       test12_dot_v_filename.r2py
Test File Path:      submit/general_tests/test12_dot_v_filename.r2py

RUNNER INFORMATION:
  Runner ID:         runner-2754
  Task UUID:         d2a3cd50-8476-4c1f-afbb-1fac30579ba4
  Machine Type:      c5.xlarge
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:20:06.343163
  End Time:          2025-10-27T19:20:10.310420
  Runtime:           3.9673 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       788a359355a40a176c682cf9f18232a4
  Attack MD5:        a7d5c17bb270fce5bb08224a91fb60f6
  Combined MD5:      747605e13484142e75ea3ae796b31bc4

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 123, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 6, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 72, in LPopenfile
    "monitor.r2py", line 28, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 123, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 6, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 72, in LPopenfile
    "monitor.r2py", line 28, in __init__
  Exception (with class 'exception_hierarchy.RepyArgumentError'): Cannot create explicit version files
  ---

ORIGINAL TEST DESCRIPTION:
  Test 12: Files with .v but not version pattern
  Verifies that files like "file.version" are allowed and listed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: aw4906)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
# 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
#         if create:
#             self.old = False
#             if ".v" in filename: 
#                 # Manual creation not allowed
#                 raise RepyArgumentError("Cannot create explicit version files")
#             if filename in listfiles():
#                 if filename not in mycontext:
#                     # File exists → create version 1
#                     prev_file = openfile(filename, False) 
#                     mycontext[filename] = 1 
#                 else: 
#                     # Version 1 exists → create version [num] 
#                     curr_ver = filename + ".v" + str(mycontext[filename])
#                     prev_file = openfile(curr_ver, False)
#                     mycontext[filename] += 1
# 
#                 content = prev_file.readat(None, 0)
# 
#                 new_name = filename + ".v" + str(mycontext[filename])
#                 self.VMfile = openfile(new_name, True)
#                 self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#         else:
#             # Check if file exists
#             if filename not in listfiles(): 
#                 raise FileNotFoundError
#             else: 
#                 self.old = True
#                 # Open existing file normally
#                 self.VMfile = openfile(filename, False)
#         
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.old:
#             raise FileInUseError
#         else: 
#             return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
#     # removefile(filename)
# 
# # FIX listfiles()
# 
# def LPlistfiles():
#     new_list = []
#     for key in mycontext: 
#         new_list.append(key) 
#     return new_list
#     # return listfiles()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("file.version", True)
f1.writeat("NotAVersion", 0)
f1.close()

files = listfiles()
if "file.version" not in files:
    log("ERROR: Non-version .v file should be listed\n")
    exitall()

