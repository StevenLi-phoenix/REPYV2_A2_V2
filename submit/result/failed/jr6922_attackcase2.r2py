"""
==============================================================================
ATTACK CASE: jr6922_attackcase2.r2py
==============================================================================
Target NetID:        jr6922
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-8166
  Task UUID:         ce75c861-9dc1-4c32-a386-bc9a18fe0587
  Machine Type:      t3.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:07.457095
  End Time:          2025-10-27T19:23:12.153604
  Runtime:           4.6965 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       75486a71b2e644f768459c1bc0868903
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      36dd083e28d9f1b07bb7f8cffe150ce9

FAILURE DETAILS:
  Reason:            ERROR: data.value should be in listfiles


STDOUT:
  ERROR: data.value should be in listfiles

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jr6922)
# ============================================================================
# """
# This security layer handles Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# mycontext = {}
# mycontext['open_files'] = {} 
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
# 
#         self.filename = filename
#         self.is_old_version = False
#         
# 
#         if '.v' in filename:
#             parts = filename.rsplit('.v', 1)
#             self.base_name = parts[0]
#             try:
#                 self.version_num = int(parts[1])
#                 self.is_versioned_file = True
#             except:
# 
#                 self.base_name = filename
#                 self.version_num = None
#                 self.is_versioned_file = False
#         else:
#             self.base_name = filename
#             self.version_num = None
#             self.is_versioned_file = False
#         
# 
#         if create:
#             if self.is_versioned_file:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             
#             if filename in mycontext['open_files']:
#                 raise FileInUseError("Cannot create new version while latest version is open")
#             
#             all_files = listfiles()
#             
#             if filename in all_files:
#                 
#                 highest_version = 0
#                 for f in all_files:
#                     if f.startswith(filename + '.v'):
#                         try:
#                             version_str = f.split('.v')[1]
#                             version_num = int(version_str)
#                             if version_num > highest_version:
#                                 highest_version = version_num
#                         except:
#                             pass
#                 
#                 if highest_version > 0:
#                     source_filename = filename + '.v' + str(highest_version)
#                 else:
#                     source_filename = filename
#                 
#                 src_file = openfile(source_filename, False)
#                 content = src_file.readat(None, 0)
#                 src_file.close()
#                 
#                 new_version_num = highest_version + 1
#                 new_filename = filename + '.v' + str(new_version_num)
#                 
#                 self.VMfile = openfile(new_filename, True)
#                 self.VMfile.writeat(content, 0)
#                 
#                 self.filename = new_filename
#                 self.base_name = filename
#                 self.version_num = new_version_num
#                 self.is_versioned_file = True
#                 self.is_old_version = False
#                 
#                 mycontext['open_files'][new_filename] = True
#                 
#             else:
#                 self.VMfile = openfile(filename, True)
#                 self.is_old_version = False
#                 mycontext['open_files'][filename] = True
#         else:
#             all_files = listfiles()
#             
#             if filename not in all_files:
#                 raise FileNotFoundError("File does not exist")
#             
#             self.VMfile = openfile(filename, False)
#             
#            
#             if self.is_versioned_file:
#                 highest_version = 0
#                 for f in all_files:
#                     if f.startswith(self.base_name + '.v'):
#                         try:
#                             version_str = f.split('.v')[1]
#                             version_num = int(version_str)
#                             if version_num > highest_version:
#                                 highest_version = version_num
#                         except:
#                             pass
#                 
#                 if self.version_num < highest_version:
#                     self.is_old_version = True
#                 else:
#                     self.is_old_version = False
#             else:
#                 has_versions = False
#                 for f in all_files:
#                     if f.startswith(filename + '.v'):
#                         has_versions = True
#                         break
#                 
#                 if has_versions:
#                     self.is_old_version = True
#                 else:
#                     self.is_old_version = False
#             
#             mycontext['open_files'][filename] = True
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.is_old_version:
#             raise FileInUseError("Cannot write to versioned files")
#         
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.filename in mycontext['open_files']:
#             del mycontext['open_files'][self.filename]
#         
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     all_files = listfiles()
#     
#     base_files = []
#     seen_bases = {}
#     
#     for f in all_files:
#         if '.v' in f:
#             base = f.rsplit('.v', 1)[0]
#             if base not in seen_bases:
#                 seen_bases[base] = True
#         else:
#             if f not in seen_bases:
#                 seen_bases[f] = True
#     
#     for base in seen_bases:
#         base_files.append(base)
#     
#     return base_files
# 
# 
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# secure_dispatch_module()
# 
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
