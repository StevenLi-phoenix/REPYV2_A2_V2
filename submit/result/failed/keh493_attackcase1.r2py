"""
==============================================================================
ATTACK CASE: keh493_attackcase1.r2py
==============================================================================
Target NetID:        keh493
Original Test:       test11_version_readonly.r2py
Test File Path:      submit/general_tests/test11_version_readonly.r2py

RUNNER INFORMATION:
  Runner ID:         runner-7343
  Task UUID:         2d382aad-6d48-47a4-831c-a3cb07d11dc1
  Machine Type:      t3.medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:27.167487
  End Time:          2025-10-27T19:23:32.104704
  Runtime:           4.9372 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       977f7b2f65cb90c86022a50335e3c4df
  Attack MD5:        be269b8b0b711bacf397eda82dfc2332
  Combined MD5:      c5379e11e5342254db8a13db156574ce

FAILURE DETAILS:
  Reason:            ERROR: Should not allow writing to version file


STDOUT:
  ERROR: Should not allow writing to version file

ORIGINAL TEST DESCRIPTION:
  Test 11: Version files are read-only by default
  Verifies that version files cannot be written to

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: keh493)
# ============================================================================
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#         if create:
#             if '.v' in filename:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             if filename in listfiles():
# 
#                 vNumber = 1
# 
#                 all_files = listfiles()
# 
#                 all_files.sort()
# 
#                 for i in all_files:
#                     if (filename + '.v') in i:
#                         vNumber += 1
# 
#                 new_name = filename + '.v' + str(vNumber)
# 
#                 if vNumber == 1:
#                     prev_file = openfile(filename, False)
#                 else:
#                     prev_file = openfile((filename +'.v' + str(vNumber-1)),False)
# 
#                 content = prev_file.readat(None,0)
# 
#                 self.VMfile = openfile(new_name, True)
#                 self.VMfile.writeat(content, 0)
#                 self.filename = new_name
#             else:
#                 self.VMfile = openfile(filename, True)
#                 self.filename = filename
#         else:
#             try:
#                 self.VMfile = openfile(filename, False)
#                 self.filename = filename
#             except FileNotFoundError:
#                 raise FileNotFoundError
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset): 
#         if '.v' not in self.filename:
#             if (self.filename + '.v1') in listfiles():
#                 raise FileInUseError
#             else:
#                 return self.VMfile.writeat(data, offset)
#         else:
#             index = 0
#             for i in self.filename:
#                 if i != '.':
#                     index +=1
#                 else:
#                     break
#             vNumber = int(self.filename[(index+2):])
#             if (self.filename[:index] + '.v' + str(vNumber + 1)) in listfiles():
#                 raise FileInUseError
#             else:
#                 return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
# 
# def LPlistfiles():
#     actual_list = []
#     for i in listfiles():
#         if '.v' in i:
#             continue
#         else:
#             actual_list.append(i)
#     return actual_list
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile11", True)
f1.writeat("V1", 0)
f1.close()

f2 = openfile("testfile11", True)
f2.writeat("V2", 0)
f2.close()

# Try to write to v1
f3 = openfile("testfile11.v1", False)
try:
    f3.writeat("Hack", 0)
    log("ERROR: Should not allow writing to version file\n")
    exitall()
except FileInUseError:
    pass
f3.close()

