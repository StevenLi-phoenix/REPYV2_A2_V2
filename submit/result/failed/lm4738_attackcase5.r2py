"""
==============================================================================
ATTACK CASE: lm4738_attackcase5.r2py
==============================================================================
Target NetID:        lm4738
Original Test:       test16_startswith_vault_bug.r2py
Test File Path:      submit/general_tests/test16_startswith_vault_bug.r2py

RUNNER INFORMATION:
  Runner ID:         runner-2423
  Task UUID:         bdae4db3-bdef-40ae-822f-a205c1995023
  Machine Type:      Standard_F4s_v2
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:24:04.507848
  End Time:          2025-10-27T19:24:10.570439
  Runtime:           6.0626 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       660363805fadd129ae2782b82fe7f58d
  Attack MD5:        8f001b374ace212a6d5f595dbcbedf6a
  Combined MD5:      9d403b5b08a2588fa89cac23e2c7f313

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 158, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 99, in LPopenfile
    "monitor.r2py", line 19, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 158, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 99, in LPopenfile
    "monitor.r2py", line 19, in __init__
  Exception (with class 'exception_hierarchy.RepyArgumentError'): Cannot create explicit version files
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: aa12037, al8372, bzy205, jaa10243, krg9790, nb4048, sr7991, zs2985
  Vulnerability: Uses startswith() which incorrectly matches "file.vault" when checking for "file.v*"
  Attack: Create "data.vault" then "data" - should not confuse them as versions

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: lm4738)
# ============================================================================
# """
#  py -2 repy.py restrictions.default encasementlib.r2py reference_monitor_lm4738.r2py lm4738_attackcase.r2py 
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# permanent_files = set() # since after closing, you can never write to them again anyway
# 
# class VMFile():
#     # name = ''
#     def __init__(self, filename, create):
#         #FIRST: Block manual creation of versioned files
#         if ".v" in filename and create == True:
#             raise RepyArgumentError("Cannot create explicit version files")
# 
#         # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         latest_name = filename
#         if create:
#             if filename in listfiles():
#                 # File exists → create version 1, readidng from the previous
#                 prev_file = openfile(filename, False)
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
#                 # Handling further versions
#                 latest = latest_version_for(filename)
#                 
#                 if latest >= 0:
#                     latest_name = (filename + ".v" + str(latest+1))
# 
#                 self.VMfile = openfile(latest_name, True)
#                 self.VMfile.writeat(content, 0) # copy from last file
# 
#             else: # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#                 latest_name  = filename
#             self.name = latest_name
#         else:
#             # Not create, so open it normally
#             # Open existing file normally
#             self.VMfile = openfile(filename, False)
#             self.name = filename
#         
# 
#     def readat(self, num_bytes, offset): # Can always read from files!
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.name not in permanent_files:
#             return self.VMfile.writeat(data, offset)
#         else:
#             raise FileInUseError("File in use")
# 
# 
#     def close(self):
#         permanent_files.add(self.name)
#         return self.VMfile.close()
# 
# def is_versioned_name(filename):
#     if ".v" in filename:
#         parts = filename.rsplit(".v", 1)
#         if len(parts)==2:
#             base = parts[0]
#             verstr = parts[1]
#             if verstr.isdigit() and verstr != "":
#                 return (base, int(verstr))
#     return (filename, None)
# 
# def latest_version_for(base_name):
#     files = listfiles()
#     base_exists = (base_name in files)
# 
#     if base_exists:
#         best_ver = 0
#     else:
#         best_ver = None
#     
#     for fname in files:
#         b, v = is_versioned_name(fname)
#         if b == base_name and v is not None:
#             if best_ver is None or v > best_ver:
#                 best_ver = v
#     return best_ver
# 
# 
# def LPopenfile(filename, create):
#     if create == False:
#         # First, need to check that file exists first. If not, raise FNF error
#         if filename not in listfiles():
#             raise FileNotFoundError("File not found")
#         return VMFile(filename, False)
# 
#     else: # if create == True:
#     # Create a new file/version, via init
#         file = VMFile(filename, True)
#         return file 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     # Should not show that versions exist, only the basefiles. a plain list.
#     files = listfiles()
#     seen = {} # a dict to store bases
#     out = []
#     for filename in files:
#         base, ver = is_versioned_name(filename)
#         if base not in seen:
#             seen[base] = True
#             out.append(base)
#     return out
# 
# # A method that updates the permanent files set, i.e. marks which files have been closed already and thus cannot be written again
# def updatePermanentFiles():
#     for file in listfiles():
#         permanent_files.add(file)
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# updatePermanentFiles() #add the files that were already existing into permanent files list
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Create file with .v in name but not a version
f1 = openfile("data.vault", True)
f1.writeat("vault_data", 0)
f1.close()

# Create file with same prefix
f2 = openfile("data", True)
f2.writeat("base_data", 0)
f2.close()

# Create version of data - should copy from "data", not "data.vault"
f3 = openfile("data", True)
content = f3.readat(None, 0)
if content != "base_data":
    log("ERROR: Should copy from data, not data.vault\n")
    exitall()
f3.close()

# Both should be in listfiles
files = listfiles()
if "data" not in files:
    log("ERROR: data should be in listfiles\n")
    exitall()
if "data.vault" not in files:
    log("ERROR: data.vault should be in listfiles\n")
    exitall()
