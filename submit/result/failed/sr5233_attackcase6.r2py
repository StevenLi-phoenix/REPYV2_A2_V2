"""
==============================================================================
ATTACK CASE: sr5233_attackcase6.r2py
==============================================================================
Target NetID:        sr5233
Original Test:       test16_startswith_vault_bug.r2py
Test File Path:      submit/general_tests/test16_startswith_vault_bug.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4652
  Task UUID:         fe76b640-6a3c-45f5-ae5b-57082b84e9e5
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:27:44.493862
  End Time:          2025-10-27T19:27:49.272964
  Runtime:           4.7791 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       afa6fda2aa303ea390b673883433b126
  Attack MD5:        8f001b374ace212a6d5f595dbcbedf6a
  Combined MD5:      4f5194b57628df40fac24b9e4e35d7e1

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 171, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 127, in LPopenfile
    "monitor.r2py", line 65, in __init__
    "monitor.r2py", line 123, in getversion
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 171, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 127, in LPopenfile
    "monitor.r2py", line 65, in __init__
    "monitor.r2py", line 123, in getversion
  Exception (with type 'exceptions.ValueError'): invalid literal for int() with base 10: 'ault'
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: aa12037, al8372, bzy205, jaa10243, krg9790, nb4048, sr7991, zs2985
  Vulnerability: Uses startswith() which incorrectly matches "file.vault" when checking for "file.v*"
  Attack: Create "data.vault" then "data" - should not confuse them as versions

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: sr5233)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py reference_monitor_sr5233.r2py sr5233_attackcase.r2py 
#     
# """
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# mycontext["filenames"] = dict()
# 
# # On the assumption that the folder will be empty
# # But keeping this just in case I need to explain
# # I COULD NOT TEST WITH AN EMPTY FOLDER SINCE REPY WOULD NOT RUN 
# # The following 2 lines were necessary to run alongside the other files present
# # for i in listfiles():
# #    mycontext["filenames"][i]=0    
# 
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         self.filename =''
# 
#         if create:
#             if filename in listfiles():
#                 # File exists → create version 1
#                 
#                 # So Case 4 is already solved
#                 if(getversion(filename) >= 0):
#                     raise RepyArgumentError("Cannot create explicit version files")
# 
#                 # For opening prev version where its not just the filename
#                 # It also makes sure you aren't trying to open an already open file
#                 if(mycontext["filenames"][filename] > 0):
#                     prev_file = openfile(filename+".v"+str(mycontext["filenames"][filename]), False)
#                 else:
#                     prev_file = openfile(filename, False)
#                 content = prev_file.readat(None, 0) # Copy contents
# 
#                 # Update version number in the dictionary and make a new filename
#                 # We are not adding the versioned document to the list ourselves
#                 mycontext["filenames"][filename] = mycontext["filenames"][filename] + 1
#                 new_name = filename + ".v" + str(mycontext["filenames"][filename])
#                 self.filename = new_name
# 
#                 # Open the file
#                 self.VMfile = openfile(new_name, True)
#                 # Copy contents
#                 self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
# 
#                 # Cannot manually create a versioned doc
#                 if(getversion(filename) >= 0):
#                     raise RepyArgumentError("Cannot create explicit version files")
#                 
#                 # Add its filename to the list and open 
#                 self.filename = filename
#                 mycontext["filenames"][filename]=0
#                 self.VMfile = openfile(filename, True)
#         else:
#             # Open existing file normally
#             # THIS IS WHERE VERSION CONTROL COMES
#             v = getversion(filename)
# 
#             # Is this a valid versioned document?
#             if(v > 0):
#                 dotindex = filename.rfind('.')
#                 oldname = filename[:dotindex]
# 
#                 # Is this a version that exists?
#                 if(v > mycontext["filenames"][oldname]):
#                     raise Exception("FileNotFoundError")
#                 else:
#                     self.filename = filename
#             else:
#                 # For not versioned documents and my sanity
#                 self.filename = filename
# 
#             self.VMfile = openfile(filename, False)
# 
# 
#     # No error checking here because opening the file would've taken care of it
#     # You cannot open an invalid document
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
# 
#     def writeat(self, data, offset):
#         ver = getversion(self.filename)
#         # This is a versioned document
#         if(ver != -1):
#             dotindex = self.filename.rfind('.')
#             oldname = self.filename[:dotindex]
#             
#             # Cannot write to a version that is not latest
#             if ver != mycontext["filenames"][oldname]:
#                 raise Exception("FileInUseError")
# 
#         # Otherwise this is the latest version so carry on
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# # Function to find version numbers
# def getversion(filename):
#     v = filename.rfind('v')
#     if(v == -1):
#         return -1
#     else:
#         ver = int(filename[v+1:])
#         return ver
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
# 
# def LPlistfiles():
#     return listfiles()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Create file with .v in name but not a version
f1 = openfile("data.vault", True)
f1.writeat("vault_data", 0)
f1.close()

# Create file with same prefix
f2 = openfile("data", True)
f2.writeat("base_data", 0)
f2.close()

# Create version of data - should copy from "data", not "data.vault"
f3 = openfile("data", True)
content = f3.readat(None, 0)
if content != "base_data":
    log("ERROR: Should copy from data, not data.vault\n")
    exitall()
f3.close()

# Both should be in listfiles
files = listfiles()
if "data" not in files:
    log("ERROR: data should be in listfiles\n")
    exitall()
if "data.vault" not in files:
    log("ERROR: data.vault should be in listfiles\n")
    exitall()
