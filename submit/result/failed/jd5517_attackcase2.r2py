"""
==============================================================================
ATTACK CASE: jd5517_attackcase2.r2py
==============================================================================
Target NetID:        jd5517
Original Test:       test09_multiple_versions.r2py
Test File Path:      submit/general_tests/test09_multiple_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-1065
  Task UUID:         1ac708b2-a485-4feb-93a0-bd34185101be
  Machine Type:      m5.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:34.502653
  End Time:          2025-10-27T19:22:39.522138
  Runtime:           5.0195 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       0bc1876d5780c8e00095a66b2293d595
  Attack MD5:        b705d0458f62c6142becb1b7dfc564ab
  Combined MD5:      5af917a4c3c8a50f34eb9a779209b911

FAILURE DETAILS:
  Reason:            ERROR: Base file should remain unchanged


STDOUT:
  ERROR: Base file should remain unchanged

ORIGINAL TEST DESCRIPTION:
  Test 9: Multiple versions work correctly (v1, v2, v3, v4, v5)
  Verifies that multiple versions can be created and accessed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jd5517)
# ============================================================================
# """
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# # global metadata
# files_meta = {}
# _COPY_CHUNK_SIZE = 4096
# 
# # helper: parse explicit version like "foo.v12"
# def _parse_versioned(name):
#     pos = name.rfind(".v")
#     if pos == -1: return (None, None)
#     base = name[:pos]
#     suffix = name[pos+2:]
#     if not suffix.isdigit(): return (None, None)
#     if len(suffix) > 1 and suffix[0] == '0': return (None, None)
#     try: vernum = int(suffix)
#     except ValueError: return (None, None)
#     if vernum < 1 or base == "": return (None, None)
#     return (base, vernum)
# 
# def _ensure_meta(base):
#     if base not in files_meta:
#         files_meta[base] = {"versions": [], "latest_index": None, "open_counts": {}}
# 
# def _latest_underlying_name(base):
#     meta = files_meta.get(base)
#     if not meta or meta["latest_index"] is None: return None
#     return meta["versions"][meta["latest_index"]]
# 
# def _underlying_for_explicit(base, vernum):
#     meta = files_meta.get(base)
#     if not meta: return None
#     if vernum == 0:
#         return base
#     
#     if vernum <= len(meta["versions"]) -1:
#         name = meta["versions"][vernum]
#         if name.endswith(".v" + str(vernum)):
#             return name
#     
#     target = ".v" + str(vernum)
#     for name in meta["versions"]:
#         if name.endswith(target):
#             return name
#     return None
# 
# class VMFile():
#     def __init__(self, filename, create):
#         base, vernum = _parse_versioned(filename)
#         if base is not None:
#             if create:
#                 raise RepyArgumentError("Cannot create explicit version files!")
#             
#             _ensure_meta(base)
#             meta = files_meta[base]
#             underlying = base + ".v" + str(vernum)
#             
#             if meta["open_counts"].get(underlying, 0) > 0:
#                 raise FileInUseError("This version is already open via another handle!")
# 
#             if underlying not in meta["versions"]:
#                  raise FileNotFoundError("Explicit version not found!")
# 
#             self._underlying_name = underlying
#             self._base = base
#             self._vernum = vernum
#             self._handle = openfile(underlying, False)
#             meta["open_counts"][underlying] = meta["open_counts"].get(underlying, 0) + 1
#             self._closed = False
#             return
# 
#         base = filename
#         _ensure_meta(base)
#         meta = files_meta[base]
# 
#         if create:
#             if meta["latest_index"] is None:
#                 uh = openfile(base, True)
#                 meta["versions"].append(base)
#                 meta["latest_index"] = 0
#                 meta["open_counts"][base] = meta["open_counts"].get(base, 0) + 1
#                 self._underlying_name = base
#                 self._base = base
#                 self._vernum = None
#                 self._handle = uh
#                 self._closed = False
#                 return
#             
#             latest = meta["versions"][meta["latest_index"]]
#             if meta["open_counts"].get(latest, 0) > 0:
#                 raise FileInUseError("cannot create new version while latest is open")
#             
#             nextver = len(meta["versions"])
#             nextname = base + ".v" + str(nextver)
#             
#             newuh = openfile(nextname, True)
#             
#             latestuh = openfile(latest, False)
#             off = 0
#             while True:
#                 chunk = latestuh.readat(_COPY_CHUNK_SIZE, off)
#                 if not chunk: break
#                 newuh.writeat(chunk, off)
#                 off += len(chunk)
#             latestuh.close()
# 
#             meta["versions"].append(nextname)
#             meta["latest_index"] = nextver
#             meta["open_counts"].setdefault(nextname, 0)
#             meta["open_counts"][nextname] += 1
#             
#             self._underlying_name = nextname
#             self._base = base
#             self._vernum = None
#             self._handle = newuh
#             self._closed = False
#             return
#         
#         else:
#             if meta["latest_index"] is None:
#                 raise FileNotFoundError("file not found")
#             latest = meta["versions"][meta["latest_index"]]
# 
#             if meta["open_counts"].get(latest, 0) > 0:
#                 raise FileInUseError("The latest version is already open via another handle!")
# 
#             uh = openfile(latest, False)
#             meta["open_counts"][latest] = meta["open_counts"].get(latest, 0) + 1
#             self._underlying_name = latest
#             self._base = base
#             self._vernum = None
#             self._handle = uh
#             self._closed = False
#             return
# 
#     def readat(self, num_bytes, offset):
#         return self._handle.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self._vernum is not None:
#             raise FileInUseError("Cannot write to an older version of a file.")
# 
#         meta = files_meta.get(self._base)
#         latest_under = meta["versions"][meta["latest_index"]]
#         if self._underlying_name != latest_under:
#             raise FileInUseError("Cannot write to a file that has been superseded by a newer version.")
#             
#         return self._handle.writeat(data, offset)
# 
#     def close(self):
#         if not self._closed:
#             meta = files_meta.get(self._base)
#             if meta and self._underlying_name in meta["open_counts"]:
#                 meta["open_counts"][self._underlying_name] -= 1
#             self._closed = True
#         return self._handle.close()
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("removefile forbidden by immutable monitor")
# 
# def LPlistfiles():
#     names = []
#     for base in files_meta:
#         names.append(base)
#     names.sort()
#     return names
# 
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# CHILD_CONTEXT_DEF["openfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def, TARGET: LPopenfile}
# CHILD_CONTEXT_DEF["removefile"] = {TYPE: FUNC, ARGS: (str,), EXCP: Exception, RETURN: type(None), TARGET: LPremovefile}
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile9", True)
f1.writeat("Base", 0)
f1.close()

# Create versions v1 through v5
for i in range(1, 6):
    fx = openfile("testfile9", True)
    content = fx.readat(None, 0)
    fx.writeat("V" + str(i), len(content))
    fx.close()

# Verify base file still has original content (immutable)
f2 = openfile("testfile9", False)
content = f2.readat(None, 0)
if content != "Base":
    log("ERROR: Base file should remain unchanged\n")
    exitall()
f2.close()

# Verify latest version (v5) has all accumulated content
f3 = openfile("testfile9.v5", False)
content = f3.readat(None, 0)
if "BaseV1V2V3V4V5" not in content:
    log("ERROR: Latest version should accumulate all changes\n")
    exitall()
f3.close()

