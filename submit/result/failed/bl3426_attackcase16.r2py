"""
==============================================================================
ATTACK CASE: bl3426_attackcase16.r2py
==============================================================================
Target NetID:        bl3426
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4424
  Task UUID:         9432fffd-221d-4ce4-924c-0ab28f74fa66
  Machine Type:      c5.xlarge
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:20:32.111858
  End Time:          2025-10-27T19:20:37.358956
  Runtime:           5.2471 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       39f6e2826473e7ca89a0d6cde3d543d1
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      2cad24e2b0dd62b2ed3c7e947b2e0596

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 219, in secure_dispatch
    "/app/encasementlib.r2py", line 89, in _layer_code
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 219, in secure_dispatch
    "/app/encasementlib.r2py", line 89, in _layer_code
  Exception (with class 'exception_hierarchy.CodeUnsafeError'): Compiling security layer 'monitor.r2py' failed! Got exception: 'Code failed safety check! Error: ("<type 'exceptions.IndentationError'> unindent does not match any outer indentation level (line 118)",)'
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: bl3426)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# 
# try:
#     mycontext
# except NameError:
#     mycontext = {}
# 
# if not mycontext.get('vm_initialized', False):
#     mycontext['latest_versions'] = {}
#     mycontext['open_latest'] = {}
#     mycontext['basenames'] = {}
#     mycontext['vm_initialized'] = True
# 
# try:
#     RepyArgumentError
# except NameError:
#     RepyArgumentError = Exception
# 
# try:
#     FileInUseError
# except NameError:
#     FileInUseError = Exception
# 
# def split_base_and_version(name):
#     #only consider .v suffixes followed by some numbers
#     if name is None:
#         return (name, 0)
#     parts = name.rsplit('.v', 1)
#     if len(parts) == 2:
#         base, tail = parts[0], parts[1]
#         #make sure tail is all digits and not empty
#         try:
#             if tail != '' and tail.isdigit():
#                 return (base, int(tail))
#         except Exception:
#             pass
#     return (name, 0)
# 
# 
# #helpers to query internal state
# def latest_index_for(base):
#     lv = mycontext['latest_versions'].get(base)
#     if lv is None:
#         return None
#     return lv
# 
# def ensure_basename_recorded(base):
#     mycontext['basenames'][base] = True
# 
# def is_latest_open(base):
#     return mycontext['open_latest'].get(base, False)
# 
# def set_latest_open(base, val):
#     mycontext['open_latest'][base] = bool(val)
# 
# def set_latest_index(base, idx):
#     mycontext['latest_versions'][base] = int(idx)
# 
# def next_version_index(base):
#     cur = mycontext['latest_versions'].get(base)
#     if cur is None:
#         return 0
#     return cur + 1
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#     #If a file with the same 'filename' already exists, creates a new version 'filename.v1'
#     #parsing
#         base, version = split_base_and_version(filename)
#         self.requested_name = filename
#         self.base = base
#         self.version = version  # 0 for base, >0 for .vN
#         #tracks whether this wrapper was created by a create func
#         self._writable = False
#         #underlying raw file handle from repys openfile 
#         self._underlying = None
# 
#  #case 1: explicit version name - contains .vN
#         if version > 0:
#             if create:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             #open file, if nonexistent then raise
#             self._underlying = openfile(filename, False)
#             #explicit versions are treated read onlu
#             self._writable = False
#             return
# 
# 
#  #case 2: no .vN 
#         if create:
#             if base not in mycontext['latest_versions']:
#                 #create base file
#                 self._underlying = openfile(base, True)
#                 set_latest_index(base, 0)
#                 ensure_basename_recorded(base)
#                 #handle is the latest and writable
#                 self._writable = True
#                 set_latest_open(base, True)
#                 #record that this wrapper corresponds to base version 0
#                 self.version = 0
#           else:
#                 #base exists then create a new .vN
#                 if is_latest_open(base):
#                     raise FileInUseError("Latest version is currently open")
#                 new_idx = next_version_index(base)
#                 new_name = base + ".v" + str(new_idx)
#                 prev_idx = mycontext['latest_versions'][base]
#                 if prev_idx == 0:
#                     prev_name = base
#                 else:
#                     prev_name = base + ".v" + str(prev_idx)
#                 prev_handle = openfile(prev_name, False)
#                 try:
#                     content = prev_handle.readat(None, 0)
#                 finally:
#                     prev_handle.close()
#                 #create new version and write copied content
#                 new_handle = openfile(new_name, True)
#                 if content is not None:
#                     new_handle.writeat(content, 0)
#                 self._underlying = new_handle
#                 set_latest_index(base, new_idx)
#                 ensure_basename_recorded(base)
#                 #mark latest open
#                 self._writable = True
#                 set_latest_open(base, True)
#                 self.version = new_idx
#         else:
#           self._underlying = openfile(base, False)
#           #treat base opens (create=False) as non writable
#           self._writable = False
#           # version is 0 (base)
#           self.version = 0     
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not self._writable:
#             raise FileInUseError("Cannot write to non-latest (immutable) version")
#         cur_latest = mycontext['latest_versions'].get(self.base)
#         if cur_latest is None:
#             raise FileInUseError("No such file or inconsistent latest index")
#         if self.version != cur_latest:
#             raise FileInUseError("Cannot write to an older version")
#         #delegate to underlying
#         return self._underlying.writeat(data, offset)
#         
#     def close(self):
#         #delegate underlying close
#         try:
#             result = self._underlying.close()
#         finally:
#             #If this wrapper was the writable latest, clear the "open" flag
#             if self._writable:
#                 set_latest_open(self.base, False)
#                 #keep latest_versions index as is
#         return result
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("removefile is forbidden for immutable files")
# 
# def LPlistfiles():
#     return mycontext['basenames'].keys()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
