"""
==============================================================================
ATTACK CASE: vp2306_attackcase5.r2py
==============================================================================
Target NetID:        vp2306
Original Test:       test12_dot_v_filename.r2py
Test File Path:      submit/general_tests/test12_dot_v_filename.r2py

RUNNER INFORMATION:
  Runner ID:         runner-1444
  Task UUID:         20691f7d-8103-430b-9f17-b478545cf4af
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:28:37.103093
  End Time:          2025-10-27T19:28:42.412722
  Runtime:           5.3096 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       babdd0b369d7f011a3d68213330d3e19
  Attack MD5:        a7d5c17bb270fce5bb08224a91fb60f6
  Combined MD5:      63df71304a979b6c813b9077e125b523

FAILURE DETAILS:
  Reason:            ---
0.553642034531 Fatal Error: Function 'listfiles' tried to return value with type: '<type 'list'>

STDOUT:
  ---
  0.553642034531 Fatal Error: Function 'listfiles' tried to return value with type: '<type 'list'>' which is forbidden. 
  ---

ORIGINAL TEST DESCRIPTION:
  Test 12: Files with .v but not version pattern
  Verifies that files like "file.version" are allowed and listed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: vp2306)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# #check if files are already opened
# file_index = {}
# open_handle_count = {}
# 
# 
# def is_filename_valid(filename):
#     #not valid if not string
#     if not isinstance(filename, str):
#         return False
#     #if name is blank or just a dot, not valid
#     if filename == "" or filename == "." or filename == "..":
#         return False
#     if filename[0] == ".":
#         return False
#     if len(filename) > 120:
#         return False
#     for char in filename:
#         if ('a' <= char <= 'z') or ('0' <= char <= '9') or char in ('-', '_', '.'):
#             continue
#         return False
#     return True
#     
# #check if filename is already versioned to ensure proper follow up
# def is_filename_versioned(filename):
#     if not isinstance(filename, str):
#         return(None, None)
#     if len(filename) == 0:
#         return(None, None)
#     #check for version indicator
#     index = filename.rfind(".v")
#     if index == -1:
#         return (None, None)
#     #get base filename by slicing before index
#     basename = filename[:index]
#     #get version number by slicing after index
#     vernum = filename[index+2:]
#     if basename == "" or basename[0] ==".":
#         return(None,None)
#     if vernum.isdigit():
#         return(basename, int(vernum))
#     return(None,None)
# 
# 
# def next_version(bname):
#     if bname is None:
#         raise RepyArgumentError("Base filename cannot be None")
#     try:
#         underlying = listfiles()
#     except Exception:
#     #throw exception if array is empty
#         underlying = []
#     max_version = 0
#     for filename in underlying:
#         basename,vernum = is_filename_versioned(filename)
#         if basename == bname and vernum is not None:
#             if vernum > max_version:
#                 max_version = vernum
#     return (bname + ".v" + str(max_version+1))
# 
# class VMFile():
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
# 
# 
#         if not is_filename_valid(filename):
#             raise RepyArgumentError("Filename is not Valid")
#         self.closed =  False
#         self.requested = filename
#         basename, vernum = is_filename_versioned(filename)
#         #new file, no preexisting versions
#         if basename is not None:
#             self.is_versioned = True
#             self.basename = basename
#             self.vernum = vernum
#         #existing, new version
#         else:
#             self.is_versioned = False
#             self.basename = filename
#             self.vernum = None
# 
#         if self.is_versioned and create:
#             raise RepyArgumentError("Invalid Operation")
#         if create and not self.is_versioned:
#             if filename in listfiles():
#                 latest_name = filename
#                 #check if file is already open
#                 if latest_name in open_handle_count:
#                     raise FileInUseError("Cannot create new version while latest is open")
#                 #if not, use it as new name
#                 new_name = next_version(filename)
#                 prev_file = openfile(filename, False)
#                 try:
#                     try:
#                         content = prev_file.readat(None, 0)
#                     except Exception:
#                         content = ""
#                 finally:
#                     try:
#                         prev_file.close()
#                     except Exception:
#                         pass
#                 
#                 new_file = openfile(new_name, True)
#                 try:
#                     if content is not None and content != "":
#                         new_file.writeat(content, 0)
#                 except Exception:
#                     pass
#                 self.VMfile = new_file
#             else:
#                 # File doesn't exist â†’ create filename
#                 self.VMfile = openfile(filename, True)
#         
#         else:
#              # Open existing file normally
#             self.VMfile = openfile(filename, False)
# 
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.is_versioned:
#             raise FileInUseError("Cannot write to older version")
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Removefile is disallowed")
# 
# def LPlistfiles():
#     base_files = set()
#     for f in listfiles():
#         basename, vernum = is_filename_versioned(f)
#         if basename is not None:
#             base_files.add(basename)
#         else:
#             base_files.add(f)
#     return list(base_files)
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("file.version", True)
f1.writeat("NotAVersion", 0)
f1.close()

files = listfiles()
if "file.version" not in files:
    log("ERROR: Non-version .v file should be listed\n")
    exitall()

