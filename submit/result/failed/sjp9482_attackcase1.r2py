"""
==============================================================================
ATTACK CASE: sjp9482_attackcase1.r2py
==============================================================================
Target NetID:        sjp9482
Original Test:       test05_read_old_versions.r2py
Test File Path:      submit/general_tests/test05_read_old_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-7069
  Task UUID:         10f8b4aa-c7f2-408d-bfa8-3af34c8c5e76
  Machine Type:      n2-standard-4
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:27:11.421940
  End Time:          2025-10-27T19:27:14.803263
  Runtime:           3.3813 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       1b96ca3de16d23ac58a19e5c9e3cd546
  Attack MD5:        9bdf70bf198eb3ed48e2c8e61ca597b0
  Combined MD5:      3e653ea767f1a09a44127fcf2d27ba7c

FAILURE DETAILS:
  Reason:            ERROR: Should be able to read old version


STDOUT:
  ERROR: Should be able to read old version

ORIGINAL TEST DESCRIPTION:
  Test 5: Can read from old versions
  Verifies that old versions remain readable

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: sjp9482)
# ============================================================================
# """
# Sotiros Papadopoulos
# Reference Monitor (built off of provided inadequate design)
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# CHUNK_SIZE = 1024 * 1024 # Mitigates Memory DoS
# 
# # Open file tracking
# open_handles = {}
# 
# def is_versioned_name(filename):
#     # Checks if a filename is in the 'base.vN' format
#     idx = filename.rfind('.v')
#     if idx == -1:
#         return False
#     # Ensure base name before .v and a number after it
#     suffix = filename[idx + 2:]
#     return bool(filename[:idx]) and suffix.isdigit() and len(suffix) > 0
# 
# 
# def get_base_name(filename):
#     # Gets the base name from a versioned file name
#     if is_versioned_name(filename):
#         return filename.split('.v')[0]
#     return filename
# 
# 
# def get_version_number(filename):
#     # Returns the version number, or 0 if not a versioned file
#     if is_versioned_name(filename):
#         return int(filename.split('.v')[-1])
#     return 0
# 
# 
# def get_next_version_from_meta(base):
#     # Reads the current max version from metadata and returns the next version number
#     # Mitigates max version flood attack
#     meta_name = base + '.meta'
#     try:
#         f = openfile(meta_name, False)
#         content = f.readat(None, 0)
#         f.close()
#         return int(content.strip()) + 1
#     except (FileNotFoundError, ValueError):
#         return 1
# 
# def update_version_meta(base, version):
#     # Writes the given version number to the metadata file
#     meta_name = base + '.meta'
#     f = openfile(meta_name, True)
#     f.writeat(str(version), 0)
#     f.close()
# 
# 
# class VMFile(object):
#     def __init__(self, filename, create):
#         self.base = get_base_name(filename)
#         self.fname = filename
#         self.was_create = create
# 
#         # Prevent manual creation of versioned files
#         if is_versioned_name(filename) and create:
#             raise RepyArgumentError("Cannot open explicit version files for creation.")
# 
#         # For writes
#         if create:
#             # Check lock
#             if self.base in open_handles and open_handles[self.base]["write"] > 0:
#                 raise FileInUseError("File is open for writing or creating new version.")
# 
#             # Acquire lock
#             if self.base not in open_handles:
#                 open_handles[self.base] = {"read": 0, "write": 0}
#             open_handles[self.base]["write"] += 1
# 
#             next_ver = get_next_version_from_meta(self.base)
#             prev_ver = next_ver - 1
# 
#             new_name = self.base + '.v' + str(next_ver)
#             self.fname = new_name
# 
#             # Open the new version file
#             self.VMfile = openfile(new_name, True)
# 
#             # Copy content from the latest version if it exists
#             if prev_ver >= 1:
#                 latest_file_to_copy = self.base + '.v' + str(prev_ver)
# 
#                 try:
#                     prev_file = openfile(latest_file_to_copy, False)
#                     copy_offset = 0
#                     while True:
#                         content = prev_file.readat(CHUNK_SIZE, copy_offset)
#                         if not content:
#                             break
#                         self.VMfile.writeat(content, copy_offset)
#                         copy_offset += len(content)
#                     prev_file.close()
#                 except FileNotFoundError:
#                     pass
# 
#             update_version_meta(self.base, next_ver)
# 
#         # For reads
#         else:
#             all_files = listfiles()
# 
#             if not is_versioned_name(filename):
#                 current_max_ver = get_next_version_from_meta(self.base) - 1
#                 if current_max_ver < 1:
#                     raise FileNotFoundError(filename)
#                 self.fname = self.base + '.v' + str(current_max_ver)
# 
#             elif self.fname not in all_files:
#                 raise FileNotFoundError(filename)
# 
#             if self.base not in open_handles:
#                 open_handles[self.base] = {"read": 0, "write": 0}
#             open_handles[self.base]["read"] += 1
# 
#             self.VMfile = openfile(self.fname, False)
# 
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not self.was_create:
#             raise FileInUseError("Write not permitted on older versions.")
# 
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.base in open_handles:
#             if self.was_create:
#                 open_handles[self.base]["write"] -= 1
#             else:
#                 open_handles[self.base]["read"] -= 1
# 
#             # Clean up base entry when no more handles are open
#             if open_handles[self.base]["read"] <= 0 and open_handles[self.base]["write"] <= 0:
#                 del open_handles[self.base]
# 
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion not permitted.")
# 
# 
# def LPlistfiles():
#     all_files = listfiles()
#     seen = {}
#     result = []
#     for file in all_files:
#         base = get_base_name(file)
#         if base not in seen:
#             seen[base] = True
#             result.append(base)
#     return result
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile5", True)
f1.writeat("Original", 0)
f1.close()

f2 = openfile("testfile5", True)
f2.writeat("NewVersion", 0)
f2.close()

# Read from base version
f3 = openfile("testfile5", False)
content = f3.readat(None, 0)
if content != "Original":
    log("ERROR: Should be able to read old version\n")
    exitall()
f3.close()

# Read from v1
f4 = openfile("testfile5.v1", False)
content = f4.readat(None, 0)
if content != "NewVersion":
    log("ERROR: Should be able to read versioned file\n")
    exitall()
f4.close()

