"""
==============================================================================
ATTACK CASE: pr2725_attackcase20.r2py
==============================================================================
Target NetID:        pr2725
Original Test:       test02_file_in_use.r2py
Test File Path:      submit/general_tests/test02_file_in_use.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3151
  Task UUID:         714b18fd-34c1-4d8b-99c8-1bab2205830a
  Machine Type:      n2-standard-4
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:26:22.291335
  End Time:          2025-10-27T19:26:28.175977
  Runtime:           5.8846 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       5898fc37bb3683caf089d4372e53355c
  Attack MD5:        e3d71292176fa6cefdf0e347cd5ba628
  Combined MD5:      85f4e9f1375a1c7d5ba853e20a511fe8

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 219, in secure_dispatch
    "/app/encasementlib.r2py", line 89, in _layer_code
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 219, in secure_dispatch
    "/app/encasementlib.r2py", line 89, in _layer_code
  Exception (with class 'exception_hierarchy.CodeUnsafeError'): Compiling security layer 'monitor.r2py' failed! Got exception: 'Code failed safety check! Error: ('<class \'exception_hierarchy.CheckNodeException\'> ("Unsafe call \'Global\' in line 23",)',)'
  ---

ORIGINAL TEST DESCRIPTION:
  Test 2: Cannot open file while it's already open
  Verifies FileInUseError is raised when trying to open an already-open file

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: pr2725)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# 
# _vm_meta = {}
# 
# def _rebuild_vm_meta():
#     global _vm_meta
#     underlying_files = listfiles()
# 
#     for fn in underlying_files:
#         base, n = _parse_versioned(fn)
#         if base is None:
#             if fn not in _vm_meta:
#                 _vm_meta[fn] = {"versions": [fn], "latest": fn}
#         else:
#             if base not in _vm_meta:
#                 _vm_meta[base] = {"versions": [], "latest": fn}
#             _vm_meta[base]["versions"].append(fn)
#             current_latest = _vm_meta[base].get("latest", None)
#             if current_latest is None:
#                 _vm_meta[base]["latest"] = fn
#             else:
#                 _, n_curr = _parse_versioned(current_latest)
#                 if n_curr is not None and n > n_curr:
#                     _vm_meta[base]["latest"] = fn
# 
#     for base in _vm_meta:
#         versions = _vm_meta[base]["versions"]
#         versions.sort(key=lambda x: (_parse_versioned(x)[1] or 0))
#         _vm_meta[base]["versions"] = versions
# 
# 
# def _parse_versioned(filename):
#     if not isinstance(filename, str):
#         return (None, None)
# 
#     idx = filename.rfind(".v")
# 
#     if idx == -1:
#         return (None, None)
# 
#     base = filename[:idx]
#     suffix = filename[idx + 2 :]
# 
#     if suffix == "":
#         return (None, None)
#     if not suffix.isdigit():
#         return (None, None)
# 
#     if len(suffix) > 1 and suffix[0] == "0":
#         return (None, None)
#     num = int(suffix)
#     if num < 1:
#         return (None, None)
#     return (base, num)
# 
# 
# def _ensure_meta_for_original(original):
#     if original not in _vm_meta:
#         _vm_meta[original] = {"versions": [original], "latest": original}
# 
# 
# class VMFile:
# 
#     def __init__(self, filename, create, original=None, versionnum=None):
# 
#         self.filename = filename
#         self._original = original
#         self._versionnum = versionnum if versionnum is not None else 0
# 
#         if create:
#             self._under = openfile(filename, True)
#         else:
#             self._under = openfile(filename, False)
# 
#     def readat(self, num_bytes, offset):
#         return self._under.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
# 
#         if self._original is not None and self._original in _vm_meta:
#             latest = _vm_meta[self._original]["latest"]
#             if self.filename != latest:
# 
#                 raise FileInUseError(
#                     "Cannot write to older version '%s'" % (self.filename,)
#                 )
# 
#         return self._under.writeat(data, offset)
# 
#     def close(self):
#         return self._under.close()
# 
# 
# def LPopenfile(filename, create):
#     _rebuild_vm_meta()
# 
#     original, vernum = _parse_versioned(filename)
# 
#     if original is not None and create:
#         raise RepyArgumentError("Cannot create explicit version files")
# 
#     if original is not None:
#         _ensure_meta_for_original(original)
#         return VMFile(filename, create, original=original, versionnum=vernum)
# 
#     _ensure_meta_for_original(filename)
#     underlying_files = listfiles()
# 
#     if not create:
#         return VMFile(filename, False, original=filename, versionnum=0)
# 
#     if filename not in underlying_files:
#         vm = VMFile(filename, True, original=filename, versionnum=0)
#         _vm_meta[filename] = {"versions": [filename], "latest": filename}
#         return vm
# 
#     meta = _vm_meta.get(filename)
#     if meta is None:
#         _rebuild_vm_meta()
#         meta = _vm_meta.get(filename, {"versions": [filename], "latest": filename})
# 
#     latest = meta["latest"]
# 
#     if latest in underlying_files:
#         prev = openfile(latest, False)
#         try:
#             content = prev.readat(None, 0)
#         finally:
#             prev.close()
#     else:
#         content = ""
# 
#     maxn = 0
#     for v in meta["versions"]:
#         ob, n = _parse_versioned(v)
#         if n and n > maxn:
#             maxn = n
#     newnum = maxn + 1
#     newname = filename + ".v" + str(newnum)
# 
#     new_under = openfile(newname, True)
#     try:
#         new_under.writeat(content, 0)
#     finally:
#         pass
#     new_under.close()
# 
#     _vm_meta.setdefault(filename, {"versions": [], "latest": filename})
#     _vm_meta[filename]["versions"].append(newname)
#     _vm_meta[filename]["latest"] = newname
# 
#     return VMFile(newname, True, original=filename, versionnum=newnum)
# 
# 
# def LPlistfiles():
#     _rebuild_vm_meta()  
# 
#     originals = set(_vm_meta.keys())
#     if not originals:
#         for fn in listfiles():
#             base, n = _parse_versioned(fn)
#             if base is not None:
#                 originals.add(base)
#             else:
#                 originals.add(fn)
# 
#     return list(originals)
# 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Cannot remove files in versioned file system")
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile2", True)
try:
    f2 = openfile("testfile2", True)
    log("ERROR: Should not allow opening already-open file\n")
    exitall()
except FileInUseError:
    pass
f1.close()

