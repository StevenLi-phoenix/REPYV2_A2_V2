"""
==============================================================================
ATTACK CASE: sss10093_attackcase3.r2py
==============================================================================
Target NetID:        sss10093
Original Test:       test16_startswith_vault_bug.r2py
Test File Path:      submit/general_tests/test16_startswith_vault_bug.r2py

RUNNER INFORMATION:
  Runner ID:         runner-9319
  Task UUID:         b14b5994-ccc2-4c9c-a36e-356e3b3867a4
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:28:02.354391
  End Time:          2025-10-27T19:28:09.548145
  Runtime:           7.1938 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       164a1f5184057088a50ca6a7aa04654f
  Attack MD5:        8f001b374ace212a6d5f595dbcbedf6a
  Combined MD5:      15fabfccaa13216660a933f95fb8e7af

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 236, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 179, in LPopenfile
    "monitor.r2py", line 62, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 236, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 179, in LPopenfile
    "monitor.r2py", line 62, in __init__
  Exception (with class 'exception_hierarchy.FileNotFoundError'): File not found
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: aa12037, al8372, bzy205, jaa10243, krg9790, nb4048, sr7991, zs2985
  Vulnerability: Uses startswith() which incorrectly matches "file.vault" when checking for "file.v*"
  Attack: Create "data.vault" then "data" - should not confuse them as versions

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: sss10093)
# ============================================================================
# """
# This security layer handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# open_files = {}
# file_versions = {}
# closed_versions = set()
# created_files = set()
# 
# def validate_filename(filename):
#     """Validate filename according to RepyV2 rules - return True if valid"""
#     if not filename or not isinstance(filename, str):
#         return False
#     
#     if len(filename) > 120:
#         return False
#     
#     disallowed_chars = ['/', '\\', '\t', '\n', '\r', '\0', ' ']
#     for char in disallowed_chars:
#         if char in filename:
#             return False
#     
#     if filename in ['.', '..', '']:
#         return False
#     
#     if filename.startswith('.'):
#         return False
#     
#     return True
# 
# class VMFile():
#     def __init__(self, filename, create):
#         if not validate_filename(filename):
#             raise FileNotFoundError("File not found")
#         
#         self.filename = filename
#         self.is_version_file = ".v" in filename and filename.count(".v") == 1
#         self.is_closed = False
#         
#         if self.is_version_file:
#             parts = filename.split(".v")
#             if len(parts) != 2:
#                 raise FileNotFoundError("File not found")
#             try:
#                 version_num = int(parts[1])
#                 if version_num <= 0:
#                     raise FileNotFoundError("File not found")
#             except ValueError:
#                 raise FileNotFoundError("File not found")
#         
#         if create and self.is_version_file:
#             raise RepyArgumentError("Cannot create explicit version files")
#         
#         if self.is_version_file:
#             if create:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             else:
#                 if filename in open_files:
#                     raise FileInUseError("File is already open")
#                 try:
#                     self.VMfile = openfile(filename, False)
#                     open_files[filename] = self
#                     return
#                 except:
#                     raise FileNotFoundError("File not found")
#         
#         base_name = filename
#         
#         if create:
#             if base_name in open_files:
#                 raise FileInUseError("File is already open")
#             
#             for open_filename in open_files:
#                 if open_filename.startswith(base_name + ".v") or open_filename == base_name:
#                     raise FileInUseError("File is already open")
#             
#             if base_name in created_files:
#                 current_version = file_versions.get(base_name, 0)
#                 new_version = current_version + 1
#                 new_version_name = base_name + ".v" + str(new_version)
#                 
#                 try:
#                     if current_version == 0:
#                         prev_file = openfile(base_name, False)
#                     else:
#                         latest_version_name = base_name + ".v" + str(current_version)
#                         prev_file = openfile(latest_version_name, False)
#                     
#                     content = prev_file.readat(None, 0)
#                     prev_file.close()
#                     
#                     self.VMfile = openfile(new_version_name, True)
#                     self.VMfile.writeat(content, 0)
#                     self.filename = new_version_name
#                     file_versions[base_name] = new_version
#                 except:
#                     raise FileNotFoundError("File not found")
#             else:
#                 try:
#                     self.VMfile = openfile(base_name, True)
#                     file_versions[base_name] = 0
#                     created_files.add(base_name)
#                 except:
#                     raise FileNotFoundError("File not found")
#         else:
#             if filename in open_files:
#                 raise FileInUseError("File is already open")
#             try:
#                 self.VMfile = openfile(filename, False)
#             except:
#                 raise FileNotFoundError("File not found")
#         
#         open_files[self.filename] = self
# 
#     def readat(self, num_bytes, offset):
#         if self.is_closed:
#             raise FileInUseError("File is already closed")
#         try:
#             return self.VMfile.readat(num_bytes, offset)
#         except:
#             raise FileNotFoundError("File not found")
# 
#     def writeat(self, data, offset):
#         if self.is_closed:
#             raise FileInUseError("File is already closed")
#         
#         if self.filename in closed_versions:
#             raise FileInUseError("File is already closed")
#         
#         if self.is_version_file:
#             try:
#                 base_name = self.filename.split(".v")[0]
#                 version_num = int(self.filename.split(".v")[1])
#                 current_version = file_versions.get(base_name, 0)
#                 
#                 if version_num < current_version:
#                     raise FileInUseError("Cannot write to older version")
#             except:
#                 raise FileInUseError("Cannot write to older version")
#         
#         try:
#             return self.VMfile.writeat(data, offset)
#         except:
#             raise FileNotFoundError("File not found")
# 
#     def close(self):
#         if self.is_closed:
#             return None
#         
#         try:
#             result = self.VMfile.close()
#         except:
#             result = None
#         
#         self.is_closed = True
#         
#         closed_versions.add(self.filename)
#         
#         if self.filename in open_files:
#             del open_files[self.filename]
#         
#         return result
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     all_files = listfiles()
#     base_files = []
#     
#     for filename in all_files:
#         if ".v" in filename and filename.count(".v") == 1:
#             parts = filename.split(".v")
#             if len(parts) == 2:
#                 try:
#                     int(parts[1])
#                     continue
#                 except ValueError:
#                     pass
#         
#         base_files.append(filename)
#     
#     return base_files
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# secure_dispatch_module()
# 
# ============================================================================

# Create file with .v in name but not a version
f1 = openfile("data.vault", True)
f1.writeat("vault_data", 0)
f1.close()

# Create file with same prefix
f2 = openfile("data", True)
f2.writeat("base_data", 0)
f2.close()

# Create version of data - should copy from "data", not "data.vault"
f3 = openfile("data", True)
content = f3.readat(None, 0)
if content != "base_data":
    log("ERROR: Should copy from data, not data.vault\n")
    exitall()
f3.close()

# Both should be in listfiles
files = listfiles()
if "data" not in files:
    log("ERROR: data should be in listfiles\n")
    exitall()
if "data.vault" not in files:
    log("ERROR: data.vault should be in listfiles\n")
    exitall()
