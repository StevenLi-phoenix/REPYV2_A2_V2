"""
==============================================================================
ATTACK CASE: nk4235_attackcase2.r2py
==============================================================================
Target NetID:        nk4235
Original Test:       test05_read_old_versions.r2py
Test File Path:      submit/general_tests/test05_read_old_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4621
  Task UUID:         78a67275-a8a4-4c3a-97af-0c2915277fc3
  Machine Type:      Standard_F4s_v2
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:25:30.861582
  End Time:          2025-10-27T19:25:36.152381
  Runtime:           5.2908 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       aa0e82cf4e233e62506f7b9eed731a82
  Attack MD5:        9bdf70bf198eb3ed48e2c8e61ca597b0
  Combined MD5:      08af972b346baf6b67c28e804ef62f9d

FAILURE DETAILS:
  Reason:            ERROR: Should be able to read old version


STDOUT:
  ERROR: Should be able to read old version

ORIGINAL TEST DESCRIPTION:
  Test 5: Can read from old versions
  Verifies that old versions remain readable

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: nk4235)
# ============================================================================
# """
# This security layer handles the Versioned and Immutable functionality
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# ORIGINAL_OPENFILE = openfile
# ORIGINAL_LISTFILES = listfiles
# ORIGINAL_REMOVEFILE = removefile
# 
# 
# class VMFile():
#     open_for_write = {}
#     version_counts = {}
# 
#     def __init__(self, filename, create):
#         self.is_version = False
#         self.base_filename = filename
#         self.version_num = None
#         self.create_mode = create
# 
#         if ".v" in filename:
#             last_v_index = filename.rfind(".v")
#             before_v = filename[:last_v_index]
#             after_v = filename[last_v_index + 2:]
# 
#             if after_v and after_v.isdigit():
#                 self.base_filename = before_v
#                 self.version_num = int(after_v)
#                 self.is_version = True
# 
#                 if create:
#                     raise RepyArgumentError("Cannot create explicit version files")
#             else:
#                 self.base_filename = filename
#                 self.is_version = False
#         else:
#             self.base_filename = filename
#             self.is_version = False
# 
#         if create:
#             if self.base_filename in VMFile.open_for_write:
#                 raise FileInUseError("File is already open")
# 
#         if create:
#             if self.base_filename in ORIGINAL_LISTFILES():
#                 if self.base_filename not in VMFile.version_counts:
#                     VMFile.version_counts[self.base_filename] = 0
# 
#                 VMFile.version_counts[self.base_filename] += 1
#                 new_version_num = VMFile.version_counts[self.base_filename]
# 
#                 if new_version_num == 1:
#                     prev_file = ORIGINAL_OPENFILE(self.base_filename, False)
#                 else:
#                     prev_version_name = self.base_filename + ".v" + str(new_version_num - 1)
#                     prev_file = ORIGINAL_OPENFILE(prev_version_name, False)
# 
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
# 
#                 new_version_name = self.base_filename + ".v" + str(new_version_num)
#                 self.VMfile = ORIGINAL_OPENFILE(new_version_name, True)
#                 self.VMfile.writeat(content, 0)
#                 self.actual_filename = new_version_name
# 
#             else:
#                 self.VMfile = ORIGINAL_OPENFILE(self.base_filename, True)
#                 self.actual_filename = self.base_filename
# 
#                 if self.base_filename not in VMFile.version_counts:
#                     VMFile.version_counts[self.base_filename] = 0
# 
#             VMFile.open_for_write[self.base_filename] = self
# 
#         else:
#             if filename not in ORIGINAL_LISTFILES():
#                 raise FileNotFoundError("File not found")
# 
#             if not self.is_version:
#                 if self.base_filename in VMFile.version_counts and VMFile.version_counts[self.base_filename] > 0:
#                     latest_version_num = VMFile.version_counts[self.base_filename]
#                     latest_version_name = self.base_filename + ".v" + str(latest_version_num)
#                     self.VMfile = ORIGINAL_OPENFILE(latest_version_name, False)
#                     self.actual_filename = latest_version_name
#                 else:
#                     self.VMfile = ORIGINAL_OPENFILE(filename, False)
#                     self.actual_filename = filename
#             else:
#                 self.VMfile = ORIGINAL_OPENFILE(filename, False)
#                 self.actual_filename = filename
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not self.create_mode:
#             raise FileInUseError("Cannot write to file opened in read mode")
# 
#         if self.is_version:
#             current_highest = VMFile.version_counts.get(self.base_filename, 0)
#             if self.version_num < current_highest:
#                 raise FileInUseError("Cannot write to old version")
# 
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.create_mode and self.base_filename in VMFile.open_for_write:
#             if VMFile.open_for_write[self.base_filename] == self:
#                 del VMFile.open_for_write[self.base_filename]
# 
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Cannot remove files")
# 
# 
# def LPlistfiles():
#     all_files = ORIGINAL_LISTFILES()
#     result = []
# 
#     for filename in all_files:
#         if ".v" in filename:
#             last_v_index = filename.rfind(".v")
#             after_v = filename[last_v_index + 2:]
# 
#             if after_v and after_v.isdigit():
#                 continue
# 
#         result.append(filename)
#     return result
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile5", True)
f1.writeat("Original", 0)
f1.close()

f2 = openfile("testfile5", True)
f2.writeat("NewVersion", 0)
f2.close()

# Read from base version
f3 = openfile("testfile5", False)
content = f3.readat(None, 0)
if content != "Original":
    log("ERROR: Should be able to read old version\n")
    exitall()
f3.close()

# Read from v1
f4 = openfile("testfile5.v1", False)
content = f4.readat(None, 0)
if content != "NewVersion":
    log("ERROR: Should be able to read versioned file\n")
    exitall()
f4.close()

