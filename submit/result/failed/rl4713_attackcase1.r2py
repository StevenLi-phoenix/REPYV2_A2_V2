"""
==============================================================================
ATTACK CASE: rl4713_attackcase1.r2py
==============================================================================
Target NetID:        rl4713
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-8451
  Task UUID:         8506b7c2-5888-4422-9ce3-de3537b1ebac
  Machine Type:      m5.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:26:34.286507
  End Time:          2025-10-27T19:26:40.063749
  Runtime:           5.7772 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       fa1577af7102a8123be575d3ff8a81f4
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      96751811b37dcfb8693568857d208907

FAILURE DETAILS:
  Reason:            ERROR: data.value should be in listfiles


STDOUT:
  ERROR: data.value should be in listfiles

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: rl4713)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# class VMFile():
#     def __init__(self, filename, create):
#         if mycontext.get('opened_files') is None:
#             mycontext['opened_files'] = set()
# 
#         fbase, fversion = self._split_version(filename)
#         if fversion is not None:
#             filename = fbase + ".v" + str(fversion)
#         else:
#             filename = fbase
# 
#         # Disallow creating a specific version
#         if create and fversion is not None:
#             raise RepyArgumentError("Cannot create explicit version files.")
# 
#         # Disallow opening a file that is already opened by exact name
#         if filename in mycontext['opened_files']:
#             raise FileInUseError("File is currently in use.")
# 
#         if create:
#             if filename in listfiles():
#                 # File exists → create new version
#                 # Find latest version
#                 latest_file = ""
#                 latest_ver = self._latest_version(filename)
#                 if latest_ver > 0:
#                     latest_file = filename + ".v" + str(latest_ver)
#                 elif latest_ver == 0:
#                     latest_file = filename
# 
#                 # Check if latest version is open
#                 if latest_file in mycontext['opened_files']:
#                     raise FileInUseError("Cannot create new version while latest file is open.")
# 
#                 new_ver = latest_ver + 1
#                 new_name = filename + ".v" + str(new_ver)
#                 prev_file = None
#                 try:
#                     CHUNK_SIZE = 4096
#                     offset = 0
#                     prev_file = openfile(latest_file, False)
#                     self.VMfile = openfile(new_name, True)
# 
#                     while True:
#                         chunk = prev_file.readat(CHUNK_SIZE, offset)
#                         if len(chunk) == 0:
#                             break
#                         self.VMfile.writeat(chunk, offset)
#                         offset += len(chunk)
#                         if len(chunk) < CHUNK_SIZE:
#                             break
# 
#                     self.filename = new_name
#                     self.base = filename
#                     mycontext['opened_files'].add(new_name)
#                 finally:
#                     if prev_file is not None:
#                         prev_file.close()
#             else:
#                 # File doesn't exist → create filename
#                 self.filename = filename
#                 self.base = filename
#                 self.VMfile = openfile(filename, True)
#                 mycontext['opened_files'].add(filename)
# 
#         else:
#             # Open existing file normally
#             if filename not in listfiles():
#                 raise FileNotFoundError("File does not exist.")
#             
#             self.filename = filename
#             self.base = filename
#             self.VMfile = openfile(filename, False)
#             mycontext['opened_files'].add(filename)
# 
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         # Find latest version
#         latest_file = ""
#         latest_ver = self._latest_version(self.base)
#         if latest_ver > 0:
#             latest_file = self.base + ".v" + str(latest_ver)
#         elif latest_ver == 0:
#             latest_file = self.base
# 
#         if self.filename != latest_file:
#             raise FileInUseError("Cannot write to an older version of the file.")
#         
#         try:
#             result = self.VMfile.writeat(data, offset)
#         except:
#             raise
# 
#         return result
# 
#     def close(self):
#         if self.filename not in mycontext['opened_files']:
#             raise FileClosedError("File is not open.")
# 
#         self.VMfile.close()
#         mycontext['opened_files'].remove(self.filename)
# 
# 
#     def _split_version(self, name):
#             idx = name.rfind(".v")
#             if idx == -1:
#                 return name, None
#             base = name[:idx]
#             version = name[idx+2:]
#             if version.isdigit() and idx > 0:
#                 return base, int(version)
#             return name, None
# 
#     def _latest_version(self, base_name):
#         max_ver = -1
#         for fname in listfiles():
#             base, ver = self._split_version(fname)
#             if base == base_name and ver is not None:
#                 if ver > max_ver:
#                     max_ver = ver
#             if base == base_name and ver is None:
#                 if max_ver < 0:
#                     max_ver = 0
#         return max_ver
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Removing files is not allowed.")
# 
# def LPlistfiles():
#     filtered_files = []
#     for filename in listfiles():
#         if filename.rfind(".v") == -1:
#             filtered_files.append(filename)
#     return filtered_files
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
