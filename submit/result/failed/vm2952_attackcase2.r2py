"""
==============================================================================
ATTACK CASE: vm2952_attackcase2.r2py
==============================================================================
Target NetID:        vm2952
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-5304
  Task UUID:         9a4856fd-3650-4d98-b582-54fdee305799
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:28:30.718135
  End Time:          2025-10-27T19:28:36.062965
  Runtime:           5.3448 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       e89e4757d02d7216ffa34e2ccfa10a4d
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      ab689ab1ce6c83ed41383912c98e71b7

FAILURE DETAILS:
  Reason:            ERROR: data.value should be in listfiles


STDOUT:
  ERROR: data.value should be in listfiles

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: vm2952)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# #tracking all open files-
# open_files = []
# writable_files = []
# 
# # === Helper Functions ===
# def _get_versions(filename):
#     """Return sorted list of version numbers for a given base filename."""
#     files = listfiles()
#     versions = []
#     for f in files:
#         if f.startswith(filename + ".v"):
#             try:
#                 versions.append(int(f.split(".v")[1]))
#             except:
#                 pass
#     versions.sort()
#     return versions
# 
# def _get_latest_version_name(filename):
#     """Return name of latest version file or None if none exist."""
#     versions = _get_versions(filename)
#     if versions:
#         return filename + ".v" + str(versions[-1])
#     elif filename in listfiles():
#         return filename
#     else:
#         return None
# def _is_explicit_version_name(filename):
#     # an explicit version name ends with .v
#     if ".v" not in filename:
#         return False
#     base, suffix = filename.rsplit(".v", 1)
#     return suffix.isdigit() and base != ""
# 
# class VMFile():
#     def __init__(self, filename, create, is_version=False):
#         self.filename = filename
#         self.is_version = is_version
#         self.is_versioned = _is_explicit_version_name(filename)
#         self.writable = False
#         # If explicit version and create=True then not allowed
#         if self.is_versioned and create:
#             raise RepyArgumentError("Cannot create explicit version files")
#         if not is_version and create:
#             files = listfiles()
#             versions = _get_versions(filename)
#             #create a new version
#             if filename in files or (len(versions) > 0):
#                 latest_name = _get_latest_version_name(filename)
#                 #check if it is open
#                 if latest_name in open_files:
#                     raise FileInUseError("Cannot create a new version while previous version is open")
#                 next_version = len(versions) + 1
#                 new_name = filename + ".v" + str(next_version)
#                 prev_file = openfile(latest_name, False)
#                 new_file = openfile(new_name, True)
# 
#                 offset = 0
#                 chunk_size = 65536
#                 while True:
#                     data = prev_file.readat(chunk_size, offset)
#                     if not data:
#                         break
#                     new_file.writeat(data, offset)
#                     offset += len(data)
# 
#                 prev_file.close()
#                 self.VMfile = new_file
#                 self.filename = new_name
#             else:
#                 # No prior versions just create base file
#                 self.VMfile = openfile(filename, True)
#         else:
#             #normal open
#             self.VMfile = openfile(filename, create)
# 
#         open_files.append(self.filename)
#         self.writable = (self.filename in writable_files)
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         # Prevent writing to any old version (immutable)
#         if not self.writable:
#           raise FileInUseError("Cannot write to immutable version")
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.filename in writable_files:
#             try:
#                 writable_files.remove(self.filename)
#             except:
#                 pass
# 
#     # Remove from open_files
#         if self.filename in open_files:
#             try:
#                 open_files.remove(self.filename)
#             except:
#                 pass
#         self.writable = False
# 
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     latest_name = _get_latest_version_name(filename)
#     if (filename in open_files) or (latest_name and latest_name in open_files):
#         raise FileInUseError("File already open")
#     vm = VMFile(filename, create, (filename.find(".v") != -1))
#     # Explicit version access allowed only if create=False
#     if create:
#         if vm.filename not in writable_files:
#             writable_files.append(vm.filename)
#         vm.writable = True
#     else:
#         vm.writable = False
#     return vm
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion not allowed")
# 
# def LPlistfiles():
#     files = listfiles()
#     visible = []
#     for f in files:
#         if f.find(".v") != -1:
#             parts = f.split(".v")
#             base = parts[0]
#             if base not in visible:
#                 visible.append(base)
#         else:
#             if f not in visible:
#                 visible.append(f)
#     return visible
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
