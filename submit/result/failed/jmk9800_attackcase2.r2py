"""
==============================================================================
ATTACK CASE: jmk9800_attackcase2.r2py
==============================================================================
Target NetID:        jmk9800
Original Test:       test07_listfiles_filter.r2py
Test File Path:      submit/general_tests/test07_listfiles_filter.r2py

RUNNER INFORMATION:
  Runner ID:         runner-2841
  Task UUID:         2ec2bb83-1ba6-4230-897f-add2fb4a362e
  Machine Type:      t3.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:48.577984
  End Time:          2025-10-27T19:22:52.001668
  Runtime:           3.4237 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       f8ab597a6841526db2f6b6859e1814de
  Attack MD5:        a9478729ae4bea9de103f7b69cd4a14d
  Combined MD5:      951d5795feb737a4a6ac028c00363907

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 129, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 11, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 72, in writeat
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 129, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 11, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 72, in writeat
  Exception (with class 'exception_hierarchy.FileInUseError'): 
  ---

ORIGINAL TEST DESCRIPTION:
  Test 7: listfiles() should not show version files
  Verifies that version files are filtered from listfiles() output

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jmk9800)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# files = {}
# 
# class VMFile():
#     def __init__(self, filename, create):
#         self.filename = filename
#         if create:
#             found = filename.rfind(".v")
#             if found != -1:
#                 ind = filename.find(".v")
#                 ind += 2
#                 if filename[ind:].isdigit():
#                     raise RepyArgumentError("Cannot create explicit version files")
#             elif filename in listfiles():
#                 # File exists → create version 1
#                 try:
#                     prev_file = openfile(filename, False)
#                     content = prev_file.readat(None, 0)
#                     prev_file.close()
#                 except FileInUseError:
#                     raise FileInUseError
#                 else: 
#                     i = files[filename] + 1
#                     var = "v{}".format(i)
#                     new_name = filename + "." + var
#                     files[filename] += 1
#                     
#                     self.VMfile = openfile(new_name, True)
#                     self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#                 files[filename] = 0
#         else:
#             # Open existing file normally
#             try:
#                 self.VMfile = openfile(filename, False)
#             except FileNotFoundError:
#                 raise FileNotFoundError
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         found = self.filename.rfind(".v")
#         if found != -1:
#             ind = self.filename.rfind(".v")
#             ind += 2
#             if self.filename[ind:].isdigit():
#                 value = int(self.filename[ind:])
#                 if value < files[self.filename[:ind-2]]:
#                     raise FileInUseError
#         
#         else:
#             if self.filename in files and files[self.filename] > 0:
#                 raise FileInUseError
#             else:
#                 return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
#     
# 
# def LPlistfiles():
#     all_files = []
#     for file in files.keys():
#         all_files.append(file)
#     return all_files
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile7", True)
f1.writeat("v0", 0)
f1.close()

f2 = openfile("testfile7", True)
f2.writeat("v1", 0)
f2.close()

f3 = openfile("testfile7", True)
f3.writeat("v2", 0)
f3.close()

# Check that version files are not listed
files = listfiles()
for f in files:
    if '.v' in f:
        parts = f.rsplit('.v', 1)
        if len(parts) == 2:
            try:
                int(parts[1])
                log("ERROR: Version file should not be in listfiles(): " + f + "\n")
                exitall()
            except ValueError:
                pass

