"""
==============================================================================
ATTACK CASE: nb4180_attackcase1.r2py
==============================================================================
Target NetID:        nb4180
Original Test:       test04_immutable_old_versions.r2py
Test File Path:      submit/general_tests/test04_immutable_old_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-9778
  Task UUID:         eb787f1e-616c-4773-9a56-2c412b33ac82
  Machine Type:      c5.xlarge
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:25:23.944441
  End Time:          2025-10-27T19:25:27.408623
  Runtime:           3.4642 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       e4dd6533accc9f15900f91a7aa4fcfda
  Attack MD5:        9b7d716d61c8c7daa6399db16d01b176
  Combined MD5:      0660c53c644c65129bc9444726d3ef1a

FAILURE DETAILS:
  Reason:            ERROR: Should not allow writing to old version


STDOUT:
  ERROR: Should not allow writing to old version

ORIGINAL TEST DESCRIPTION:
  Test 4: Cannot write to old versions
  Verifies immutability is enforced after closing files

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: nb4180)
# ============================================================================
# """
# This security layer handles the Versioned and Immutable functionality
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# open_files = {}
# write_files = {}
# 
# def _is_version_name(name):
#     idx = name.rfind(".v")
#     if idx == -1:
#         return False
#     base = name[:idx]
#     tail = name[idx+2:]
#     if base == "":
#         return False
#     if tail == "":
#         return False
#     for ch in tail:
#         if ch < "0" or ch > "9":
#             return False
#     return True
# 
# def _extract_base_and_version(name):
#     idx = name.rfind(".v")
#     if idx == -1:
#         return (name, None)
#     base = name[:idx]
#     tail = name[idx+2:]
#     if tail == "":
#         return (name, None)
#     for ch in tail:
#         if ch < "0" or ch > "9":
#             return (name, None)
#     try:
#         return (base, int(tail))
#     except Exception:
#         return (name, None)
# 
# def LPlistfiles():
#     files = listfiles()
#     keep = []
#     for f in files:
#         _, num = _extract_base_and_version(f)
#         if num is None:
#             keep.append(f)
#     return keep
# 
# def _highest_version_for(filename):
#     maxn = 0
#     flist = listfiles()
#     prefix = filename + ".v"
#     plen = len(prefix)
#     for f in flist:
#         if len(f) <= plen:
#             continue
#         if f[:plen] != prefix:
#             continue
#         tail = f[plen:]
#         ok = True
#         for ch in tail:
#             if ch < "0" or ch > "9":
#                 ok = False
#                 break
#         if not ok:
#             continue
#         try:
#             n = int(tail)
#             if n > maxn:
#                 maxn = n
#         except Exception:
#             continue
#     return maxn
# 
# def _copy_file_content(src_name, dst_name):
#     CHUNK_SIZE = 4096
#     src = openfile(src_name, False)
#     dst = openfile(dst_name, True)
# 
#     offset = 0
#     while True:
#         data = src.readat(CHUNK_SIZE, offset)
#         if not data:
#             break
#         dst.writeat(data, offset)
#         offset += len(data)
# 
#     src.close()
#     dst.close()
# 
# class VMFile(object):
#     def __init__(self, filename, create=False):
#         self.filename = filename
#         self.is_version = _is_version_name(filename)
#         self._file = None
# 
#         if create and self.is_version:
#             raise RepyArgumentError("Cannot create explicit version files")
# 
#         if create and (not self.is_version):
#             if filename in open_files:
#                 raise FileInUseError("File is already open")
#             flist = listfiles()
#             
#             if filename in flist:
#                 next_n = _highest_version_for(filename) + 1
#                 version_name = filename + ".v" + str(next_n)
#                 _copy_file_content(filename, version_name)
#                 self._file = openfile(filename, True)
#                 self.is_version = False
#             else:
#                 self._file = openfile(filename, True)
#                 self.is_version = False
#             
#             open_files[filename] = True
#         else:
#             if self.is_version:
#                 flist = listfiles()
#                 if filename not in flist:
#                     raise FileNotFoundError("File does not exist")
#             
#             self._file = openfile(filename, False)
#             self.is_version = _is_version_name(filename)
# 
#     def readat(self, num_bytes, offset):
#         return self._file.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.is_version:
#             raise FileInUseError("Cannot write to versioned file")
#         if self.filename in write_files:
#             raise FileInUseError("File already being written")
#         write_files[self.filename] = True
#         try:
#             return self._file.writeat(data, offset)
#         finally:
#             if self.filename in write_files:
#                 del write_files[self.filename]
# 
#     def close(self):
#         result = self._file.close()
#         if self.filename in open_files:
#             del open_files[self.filename]
#         return result
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     if _is_version_name(filename):
#         raise RepyArgumentError("Cannot remove versioned file")
#     raise RepyArgumentError("Cannot remove files")
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile4", True)
f1.writeat("Original", 0)
f1.close()

f2 = openfile("testfile4", True)
f2.writeat("NewVersion", 0)
f2.close()

# Try to open and write to the base version (now immutable)
f3 = openfile("testfile4", False)
try:
    f3.writeat("Hack", 0)
    log("ERROR: Should not allow writing to old version\n")
    exitall()
except FileInUseError:
    pass
f3.close()

