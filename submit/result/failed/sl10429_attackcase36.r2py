"""
==============================================================================
ATTACK CASE: sl10429_attackcase36.r2py
==============================================================================
Target NetID:        sl10429
Original Test:       app7633_attackcase2.r2py
Test File Path:      submit/general_tests\app7633_attackcase2.r2py

RUNNER INFORMATION:
  Runner ID:         runner-9360
  Task UUID:         26fe0cb9-41da-492c-9673-d2af2f1b1352
  Machine Type:      c2-standard-4
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-30T14:59:11.167434
  End Time:          2025-10-30T14:59:13.424154
  Runtime:           2.2567 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       2a2fbe5ad75c94bf0e76be1fdbd2c14d
  Attack MD5:        0111a336e044222d086b32e1abd8130a
  Combined MD5:      1c4ca499ef96e091f354e1a6ef22222e

FAILURE DETAILS:
  Reason:            VULNERABLE: Version collision - files overwritten VULNERABLE: Thread safety violations detected

STDOUT:
  VULNERABLE: Version collision - files overwritten VULNERABLE: Thread safety violations detected

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: sl10429)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# # Debugging log
# DEBUG = False # Local configurable variable to turn on/off debugging log
# org_log = log
# def log(*args, **kwargs):
#     if DEBUG:
#         endl = kwargs.get('endl', "\n")
#         org_log(*args, **kwargs)
#         org_log(endl)
# log("*** Program is in debugging mode, turn this off for for submission ***")
# 
# # Filename validation
# def name_check(name):
#     """Check that the given filename is valid.
#     Args:
#         name (str): The filename to check.
#     Raises:
#         RepyArgumentError: If the filename is invalid.
#     Returns:
#         str: The validated filename.
#     """
#     """
#     Filenames may only be in the current directory and may only contain 
#     lowercase letters, numbers, the hyphen, underscore, and period characters.
#     Also, filenames cannot be '.', '..', the blank string or start with a period. 
#     There is no concept of a directory or a folder in repy. 
#     Filenames must be no more than 120 characters long.
#     """
#     name = str(name)
#     for char in name:
#         if not (char.islower() or char.isdigit() or char in ['-', '_', '.']):
#             raise RepyArgumentError("Invalid character in filename: " + name)
#     if name in ['', '.', '..']:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot be blank, '.', '..'")
#     if name.startswith('.'):
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot start with a period)")
#     if len(name) > 120:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot be longer than 120 characters)")
#     if '/' in name or '\\' in name:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot contain directory separators)")
#     return name
# 
# # Copying file
# def copy(src, dest):
#     """Copy contents from src file to dest file.
#     Args:
#         src (file object): Source file to copy from.
#         dest (file object): Destination file to copy to.
#     """
#     if src not in listfiles():
#         raise RepyArgumentError("Source file does not exist: " + src)
#     if dest in listfiles():
#         raise RepyArgumentError("Destination file already exists: " + dest)
#     prev_file = openfile(src, False)
#     content = prev_file.readat(None, 0)
#     dest_file = openfile(dest, True)
#     dest_file.writeat(content, 0)
#     prev_file.close()
#     dest_file.close()
# 
# # Parse versioned filename
# def is_versioned_filename(filename):
#     """Check if a filename is versioned.
#     Args:
#         filename (str): The filename to check.
#     Returns:
#         bool: True if the filename is versioned, False otherwise.
#     """
#     return '.v' in filename and filename.rsplit('.v', 1)[1].isdigit()
# def parse_versioned_filename(filename):
#     """Parse a versioned filename into its base name and version number.
#     Args:
#         filename (str): The versioned filename (e.g., "file.v1").
#     Returns:
#         tuple: A tuple containing the base name (str) and version number (int).
#     Raises:
#         RepyArgumentError: If the filename is not a valid versioned filename.
#     """
#     if not is_versioned_filename(filename):
#         raise RepyArgumentError("Filename is not versioned: " + filename)
#     base_name, version_str = filename.rsplit('.v', 1)
#     return base_name, int(version_str)
# 
# def find_max_version(filename):
#     """Find the maximum version number for a given base filename.
#     Args:
#         filename (str): The base filename to check.
#     Returns:
#         int: The maximum version number found, or 0 if no versions exist.
#     """
#     max_version = 0
#     fnl = listfiles() # optimize for efficiency, avoid multiple calls to listfiles()
#     while True:
#         versioned_filename = filename + ".v" + str(max_version + 1)
#         if versioned_filename in fnl:
#             max_version += 1
#         else:
#             break
#     return max_version
# 
# class VMFile():
#     fileopened = []
#     def __init__(self, filename, create):
#         # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         # (Incomplete: does not handle further versions like v2, v3, etc.)
#         self.filename = name_check(filename)
#         self.create = bool(create)
#         self.max_version = 0
#         log("VMFile init: filename=" + self.filename + ", create=" + str(self.create))
#         if self.filename in VMFile.fileopened:
#             raise FileInUseError("File is locked: " + self.filename)
#         if self.create:
#             if is_versioned_filename(self.filename):
#                 raise RepyArgumentError("Cannot create explicit version files")
#             if self.filename in listfiles():
#                 # find max version
#                 self.max_version = find_max_version(self.filename)
#                 new_version_filename = self.filename + ".v" + str(self.max_version + 1)
#                 # Copy contents to new versioned file
#                 copy(self.filename, new_version_filename) # Create versioned copy
#                 # Open the original file for writing the new version
#                 self.VMfile = openfile(self.filename, True)
#             else:
#                 # File doesn't exist â†’ create filename
#                 self.VMfile = openfile(self.filename, True)
#         else:
#             # Open existing file normally
#             # will pass FileNotFoundError if it doesn't exist
#             self.VMfile = openfile(self.filename, False)
#         VMFile.fileopened.append(self.filename)
# 
#     def readat(self, num_bytes, offset):
#         """
#         Args:
#             num_bytes (int, long, type(None)): bytes to read, or None to read the whole file
#             offset (int, long): offset from where to start reading
# 
#         Returns:
#             str: data read from the file
#         """
#         log("[READ]" + self.filename)
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         """
#         Args:
#             data (str): data to write
#             offset (int, long): offset from where to start writing
#         Returns:
#             int or None: number of bytes written, or None
#         """
#         log("[WRITE]" + self.filename)
#         if is_versioned_filename(self.filename):
#             raise FileInUseError("Cannot write to a versioned file: " + self.filename)
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         """
#         Returns:
#             bool, type(None): __summary__
#         """
#         VMFile.fileopened.remove(self.filename)
#         return self.VMfile.close()
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     """reject any removefile calls to prevent deletion of versioned files"""
#     raise RepyArgumentError("removefile is not allowed in this security layer.")
#     # removefile(filename)
# 
# def LPlistfiles():
#     """List all files. Filtering versioned files"""
#     log("Listing files, filtering versioned files.")
#     fnl = []
#     for fname in listfiles():
#         if not is_versioned_filename(fname):
#             fnl.append(fname)
#     return fnl
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

if "exploit.txt" in listfiles():
    removefile("exploit.txt")

# Create base file
f = openfile("exploit.txt", True)
f.writeat("base", 0)
f.close()

vulnerable = [False]
race_exploited = [False]
files_opened = [0]
same_version = [False]

def exploit_version_race():
    """
    EXPLOIT 1: Multiple threads can call _get_highest_version() simultaneously
    and get the same version number, then both create files with same version
    """
    try:
        # Sleep briefly to synchronize threads
        sleep(0.01)
        
        f = openfile("exploit.txt", True)
        files_opened[0] += 1
        
        # If we successfully opened, we got a version number
        # Write identifying data
        f.writeat("thread_data", 0)
        
        # Keep open briefly to increase race window
        sleep(0.02)
        f.close()
        
    except FileInUseError:
        # Expected if locking works properly
        pass
    except:
        vulnerable[0] = True

def exploit_dict_race():
    """
    EXPLOIT 2: open_files dict is not thread-safe
    Multiple threads can corrupt it by concurrent modifications
    """
    try:
        sleep(0.005)
        
        for i in range(10):
            try:
                f = openfile("exploit.txt", False)
                # Immediately close to stress dict operations
                f.close()
            except FileInUseError:
                pass
            except:
                vulnerable[0] = True
                
    except:
        vulnerable[0] = True

def exploit_close_race():
    """
    EXPLOIT 3: close() deletes from open_files without checking if key exists
    Also no synchronization on dict deletion
    """
    try:
        sleep(0.015)
        
        for i in range(5):
            try:
                f = openfile("exploit.txt", False)
                
                # Try rapid close operations
                f.close()
                
            except FileInUseError:
                pass
            except:
                vulnerable[0] = True
                
    except:
        vulnerable[0] = True

# Launch synchronized attack - all threads start nearly simultaneously
# This maximizes race condition probability
createthread(exploit_version_race)
createthread(exploit_version_race)
createthread(exploit_version_race)
createthread(exploit_version_race)
createthread(exploit_dict_race)
createthread(exploit_close_race)

# Wait for threads to complete
sleep(0.2)

# VERIFICATION 1: Check if multiple threads opened for writing
if files_opened[0] > 1:
    race_exploited[0] = True
    vulnerable[0] = True
    log("VULNERABLE: Multiple threads opened for writing - race in version assignment")

# VERIFICATION 2: Check for version number collision
try:
    files = listfiles()
    version_numbers = []
    
    for fname in files:
        if "exploit.txt.v" in fname:
            parts = fname.split(".v")
            if len(parts) == 2 and parts[1].isdigit():
                version_numbers.append(int(parts[1]))
    
    # Check for duplicate version numbers
    if len(version_numbers) != len(set(version_numbers)):
        same_version[0] = True
        vulnerable[0] = True
        log("VULNERABLE: Duplicate version numbers created - critical race condition")
        
    # Check if we have fewer versions than successful opens
    if files_opened[0] > len(version_numbers):
        vulnerable[0] = True
        log("VULNERABLE: Version collision - files overwritten")
        
except:
    vulnerable[0] = True
    log("VULNERABLE: System corruption from race condition")

# VERIFICATION 3: Check system consistency
try:
    test = openfile("exploit.txt", False)
    test.close()
except:
    vulnerable[0] = True
    log("VULNERABLE: File system corrupted - cannot access file")

# Final verdict
if race_exploited[0]:
    log("VULNERABLE: Race condition exploited with threading")
elif same_version[0]:
    log("VULNERABLE: Version numbering system broken")
elif vulnerable[0]:
    log("VULNERABLE: Thread safety violations detected")
else:
    log("SECURE: No race conditions exploited")