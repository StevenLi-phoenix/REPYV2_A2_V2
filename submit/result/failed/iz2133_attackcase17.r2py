"""
==============================================================================
ATTACK CASE: iz2133_attackcase17.r2py
==============================================================================
Target NetID:        iz2133
Original Test:       test18_state_tracking.r2py
Test File Path:      submit/general_tests/test18_state_tracking.r2py

RUNNER INFORMATION:
  Runner ID:         runner-1300
  Task UUID:         8f699a09-8915-4408-a7ad-f522c3959671
  Machine Type:      m5.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:15.060231
  End Time:          2025-10-27T19:22:20.957454
  Runtime:           5.8972 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       9cdbb56d9f4b88bc246f5e5749d1a8e5
  Attack MD5:        9e0afe5edbe1306db7f522e7f8ba8e30
  Combined MD5:      eff634251968c884f7bf0d89bf53b93b

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 183, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 114, in LPopenfile
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 183, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 114, in LPopenfile
  Exception (with type 'exceptions.UnboundLocalError'): local variable 'new_filename' referenced before assignment
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: iy2112, am14579
  Vulnerability: Improper state tracking in mycontext or version metadata
  Attack: Test file tracking across operations

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: iz2133)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# if 'file_versions' not in mycontext:
#     mycontext['file_versions'] = {}
#     mycontext['open_files'] = set()
# 
# def _get_version_name(basename, version_num):
#     if version_num == 0:
#         return basename
#     else:
#         return basename + ".v" + str(version_num)
# 
# def is_valid_filename(filename):
#     if len(filename) > 120:
#         return False
#     if not filename or filename.startswith('.') or filename in ('.', '..'):
#         return False
#     for char in filename:
#         if not ('a' <= char <= 'z' or '0' <= char <= '9' or char in '.-_'):
#             return False
#     return True
# 
# def _split_version_from_filename(filename):
#   return filename.rsplit('.v', 1)
# 
# if 'file_op_lock' not in mycontext:
#     mycontext['file_op_lock'] = createlock()
# 
# 
# class VMFile():
#     def __init__(self, file_handle, real_filename, is_latest):
#         self.VMfile = file_handle
#         self.real_filename = real_filename
#         self.is_latest = is_latest
#         mycontext['open_files'].add(self.real_filename)
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not self.is_latest:
#             raise FileInUseError("Cannot write to an older file version")
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         mycontext['file_op_lock'].acquire(True)
#         try:
#             if self.real_filename in mycontext['open_files']:
#                 mycontext['open_files'].remove(self.real_filename)
#         finally:
#             mycontext['file_op_lock'].release()
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     base_part = _split_version_from_filename(filename)[0]
#     if not is_valid_filename(base_part):
#         raise RepyArgumentError("Invalid characters in " + filename)
# 
#     mycontext['file_op_lock'].acquire(True)
#     try:
#         parts = _split_version_from_filename(filename)
#         is_explicit_version = len(parts) == 2 and parts[1].isdigit()
# 
#         if is_explicit_version:
#             if create:
#                 raise RepyArgumentError("Cannot create explicit version files manually")
#             basename = parts[0]
#             version_num = int(parts[1])
#             latest_version = mycontext['file_versions'].get(basename, -1)
#             is_latest = (version_num == latest_version)
# 
#             handle = openfile(filename, False)
#             return VMFile(handle, filename, is_latest)
# 
#         basename = filename
#         if create:
#             if basename in mycontext['file_versions']:
#                 latest_version_num = mycontext['file_versions'][basename]
#                 latest_filename = _get_version_name(basename, latest_version_num)
# 
#                 new_version_num = latest_version_num + 1
#                 new_filename = _get_version_name(basename, new_version_num)
# 
#             new_handle = None
#             try:
#                 prev_file = openfile(latest_filename, False)
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
#                 
#                 new_handle = openfile(new_filename, True)
#                 new_handle.writeat(content, 0)
#                 
#                 mycontext['file_versions'][basename] = new_version_num
#                 return VMFile(new_handle, new_filename, True)
#             except Exception, e:
#                 if new_handle:
#                     new_handle.close()
#                 if new_filename in listfiles():
#                     removefile(new_filename)
#                 raise e
# 
#             else:
#                 mycontext['file_versions'][basename] = 0
#                 handle = openfile(basename, True)
#                 return VMFile(handle, basename, True)
#         else:
#             if basename not in mycontext['file_versions']:
#                 raise FileNotFoundError("File " + basename + " does not exist")
#             latest_version_num = mycontext['file_versions'][basename]
#             latest_filename = _get_version_name(basename, latest_version_num)
#             handle = openfile(latest_filename, False)
#             return VMFile(handle, latest_filename, True)
#     finally:
#         mycontext['file_op_lock'].release()
# 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion not allowed")
# 
# def LPlistfiles():
#     base_files = set()
#     for fname in listfiles():
#         parts = _split_version_from_filename(fname)
#         if len(parts) == 2 and parts[1].isdigit():
#             base_files.add(parts[0])
#         else:
#             base_files.add(fname)
#     return list(base_files)
# 
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Create a file and version it
f = openfile("tracked", True)
f.writeat("v0", 0)
f.close()

f = openfile("tracked", True)
f.writeat("v1", 0)
f.close()

# listfiles should show "tracked" (the base name)
files = listfiles()
if "tracked" not in files:
    log("ERROR: Base file missing from listfiles\n")
    exitall()

# Version files should not appear
if "tracked.v1" in files:
    log("ERROR: Version file should not appear in listfiles\n")
    exitall()

# Test reopening for read
try:
    f = openfile("tracked", False)
    content = f.readat(None, 0)
    f.close()
except FileNotFoundError:
    log("ERROR: Should be able to open existing file for reading\n")
    exitall()
