"""
==============================================================================
ATTACK CASE: jf4440_attackcase2.r2py
==============================================================================
Target NetID:        jf4440
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-7360
  Task UUID:         6c1088b7-b5c2-4164-b2a4-e42a0b50a944
  Machine Type:      e2-medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:41.449772
  End Time:          2025-10-27T19:22:47.047159
  Runtime:           5.5974 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       1c13210dacfc212b6a98618b6ad7ac74
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      8e953b07fbf17647254cc450de084f26

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 229, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 29, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 174, in LPopenfile
    "monitor.r2py", line 35, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 229, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 29, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 174, in LPopenfile
    "monitor.r2py", line 35, in __init__
  Exception (with class 'exception_hierarchy.RepyArgumentError'): Cannot create explicit version files
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jf4440)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# mycontext["in_use"] = mycontext.get("in_use", [])
# 
#                 
# lock = createlock() 
# 
# class VMFile():
#     allow_write = False
#     filename = ''
#     
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
#         self.filename = filename
#         if create:            
#             #check if filename contains '.v', if true raise RepyArgumentError("Cannot create explicit version files")
#             # 
#             #if contains .v raise error
#             if '.v' in filename:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             
#             
#             if filename in listfiles():
#                 #get the highest version
#                 current_highest_v = get_highest_v(filename)
#                 #file name to open
#                 if current_highest_v == 0:
#                     prev_file_name = filename
#                 else :
#                     prev_file_name = filename + '.v' + str(current_highest_v)
#                 #check if already in use
#                 # log('prev_file_name', prev_file_name, '\n')
#                 # log(mycontext['in_use'])
#                 if mycontext['in_use'] != None and prev_file_name in mycontext['in_use'] :
#                     raise FileInUseError
#                 #open file
#                 # log('opening', prev_file_name, '/n')
#                 prev_file = openfile(prev_file_name, False)
#                 #add to in use
#                 if mycontext['in_use'] == None:
#                     mycontext['in_use'] = []
#             
#                 mycontext['in_use'] = [prev_file_name]
#                 
#                 # log('updated in use', mycontext['in_use'], '\n' )
#                 #read content
#                 content = prev_file.readat(None, 0)
#                 
#                 #allow write
#                 self.allow_write = True
#                 
#                 #new file name
#                 new_name = filename + '.v' + str(current_highest_v + 1)
#                 # log('new filename', new_name, '\n')
#                 self.filename = new_name
#                 self.VMfile = openfile(new_name, True)
#                 # log('opening', new_name, '\n')
#                 if mycontext['in_use'] == None:
#                     mycontext['in_use'] = []
#             
#                 mycontext['in_use'] = mycontext['in_use'] + [new_name]
#                 # log('updated in use', mycontext['in_use'], '\n' )
#                 self.VMfile.writeat(content, 0)
#                 # log('writing to newfile \n')
#                 prev_file.close()
#                 mycontext['in_use'].remove(prev_file_name)
#                 # log('closing', prev_file_name, '\n')
#             
#             else:
#                 #file doesn't exits create original
#                 # log('creating original\n')
#                 self.allow_write = True
#                 self.VMfile = openfile(filename, True)
#                 #set current file name
#                 # log('opeing ', filename, '\n')
#                 if mycontext['in_use'] == None:
#                     mycontext['in_use'] = []
#                 mycontext['in_use'] = mycontext['in_use'] + [filename]
#                 # log('updated in use', mycontext['in_use'], '\n' )
#             
#         else:
#             
#     
#             # Open existing file normally
#         #  Check if version/ file exsits if not raise error
#             if filename in listfiles():
#                 self.VMfile = openfile(filename, False)
#                 if mycontext['in_use'] == None:
#                     mycontext['in_use'] = []
#                 mycontext['in_use'] = mycontext['in_use'] + [filename]
#                 # log('updated in use', mycontext['in_use'], '\n' )
#                 # log(mycontext['in_use'])
#                 basefilename, requestedV = getV(filename)         
#                 if requestedV == get_highest_v(basefilename):
#                     self.allow_write = True
#             else :
#                 raise FileNotFoundError 
# 
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.allow_write:
#             return self.VMfile.writeat(data, offset)
#         else:
#             raise FileInUseError
# 
#     def close(self):
#         if mycontext['in_use'] != None and self.filename in mycontext['in_use'] :
#             mycontext['in_use'].remove(self.filename)
#         # log('close file', self.filename ,'updated in use', mycontext['in_use'], '\n' )
#         return self.VMfile.close()
#     
# def getV(filename):
#     '''
#     return basename and v 
#     '''
#     pos = filename.rfind('.v')  # find the last occurrence of ".v"
#     if pos != -1:
#         v = filename[pos+2:]  # everything after ".v"
#         if v.isdigit():  # check if it's all digits
#             return filename[:pos], int(v)
#     return filename[:pos], 0
# 
# 
# def get_highest_v(file_base_name):
#     ls = listfiles()  # returns ["file.v1", "file.v2", "data.v1", ...]
#     max_version = 0
# 
#     for s in ls:
#         # Check if string starts with base name + '.v'
#         prefix = file_base_name + '.v'
#         if s.startswith(prefix):
#             suffix = s[len(prefix):]  # get the number after .v
#             if suffix.isdigit():
#                 version_num = int(suffix)
#                 if version_num > max_version:
#                     max_version = version_num
# 
#     return max_version
# 
# 
# 
# def ls():
#     ls = listfiles()
#     filtered = []
#     for s in ls:
#         pos = s.rfind('.v')  # find the last occurrence of ".v"
#         if pos != -1:
#             suffix = s[pos+2:]  # everything after ".v"
#             if suffix.isdigit():  # check if it's all digits
#                 filtered.append(s)
#     # log(filtered)
#                 
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError('Cannot remove file')
#     
# 
# def LPlistfiles():
#     ls = listfiles()
#     filtered = set()
#     for s in ls:
#         pos = s.rfind('.v')
#         if pos != -1:
#             suffix = s[pos+2:]  # everything after ".v"
#             if suffix.isdigit():  # check if it's all digits
#                 filtered.add(s[:pos]) #remove version number
#     # log(get_highest_v('testfile'))
#     
#     return list(filtered)
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
