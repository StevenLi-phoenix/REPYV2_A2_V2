"""
==============================================================================
ATTACK CASE: ow2130_attackcase2.r2py
==============================================================================
Target NetID:        ow2130
Original Test:       test16_startswith_vault_bug.r2py
Test File Path:      submit/general_tests/test16_startswith_vault_bug.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4600
  Task UUID:         fda7932a-6b1a-4630-9c4b-888c9b8d7db9
  Machine Type:      c5.xlarge
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:26:09.723488
  End Time:          2025-10-27T19:26:15.265000
  Runtime:           5.5415 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       513c2b69508a9cb92e38ad8a160fdcc6
  Attack MD5:        8f001b374ace212a6d5f595dbcbedf6a
  Combined MD5:      d3bc15b5315a91422722748430b252d9

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 205, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 154, in LPopenfile
    "monitor.r2py", line 93, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 205, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 154, in LPopenfile
    "monitor.r2py", line 93, in __init__
  Exception (with class 'exception_hierarchy.RepyArgumentError'): invalid filename
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: aa12037, al8372, bzy205, jaa10243, krg9790, nb4048, sr7991, zs2985
  Vulnerability: Uses startswith() which incorrectly matches "file.vault" when checking for "file.v*"
  Attack: Create "data.vault" then "data" - should not confuse them as versions

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: ow2130)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# def checkValidFileName(name):
#     if not name:
#         return False
#     if len(name) > 120:
#         return False
#     if name in ('.', '..'):
#         return False
#     if name[0] == '.':
#         return False
#     for ch in name:
#         ok = ('a' <= ch <= 'z') or ('0' <= ch <= '9') or ch in ('-', '_', '.')
#         if not ok:
#             return False
#     return True
# 
# def fileVersionSplitter(name):
#     parts = name.rsplit('.v', 1)
#     if len(parts) == 2:
#         defBase, suffix = parts
#         try:
#             n = int(suffix)
#             if n >= 1:
#                 return defBase, n
#         except:
#             pass
#     if '.v' not in name:
#         return name, 0
#     else:
#         return name, None
# 
# def fileNextVersionCheck(defBase, existing_names):
#     maxN = -1
#     if defBase in existing_names:
#         if 0 > maxN:
#             maxN = 0
#     prefix = defBase + '.v'
#     for fn in existing_names:
#         if fn.startswith(prefix):
#             defBase2, n = fileVersionSplitter(fn)
#             if n is not None:
#                 if n > maxN:
#                     maxN = n
#     if maxN < 0:
#         return defBase
#     else:
#         return defBase + '.v' + str(maxN + 1)
# 
# def fileReaderFull(fileobj):
#     return fileobj.readat(None, 0)
# 
# newestFileOpen = {}
# 
# def newestNameCapture(defBase, files):
#     latest = None
#     maxN = -1
#     if defBase in files:
#         latest = defBase
#         maxN = 0
#     prefix = defBase + '.v'
#     for fn in files:
#         if fn.startswith(prefix):
#             defBase2, n = fileVersionSplitter(fn)
#             if n is not None and n > maxN:
#                 maxN = n
#                 latest = fn
#     return latest
# 
# class VMFile():
#     def __init__(self, filename, create):
#         if not checkValidFileName(filename):
#             raise RepyArgumentError("invalid filename")
#         files = listfiles()
#         if create:
#             defBase, ver = fileVersionSplitter(filename)
#             if ver is None:
#                 raise RepyArgumentError("invalid filename")
#             if ver >= 1:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             latest = newestNameCapture(defBase, files)
#             if latest is not None and newestFileOpen.get(latest, 0) > 0:
#                 raise FileInUseError("Latest Version Open")
#             newFileName = fileNextVersionCheck(defBase, files)
#             oldFileName = None
#             if newFileName != defBase:
#                 if defBase in files:
#                     maxName = defBase
#                     maxN = 0
#                 else:
#                     maxName = None
#                     maxN = -1
#                 prefix = defBase + '.v'
#                 for fn in files:
#                     if fn.startswith(prefix):
#                         defBase2, n = fileVersionSplitter(fn)
#                         if n is not None and n > maxN:
#                             maxN = n
#                             maxName = fn
#                 oldFileName = maxName
#             self.isNewVersion = True
#             self.nameCap = newFileName
#             self.VMfile = openfile(newFileName, True)
#             if oldFileName is not None:
#                 prev = openfile(oldFileName, False)
#                 content = fileReaderFull(prev)
#                 if content:
#                     self.VMfile.writeat(content, 0)
#                 prev.close()
#             newestFileOpen[newFileName] = newestFileOpen.get(newFileName, 0) + 1
#         else:
#             if filename not in files:
#                 raise FileNotFoundError("file does not exist")
#             self.isNewVersion = False
#             self.nameCap = filename
#             self.VMfile = openfile(filename, False)
#             defBase, ver = fileVersionSplitter(filename)
#             latest = newestNameCapture(defBase, files)
#             if latest == filename:
#                 newestFileOpen[filename] = newestFileOpen.get(filename, 0) + 1
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not self.isNewVersion:
#             raise FileInUseError("writes to existing versions are not allowed")
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         try:
#             return self.VMfile.close()
#         finally:
#             cnt = newestFileOpen.get(self.nameCap, 0)
#             if cnt > 0:
#                 newestFileOpen[self.nameCap] = cnt - 1
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("remove not allowed")
# 
# def LPlistfiles():
#     unchangedN = listfiles()
#     defBases = {}
#     for name in unchangedN:
#         b, n = fileVersionSplitter(name)
#         if n is None:
#             defBases[name] = True
#         else:
#             defBases[b] = True
#     return list(defBases.keys())
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Create file with .v in name but not a version
f1 = openfile("data.vault", True)
f1.writeat("vault_data", 0)
f1.close()

# Create file with same prefix
f2 = openfile("data", True)
f2.writeat("base_data", 0)
f2.close()

# Create version of data - should copy from "data", not "data.vault"
f3 = openfile("data", True)
content = f3.readat(None, 0)
if content != "base_data":
    log("ERROR: Should copy from data, not data.vault\n")
    exitall()
f3.close()

# Both should be in listfiles
files = listfiles()
if "data" not in files:
    log("ERROR: data should be in listfiles\n")
    exitall()
if "data.vault" not in files:
    log("ERROR: data.vault should be in listfiles\n")
    exitall()
