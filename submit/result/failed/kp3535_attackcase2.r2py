"""
==============================================================================
ATTACK CASE: kp3535_attackcase2.r2py
==============================================================================
Target NetID:        kp3535
Original Test:       test21_filename_edge_cases.r2py
Test File Path:      submit/general_tests/test21_filename_edge_cases.r2py

RUNNER INFORMATION:
  Runner ID:         runner-7038
  Task UUID:         f9887a06-2072-4888-a625-a7499c5394a7
  Machine Type:      Standard_D4s_v3
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:45.970722
  End Time:          2025-10-27T19:23:52.049031
  Runtime:           6.0783 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       f9ceb86259ac26766208919b3f82e238
  Attack MD5:        ff058ba3b8ff9df14934fbafc02bcb42
  Combined MD5:      2c9e38521e5b6312fe8327488e78b88e

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 153, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 30, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 75, in writeat
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 153, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 30, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 75, in writeat
  Exception (with class 'exception_hierarchy.FileInUseError'): Cannot write to older version files
  ---

ORIGINAL TEST DESCRIPTION:
  Targets: kl5058, npj2009
  Vulnerability: Edge cases in filename handling (length, parsing)
  Attack: Test with long filenames and files with multiple .v patterns

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: kp3535)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# allFiles = []
# 
# class VMFile():
# 
#     def __init__(self, filename, create):
#         # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         
#         self.filename = filename
#         if create:
# 
#             # should not create explicit Versioned files
#             if is_explicit_version(filename):
#                 raise RepyArgumentError("Cannot create explicit version files")
#             
#             # File exists → create new version
#             if filename in listfiles():
#                 latest_version = get_latest_version(filename)
# 
#                 # Should not create new version if latest version of the file is open
#                 try:
#                     prev_file = openfile(create_versioned_filename(filename, latest_version),False)
#                 except:
#                     raise FileInUseError("Cannot create new version since latest version is open")
#                 
#                 content = prev_file.readat(None, 0)
# 
#                 new_name = create_versioned_filename(filename, latest_version + 1)
#                 self.VMfile = openfile(new_name, True)
#                 self.filename = new_name
#                 self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#                 allFiles.append(filename)
#         else:
#             # Open existing file 
#             if filename in listfiles():
#                 try:
#                     self.VMfile = openfile(filename, False)
#                 except:
#                     raise FileInUseError("File already open")
#             else:
#                 raise FileNotFoundError("File does not exist")
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         filename = self.filename
#         latest_version = get_latest_version(filename)
# 
#         # writing allowed only in latest version files
#         if is_explicit_version(filename) and (int(filename.split('.v')[1]) == latest_version):
#             return self.VMfile.writeat(data, offset)
#         elif not is_explicit_version(filename) and latest_version == 0:
#             return self.VMfile.writeat(data, offset)
#         else:
#             raise FileInUseError("Cannot write to older version files")
# 
#     def close(self):
#         return self.VMfile.close()
# 
# # helper method to check if the given file is a versioned file
# def is_explicit_version(filename):
#     if '.v' in filename:
#         if len(filename.split('.v')) > 1 and filename.split('.v')[1].isdigit():
#             return True
#     return False
# 
# # helper method to get latest version of the file
# def get_latest_version(filename):
#     res = 0
#     version = 0
#     filename_base = filename.split('.v')[0]
# 
#     for file in listfiles():
#         temp = file.split('.v')
#         if len(temp) > 1 and temp[1].isdigit():
#             version = int(temp[1])
#         base = temp[0]
#         if base == filename_base:
#             res = max(res, version)
#     return int(res)
# 
# # helper method to create filename with version
# def create_versioned_filename(base, version):
#     if version == 0:
#         return base
#     return base + '.v' + str(version)
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File Deletion not allowed")
# 
# # should just list the files regardless of versions
# def LPlistfiles():
#     return allFiles
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test 1: Long filename
longname = "a" * 100
f = openfile(longname, True)
f.writeat("data", 0)
f.close()

# Create version
f = openfile(longname, True)
content = f.readat(None, 0)
if content != "data":
    log("ERROR: Version should copy content\n")
    exitall()

# Should be writable since it's the latest version
try:
    f.writeat("new", 0)
except FileInUseError:
    log("ERROR: Latest version should be writable\n")
    exitall()
f.close()

# Test 2: File with .v but not a version
f2 = openfile("data.value", True)
f2.writeat("value_data", 0)
f2.close()

# Verify it appears in listfiles
files = listfiles()
if "data.value" not in files:
    log("ERROR: data.value should be in listfiles\n")
    exitall()
