"""
==============================================================================
ATTACK CASE: jnb9552_attackcase9.r2py
==============================================================================
Target NetID:        jnb9552
Original Test:       test09_multiple_versions.r2py
Test File Path:      submit/general_tests/test09_multiple_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-8301
  Task UUID:         dad3c3da-11b6-40ea-99d2-1c36a36ad544
  Machine Type:      m5.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:54.746859
  End Time:          2025-10-27T19:23:00.326864
  Runtime:           5.5800 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       82f83bcc6ee6815af2637c0ef4e9b072
  Attack MD5:        b705d0458f62c6142becb1b7dfc564ab
  Combined MD5:      55e1ebfd11b9f8410424bd3eb4e4cb25

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 115, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 18, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 67, in LPopenfile
    "monitor.r2py", line 46, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 115, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 18, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 67, in LPopenfile
    "monitor.r2py", line 46, in __init__
  Exception (with type 'exceptions.AttributeError'): VMFile instance has no attribute 'VMfile'
  ---

ORIGINAL TEST DESCRIPTION:
  Test 9: Multiple versions work correctly (v1, v2, v3, v4, v5)
  Verifies that multiple versions can be created and accessed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jnb9552)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# openList = []
# 
# class VMFile():
#     def __init__(self, filename, create):      
#         self.filename = filename
#         self.create = create
#         if create:
#             if ".v" in filename:
#                 raise RepyArgumentError("Cannot create explicit version files")
#             elif filename in openList:
#                 raise FileInUseError
#             else :
#                 if filename in listfiles():
#                     prev_file = openfile(filename, False)
#                     content = prev_file.readat(None, 0)
#                     new_name = filename
#                     file_version = 1
#                     while new_name in listfiles():
#                         new_name = filename + ".v" + str(file_version)
#                         file_version = file_version + 1
#                     self.VMfile = openfile(new_name, True)
#                     openList.append(new_name)
#                     self.VMfile.writeat(content, 0)
#                 else:
#                     self.VMfile = openfile(filename, True)
#         else:
#             if not (filename in listfiles()):
#                 raise FileNotFoundError
#             elif not self.VMfile.closed:
#                 raise FileInUseError
#             else:
#                 # Open existing file normally
#                 self.VMfile = openfile(filename, False)
#         openList.append(self.filename)
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if not ".v" in self.filename and not self.create:
#             raise FileInUseError
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         openList.remove(self.filename)
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Cannot remove files")
# 
# def LPlistfiles():
#     fileList = listfiles()
#     for x in fileList:
#         if ".v" in x:
#             fileList.remove(x)
#     return fileList
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile9", True)
f1.writeat("Base", 0)
f1.close()

# Create versions v1 through v5
for i in range(1, 6):
    fx = openfile("testfile9", True)
    content = fx.readat(None, 0)
    fx.writeat("V" + str(i), len(content))
    fx.close()

# Verify base file still has original content (immutable)
f2 = openfile("testfile9", False)
content = f2.readat(None, 0)
if content != "Base":
    log("ERROR: Base file should remain unchanged\n")
    exitall()
f2.close()

# Verify latest version (v5) has all accumulated content
f3 = openfile("testfile9.v5", False)
content = f3.readat(None, 0)
if "BaseV1V2V3V4V5" not in content:
    log("ERROR: Latest version should accumulate all changes\n")
    exitall()
f3.close()

