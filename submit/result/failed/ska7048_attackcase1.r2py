"""
==============================================================================
ATTACK CASE: ska7048_attackcase1.r2py
==============================================================================
Target NetID:        ska7048
Original Test:       test09_multiple_versions.r2py
Test File Path:      submit/general_tests/test09_multiple_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4782
  Task UUID:         4ab0f51d-9de9-4c18-8ab1-b2490a9f9b2d
  Machine Type:      c2-standard-4
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:27:17.901087
  End Time:          2025-10-27T19:27:21.518202
  Runtime:           3.6171 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       094273796b56f91b2a3094da8f0503ad
  Attack MD5:        b705d0458f62c6142becb1b7dfc564ab
  Combined MD5:      4021cc258ce1dddb109ede8106c36643

FAILURE DETAILS:
  Reason:            ERROR: Base file should remain unchanged


STDOUT:
  ERROR: Base file should remain unchanged

ORIGINAL TEST DESCRIPTION:
  Test 9: Multiple versions work correctly (v1, v2, v3, v4, v5)
  Verifies that multiple versions can be created and accessed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: ska7048)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# open_files = {}
# 
# class VMFile():
#     def __init__(self, filename, create):
#         self.filename = filename
#         self.is_version_file = False
# 
#         if create:
#             if ".v" in filename:
#                 parts = filename.split(".v")
#                 if len(parts) == 2:
#                     try:
#                         int(parts[1])
#                         raise RepyArgumentError("Cannot create explicit version files")
#                     except ValueError:
#                         pass
#         
#         if ".v" in filename:
#             parts = filename.split(".v")
#             if len(parts) == 2:
#                 try:
#                     int(parts[1])
#                     self.is_version_file = True
#                 except ValueError:
#                     pass
#                         
#         if filename in open_files:
#             raise FileInUseError("cant open file that is already open")
#         
#         if create:
#             if filename in listfiles():
# 
#                 all_files = listfiles()
#                 highest_version = 0
#                 
#                 for file in all_files:
#                     if file.startswith(filename + ".v"):
#                         version_part = file[len(filename) + 2:]
#                         try:
#                             version_num = int(version_part)
#                             if version_num > highest_version:
#                                 highest_version = version_num
#                         except ValueError:
#                             pass
#                 
#                 new_version = highest_version + 1
#                 new_name = filename + ".v" + str(new_version)
#                 
#                 prev_file = openfile(filename, False)
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
#                 
#                 version_file = openfile(new_name, True)
#                 version_file.writeat(content, 0)
#                 version_file.close()
#                 
#                 self.VMfile = openfile(filename, True)
#                 self.VMfile.writeat(content, 0)
#                 
#             else:
#                 # File doesn't exist â†’ create it
#                 self.VMfile = openfile(filename, True)
#         else:
#             # Open existing file normally
#             self.VMfile = openfile(filename, False)
# 
#         open_files[filename] = True
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.is_version_file:
#             raise FileInUseError("cannot write to old versions")
#         
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.filename in open_files:
#             del open_files[self.filename]
#         
#         return self.VMfile.close()
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("file deletion isnt allowed")
# 
# def LPlistfiles():
#     all_files = listfiles()
#     filtered_files = []
#     for filename in all_files:
#         is_version = False
#         if ".v" in filename:
#             parts = filename.split(".v")
#             if len(parts) == 2:
#                 try:
#                     int(parts[1])
#                     is_version = True
#                 except ValueError:
#                     pass
#         
#         if not is_version:
#             filtered_files.append(filename)
#     
#     return filtered_files
# 
# 
# 
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile9", True)
f1.writeat("Base", 0)
f1.close()

# Create versions v1 through v5
for i in range(1, 6):
    fx = openfile("testfile9", True)
    content = fx.readat(None, 0)
    fx.writeat("V" + str(i), len(content))
    fx.close()

# Verify base file still has original content (immutable)
f2 = openfile("testfile9", False)
content = f2.readat(None, 0)
if content != "Base":
    log("ERROR: Base file should remain unchanged\n")
    exitall()
f2.close()

# Verify latest version (v5) has all accumulated content
f3 = openfile("testfile9.v5", False)
content = f3.readat(None, 0)
if "BaseV1V2V3V4V5" not in content:
    log("ERROR: Latest version should accumulate all changes\n")
    exitall()
f3.close()

