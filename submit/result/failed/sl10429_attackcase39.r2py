"""
==============================================================================
ATTACK CASE: sl10429_attackcase39.r2py
==============================================================================
Target NetID:        sl10429
Original Test:       app7633_attackcase4.r2py
Test File Path:      submit/general_tests\app7633_attackcase4.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4999
  Task UUID:         db6f1cb0-031f-4210-ab63-446084c4ff4c
  Machine Type:      c2-standard-4
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-30T14:59:12.393548
  End Time:          2025-10-30T14:59:14.513618
  Runtime:           2.1201 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       2a2fbe5ad75c94bf0e76be1fdbd2c14d
  Attack MD5:        3c3a09d2050303edbe7e038cc8b0edf8
  Combined MD5:      5c4dea7d044986676e371390567a9f13

FAILURE DETAILS:
  Reason:            SECURE: Version numbers handled correctly

STDOUT:
  SECURE: Version numbers handled correctly

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: sl10429)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# # Debugging log
# DEBUG = False # Local configurable variable to turn on/off debugging log
# org_log = log
# def log(*args, **kwargs):
#     if DEBUG:
#         endl = kwargs.get('endl', "\n")
#         org_log(*args, **kwargs)
#         org_log(endl)
# log("*** Program is in debugging mode, turn this off for for submission ***")
# 
# # Filename validation
# def name_check(name):
#     """Check that the given filename is valid.
#     Args:
#         name (str): The filename to check.
#     Raises:
#         RepyArgumentError: If the filename is invalid.
#     Returns:
#         str: The validated filename.
#     """
#     """
#     Filenames may only be in the current directory and may only contain 
#     lowercase letters, numbers, the hyphen, underscore, and period characters.
#     Also, filenames cannot be '.', '..', the blank string or start with a period. 
#     There is no concept of a directory or a folder in repy. 
#     Filenames must be no more than 120 characters long.
#     """
#     name = str(name)
#     for char in name:
#         if not (char.islower() or char.isdigit() or char in ['-', '_', '.']):
#             raise RepyArgumentError("Invalid character in filename: " + name)
#     if name in ['', '.', '..']:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot be blank, '.', '..'")
#     if name.startswith('.'):
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot start with a period)")
#     if len(name) > 120:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot be longer than 120 characters)")
#     if '/' in name or '\\' in name:
#         raise RepyArgumentError("Invalid filename: " + name + " (cannot contain directory separators)")
#     return name
# 
# # Copying file
# def copy(src, dest):
#     """Copy contents from src file to dest file.
#     Args:
#         src (file object): Source file to copy from.
#         dest (file object): Destination file to copy to.
#     """
#     if src not in listfiles():
#         raise RepyArgumentError("Source file does not exist: " + src)
#     if dest in listfiles():
#         raise RepyArgumentError("Destination file already exists: " + dest)
#     prev_file = openfile(src, False)
#     content = prev_file.readat(None, 0)
#     dest_file = openfile(dest, True)
#     dest_file.writeat(content, 0)
#     prev_file.close()
#     dest_file.close()
# 
# # Parse versioned filename
# def is_versioned_filename(filename):
#     """Check if a filename is versioned.
#     Args:
#         filename (str): The filename to check.
#     Returns:
#         bool: True if the filename is versioned, False otherwise.
#     """
#     return '.v' in filename and filename.rsplit('.v', 1)[1].isdigit()
# def parse_versioned_filename(filename):
#     """Parse a versioned filename into its base name and version number.
#     Args:
#         filename (str): The versioned filename (e.g., "file.v1").
#     Returns:
#         tuple: A tuple containing the base name (str) and version number (int).
#     Raises:
#         RepyArgumentError: If the filename is not a valid versioned filename.
#     """
#     if not is_versioned_filename(filename):
#         raise RepyArgumentError("Filename is not versioned: " + filename)
#     base_name, version_str = filename.rsplit('.v', 1)
#     return base_name, int(version_str)
# 
# def find_max_version(filename):
#     """Find the maximum version number for a given base filename.
#     Args:
#         filename (str): The base filename to check.
#     Returns:
#         int: The maximum version number found, or 0 if no versions exist.
#     """
#     max_version = 0
#     fnl = listfiles() # optimize for efficiency, avoid multiple calls to listfiles()
#     while True:
#         versioned_filename = filename + ".v" + str(max_version + 1)
#         if versioned_filename in fnl:
#             max_version += 1
#         else:
#             break
#     return max_version
# 
# class VMFile():
#     fileopened = []
#     def __init__(self, filename, create):
#         # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         # (Incomplete: does not handle further versions like v2, v3, etc.)
#         self.filename = name_check(filename)
#         self.create = bool(create)
#         self.max_version = 0
#         log("VMFile init: filename=" + self.filename + ", create=" + str(self.create))
#         if self.filename in VMFile.fileopened:
#             raise FileInUseError("File is locked: " + self.filename)
#         if self.create:
#             if is_versioned_filename(self.filename):
#                 raise RepyArgumentError("Cannot create explicit version files")
#             if self.filename in listfiles():
#                 # find max version
#                 self.max_version = find_max_version(self.filename)
#                 new_version_filename = self.filename + ".v" + str(self.max_version + 1)
#                 # Copy contents to new versioned file
#                 copy(self.filename, new_version_filename) # Create versioned copy
#                 # Open the original file for writing the new version
#                 self.VMfile = openfile(self.filename, True)
#             else:
#                 # File doesn't exist â†’ create filename
#                 self.VMfile = openfile(self.filename, True)
#         else:
#             # Open existing file normally
#             # will pass FileNotFoundError if it doesn't exist
#             self.VMfile = openfile(self.filename, False)
#         VMFile.fileopened.append(self.filename)
# 
#     def readat(self, num_bytes, offset):
#         """
#         Args:
#             num_bytes (int, long, type(None)): bytes to read, or None to read the whole file
#             offset (int, long): offset from where to start reading
# 
#         Returns:
#             str: data read from the file
#         """
#         log("[READ]" + self.filename)
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         """
#         Args:
#             data (str): data to write
#             offset (int, long): offset from where to start writing
#         Returns:
#             int or None: number of bytes written, or None
#         """
#         log("[WRITE]" + self.filename)
#         if is_versioned_filename(self.filename):
#             raise FileInUseError("Cannot write to a versioned file: " + self.filename)
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         """
#         Returns:
#             bool, type(None): __summary__
#         """
#         VMFile.fileopened.remove(self.filename)
#         return self.VMfile.close()
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     """reject any removefile calls to prevent deletion of versioned files"""
#     raise RepyArgumentError("removefile is not allowed in this security layer.")
#     # removefile(filename)
# 
# def LPlistfiles():
#     """List all files. Filtering versioned files"""
#     log("Listing files, filtering versioned files.")
#     fnl = []
#     for fname in listfiles():
#         if not is_versioned_filename(fname):
#             fnl.append(fname)
#     return fnl
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Test extreme version numbers
# Create files with very high version numbers to test integer handling

if "vmax.txt" in listfiles():
    removefile("vmax.txt")

f = openfile("vmax.txt", True)
f.writeat("base", 0)
f.close()

vulnerable = [False]
overflow_detected = [False]

# Try to manually create a file with very high version number
# to see if _get_highest_version handles it
try:
    high_version = openfile("vmax.txt.v999999", True)
    high_version.writeat("high", 0)
    high_version.close()
    
    # If we successfully created it, that's a problem
    vulnerable[0] = True
    log("VULNERABLE: Created explicit version file v999999")
    
except RepyArgumentError:
    # Expected - can't create version files explicitly
    pass
except:
    vulnerable[0] = True

# Create several normal versions
for i in range(5):
    try:
        f = openfile("vmax.txt", True)
        f.writeat("v" + str(i+1), 0)
        f.close()
    except:
        vulnerable[0] = True

# Now test if _get_highest_version works correctly
try:
    files = listfiles()
    versions = []
    
    for fname in files:
        if "vmax.txt.v" in fname:
            ver_part = fname.split(".v")[1]
            if ver_part.isdigit():
                version_num = int(ver_part)
                versions.append(version_num)
    
    versions.sort()
    
    # Check if versions are sequential
    if len(versions) > 0:
        expected = range(1, len(versions) + 1)
        if versions != expected:
            vulnerable[0] = True
            log("VULNERABLE: Version numbers not sequential after operations")
    
    # Try creating one more version - should get next number
    f = openfile("vmax.txt", True)
    f.writeat("next", 0)
    f.close()
    
    # Check what version was created
    files = listfiles()
    new_versions = []
    for fname in files:
        if "vmax.txt.v" in fname:
            ver_part = fname.split(".v")[1]
            if ver_part.isdigit():
                new_versions.append(int(ver_part))
    
    new_versions.sort()
    
    # Last version should be len(versions) + 1
    if len(new_versions) > 0:
        expected_last = len(versions) + 1
        actual_last = new_versions[-1]
        
        if actual_last != expected_last:
            overflow_detected[0] = True
            vulnerable[0] = True
            log("VULNERABLE: Version numbering incorrect - expected v" + str(expected_last) + " got v" + str(actual_last))
    
except:
    vulnerable[0] = True
    log("VULNERABLE: Error in version number handling")

if overflow_detected[0]:
    log("VULNERABLE: Version number overflow or miscounting")
elif vulnerable[0]:
    log("VULNERABLE: Version numbering system flawed")
else:
    log("SECURE: Version numbers handled correctly")