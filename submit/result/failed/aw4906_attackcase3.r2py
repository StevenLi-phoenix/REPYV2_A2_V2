"""
==============================================================================
ATTACK CASE: aw4906_attackcase3.r2py
==============================================================================
Target NetID:        aw4906
Original Test:       test17_listfiles_type_bug.r2py
Test File Path:      submit/general_tests/test17_listfiles_type_bug.r2py

RUNNER INFORMATION:
  Runner ID:         runner-5799
  Task UUID:         f5cb9a0a-1383-435b-8319-b48d44553842
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:20:06.349226
  End Time:          2025-10-27T19:20:12.091341
  Runtime:           5.7421 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       788a359355a40a176c682cf9f18232a4
  Attack MD5:        2a4ef87e83d59d96eed2ac42716d017e
  Combined MD5:      6f5e3b906c8bffc4bfa4c04e32c8f8fa

FAILURE DETAILS:
  Reason:            ERROR: test file should be in listfiles


STDOUT:
  ERROR: test file should be in listfiles

ORIGINAL TEST DESCRIPTION:
  Target: zs2985
  Vulnerability: LPlistfiles() returns str(result) instead of result (returns string not list)
  Attack: Call listfiles() and verify it returns a proper list type

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: aw4906)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
# 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# 
# class VMFile():
#     def __init__(self, filename, create):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
#         if create:
#             self.old = False
#             if ".v" in filename: 
#                 # Manual creation not allowed
#                 raise RepyArgumentError("Cannot create explicit version files")
#             if filename in listfiles():
#                 if filename not in mycontext:
#                     # File exists → create version 1
#                     prev_file = openfile(filename, False) 
#                     mycontext[filename] = 1 
#                 else: 
#                     # Version 1 exists → create version [num] 
#                     curr_ver = filename + ".v" + str(mycontext[filename])
#                     prev_file = openfile(curr_ver, False)
#                     mycontext[filename] += 1
# 
#                 content = prev_file.readat(None, 0)
# 
#                 new_name = filename + ".v" + str(mycontext[filename])
#                 self.VMfile = openfile(new_name, True)
#                 self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#         else:
#             # Check if file exists
#             if filename not in listfiles(): 
#                 raise FileNotFoundError
#             else: 
#                 self.old = True
#                 # Open existing file normally
#                 self.VMfile = openfile(filename, False)
#         
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.old:
#             raise FileInUseError
#         else: 
#             return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
#     # removefile(filename)
# 
# # FIX listfiles()
# 
# def LPlistfiles():
#     new_list = []
#     for key in mycontext: 
#         new_list.append(key) 
#     return new_list
#     # return listfiles()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

# Create a file
f = openfile("test", True)
f.writeat("data", 0)
f.close()

# Call listfiles
files = listfiles()

# Check if it's actually a list (not a string representation)
if not isinstance(files, list):
    log("ERROR: listfiles() should return a list, not " + str(type(files)) + "\n")
    exitall()

# Check if we can iterate and access elements properly
if "test" not in files:
    log("ERROR: test file should be in listfiles\n")
    exitall()
