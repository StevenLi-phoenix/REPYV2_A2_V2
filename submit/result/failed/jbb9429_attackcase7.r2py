"""
==============================================================================
ATTACK CASE: jbb9429_attackcase7.r2py
==============================================================================
Target NetID:        jbb9429
Original Test:       test04_immutable_old_versions.r2py
Test File Path:      submit/general_tests/test04_immutable_old_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-4936
  Task UUID:         03cb3dd3-1def-4fd4-b27c-1d8b5337de6d
  Machine Type:      e2-medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:22:28.130056
  End Time:          2025-10-27T19:22:33.515454
  Runtime:           5.3854 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       472f12e7adaa5492cd57be9f6c24272a
  Attack MD5:        9b7d716d61c8c7daa6399db16d01b176
  Combined MD5:      ca5badba8b4b28df10ebc7921be8aaac

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 130, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 10, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 71, in LPopenfile
    "monitor.r2py", line 28, in __init__
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/emulfile.py", line 177, in emulated_open
    "/app/emulfile.py", line 289, in __init__
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 130, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 10, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 71, in LPopenfile
    "monitor.r2py", line 28, in __init__
  Exception (with class 'exception_hierarchy.FileNotFoundError'): Cannot openfile non-existent file "testfile4" without creating it!
  ---

ORIGINAL TEST DESCRIPTION:
  Test 4: Cannot write to old versions
  Verifies immutability is enforced after closing files

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jbb9429)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# 
# class VMFile():
#     latest_versions = {}
# 
#     def __init__(self, filename, create):
#         if create :
#             version, name = _version_split_name(filename)
#             if version != -1 : raise RepyArgumentError("Cannot create explicit version files")
# 
#             if filename in LPlistfiles():
#                 prev_file = openfile(filename, False)
#                 content = prev_file.readat(None, 0)
#                 prev_file.close()
# 
#                 new_name = filename + ".v" + str(version + 1)
#                 self.VMfile = openfile(new_name, True)
#                 self.filename = new_name
#                 self.VMfile.writeat(content, 0)
#                 VMFile.latest_versions[filename] = version + 1
# 
#             else:
#                 filename = name + ".v1" 
#                 self.VMfile = openfile(filename, True)
#                 
#                 VMFile.latest_versions[name] = 1
#                 self.filename = filename
#             
#         else :
#             version, name = _version_split_name(filename)
# 
#             # Deafult to open the latest version if none is specified
#             if version == -1 and VMFile.latest_versions.get(filename):
#                 filename = name + ".v" + str(VMFile.latest_versions[filename])
#             
# 
#             self.VMfile = openfile(filename, False)
#             self.filename = filename
#             return
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         version, name  = _version_split_name(self.filename)
#         if version != VMFile.latest_versions[name] : raise FileInUseError
# 
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError('File deletion is not allowed')
# 
# def LPlistfiles():
#     names = set()
#     for name in listfiles():
#         _, name = _version_split_name(name)
#         names.add(name)
#     return list(names)
# 
# def _version_split_name(filename):
#     suffix_idx = filename.rfind(".v")
#     if suffix_idx == -1:
#         return -1, filename
# 
#     version_part = filename[suffix_idx + 2:]
#     if not version_part or not version_part.isdigit():
#         return -1, filename
# 
#     return int(version_part), filename[:suffix_idx]
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

f1 = openfile("testfile4", True)
f1.writeat("Original", 0)
f1.close()

f2 = openfile("testfile4", True)
f2.writeat("NewVersion", 0)
f2.close()

# Try to open and write to the base version (now immutable)
f3 = openfile("testfile4", False)
try:
    f3.writeat("Hack", 0)
    log("ERROR: Should not allow writing to old version\n")
    exitall()
except FileInUseError:
    pass
f3.close()

