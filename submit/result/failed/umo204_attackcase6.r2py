"""
==============================================================================
ATTACK CASE: umo204_attackcase6.r2py
==============================================================================
Target NetID:        umo204
Original Test:       test09_multiple_versions.r2py
Test File Path:      submit/general_tests/test09_multiple_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3218
  Task UUID:         55ea7faf-5d63-4df3-ae6d-bc22483a9a77
  Machine Type:      n2-standard-8
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:28:23.562429
  End Time:          2025-10-27T19:28:28.984975
  Runtime:           5.4225 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       2963fadb506870257ed7dfc0a4a1a768
  Attack MD5:        b705d0458f62c6142becb1b7dfc564ab
  Combined MD5:      3629327df5949c805be8d6b1e5fec8d4

FAILURE DETAILS:
  Reason:            ERROR: Base file should remain unchanged


STDOUT:
  ERROR: Base file should remain unchanged

ORIGINAL TEST DESCRIPTION:
  Test 9: Multiple versions work correctly (v1, v2, v3, v4, v5)
  Verifies that multiple versions can be created and accessed

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: umo204)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
# 
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# _versions = {}
# _open_files = set()
# _created_originals = []
# 
# def _is_explicit_version(name):
#     idx = name.rfind(".v")
#     if idx == -1:
#         return False
#     suffix = name[idx+2:]
#     if suffix == "":
#         return False
#     for c in suffix:
#         if not ('0' <= c <= '9'):
#             return False
#     return idx > 0
# 
# def _original_from_name(name):
#     if _is_explicit_version(name):
#         idx = name.rfind(".v")
#         return name[:idx]
#     return name
# 
# def _ensure_versions_initialized_from_underlying(orig):
#     if orig in _versions:
#         return
#     underlying = listfiles()
#     matches = []
#     for fname in underlying:
#         if _original_from_name(fname) == orig:
#             matches.append(fname)
#     def version_index(fname):
#         if fname == orig:
#             return 0
#         idx = fname.rfind(".v")
#         try:
#             return int(fname[idx+2:])
#         except:
#             return 0
#     matches.sort(key=version_index)
#     if matches:
#         _versions[orig] = matches[:]
#     else:
#         if orig in _created_originals:
#             _versions[orig] = [orig]
# 
# def _latest_name(orig):
#     if orig not in _versions:
#         return None
#     return _versions[orig][-1]
# 
# class VMFile():
#     def __init__(self, real_filename, create_flag):
#     # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#     # (Incomplete: does not handle further versions like v2, v3, etc.)
#         self._name = real_filename
#         self._orig = _original_from_name(real_filename)
#         self._underlying = openfile(real_filename, create_flag)
# 
#     def readat(self, num_bytes, offset):
#         return self._underlying.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         latest = _latest_name(self._orig)
#         if latest is None:
#             raise FileInUseError("No writable version exists")
#         if self._name != latest:
#             raise FileInUseError("Cannot write to older versions")
#         return self._underlying.writeat(data, offset)
# 
#     def close(self):
#         try:
#             return self._underlying.close()
#         finally:
#             if self._name in _open_files:
#                 _open_files.remove(self._name)
# 
# def _open_exact_and_bookkeep(real_name, createflag):
#     if real_name in _open_files:
#         raise FileInUseError("File already in use")
#     _open_files.add(real_name)
#     try:
#         vmf = VMFile(real_name, createflag)
#         return vmf
#     except Exception:
#         if real_name in _open_files:
#             _open_files.remove(real_name)
#         raise
# 
# def LPopenfile(filename, create):
#     if create and _is_explicit_version(filename):
#         raise RepyArgumentError("Cannot create explicit version files")
#     if _is_explicit_version(filename):
#         underlying = listfiles()
#         if filename not in underlying:
#             raise FileNotFoundError("Version does not exist")
#         orig = _original_from_name(filename)
#         if orig not in _versions:
#             _ensure_versions_initialized_from_underlying(orig)
#             if orig not in _versions:
#                 _versions[orig] = [filename]
#         return _open_exact_and_bookkeep(filename, False)
#     orig = filename
#     if create:
#         exists = False
#         if orig in _versions:
#             exists = True
#         else:
#             underlying = listfiles()
#             for fname in underlying:
#                 if _original_from_name(fname) == orig:
#                     exists = True
#                     break
#         if not exists:
#             _versions.setdefault(orig, []).append(orig)
#             if orig not in _created_originals:
#                 _created_originals.append(orig)
#             return _open_exact_and_bookkeep(orig, True)
#         else:
#             _ensure_versions_initialized_from_underlying(orig)
#             if orig not in _versions:
#                 _versions.setdefault(orig, [orig])
#                 if orig not in _created_originals:
#                     _created_originals.append(orig)
#             latest = _latest_name(orig)
#             if latest in _open_files:
#                 raise FileInUseError("Cannot create a new version while latest is open")
#             next_index = 1
#             if latest == orig:
#                 next_index = 1
#             else:
#                 idx = latest.rfind(".v")
#                 try:
#                     next_index = int(latest[idx+2:]) + 1
#                 except:
#                     next_index = len(_versions[orig])
#             new_name = orig + ".v" + str(next_index)
#             content = ""
#             try:
#                 src = openfile(latest, False)
#                 try:
#                     content = src.readat(None, 0)
#                 finally:
#                     src.close()
#             except Exception:
#                 content = ""
#             _versions[orig].append(new_name)
#             if orig not in _created_originals:
#                 _created_originals.append(orig)
#             fnew = _open_exact_and_bookkeep(new_name, True)
#             if content:
#                 fnew.writeat(content, 0)
#             return fnew
#     else:
#         if orig not in _versions:
#             _ensure_versions_initialized_from_underlying(orig)
#             if orig not in _versions:
#                 raise FileNotFoundError("File not found")
#         latest = _latest_name(orig)
#         if latest is None:
#             raise FileNotFoundError("File not found")
#         if latest in _open_files:
#             raise FileInUseError("File already in use")
#         return _open_exact_and_bookkeep(latest, False)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("File deletion is not allowed")
# 
# def LPlistfiles():
#     underlying = listfiles()
#     originals = []
#     seen = set()
#     for fname in underlying:
#         orig = _original_from_name(fname)
#         if orig not in seen:
#             seen.add(orig)
#             originals.append(orig)
#     for orig in _created_originals:
#         if orig not in seen:
#             seen.add(orig)
#             originals.append(orig)
#     return originals
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile9", True)
f1.writeat("Base", 0)
f1.close()

# Create versions v1 through v5
for i in range(1, 6):
    fx = openfile("testfile9", True)
    content = fx.readat(None, 0)
    fx.writeat("V" + str(i), len(content))
    fx.close()

# Verify base file still has original content (immutable)
f2 = openfile("testfile9", False)
content = f2.readat(None, 0)
if content != "Base":
    log("ERROR: Base file should remain unchanged\n")
    exitall()
f2.close()

# Verify latest version (v5) has all accumulated content
f3 = openfile("testfile9.v5", False)
content = f3.readat(None, 0)
if "BaseV1V2V3V4V5" not in content:
    log("ERROR: Latest version should accumulate all changes\n")
    exitall()
f3.close()

