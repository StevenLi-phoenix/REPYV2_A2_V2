"""
==============================================================================
ATTACK CASE: nm5029_attackcase3.r2py
==============================================================================
Target NetID:        nm5029
Original Test:       test04_immutable_old_versions.r2py
Test File Path:      submit/general_tests/test04_immutable_old_versions.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3863
  Task UUID:         a28c18c3-8996-4a28-a0fc-53b40009acf5
  Machine Type:      Standard_D4s_v3
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:25:44.110048
  End Time:          2025-10-27T19:25:47.688917
  Runtime:           3.5789 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       26096e99aa412f89b438fe98ccbcd384
  Attack MD5:        9b7d716d61c8c7daa6399db16d01b176
  Combined MD5:      dc2f30b415ccf7a05987e2af18e1e154

FAILURE DETAILS:
  Reason:            ERROR: Should not allow writing to old version


STDOUT:
  ERROR: Should not allow writing to old version

ORIGINAL TEST DESCRIPTION:
  Test 4: Cannot write to old versions
  Verifies immutability is enforced after closing files

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: nm5029)
# ============================================================================
# # Versioned and Immutable Reference Monitor
# TYPE = "type"; ARGS = "args"; RETURN = "return"; EXCP = "exceptions"
# TARGET = "target"; FUNC = "func"; OBJC = "objc"
# 
# # State
# vers = {}        # { base -> latest int }
# open_set = set() # files currently open
# bases = set()    # basenames to show in listfiles()
# 
# # Global lock
# lock = createlock()
# 
# # Helpers
# def parse(name):
#   if ".v" not in name:
#     return name, None
#   parts = name.rsplit(".v", 1)
#   base = parts[0]
#   suf = parts[1]
#   if base == "":
#     return name, None
#   if not suf.isdigit():
#     return name, None
#   if len(suf) > 1 and suf[0] == "0":
#     return name, None
#   v = int(suf)
#   if v >= 1:
#     return base, v
#   return name, None
# 
# def latest(base):
#   if base in vers:
#     return vers[base]
#   return None
# 
# def realname(base, v):
#   if v == 0:
#     return base
#   return base + ".v" + str(v)
# 
# class VMFile(object):
#   def __init__(self, name, create):
#     base, v = parse(name)
# 
#     lock.acquire(True)
#     try:
#       if create and v is not None:
#         raise RepyArgumentError("Cannot create explicit version files")
# 
#       cur = latest(base)
# 
#       if v is None:
#         if create:
#           if cur is None:
#             rn = realname(base, 0)
#             f = openfile(rn, True)
#             vers[base] = 0
#             bases.add(base)
#             self._base = base; self._ver = 0; self._rn = rn; self._f = f
#             open_set.add(rn)
#             return
# 
#           rn_prev = realname(base, cur)
#           if rn_prev in open_set:
#             raise FileInUseError("Cannot create new version while latest is open")
#           newv = cur + 1
#           rn_new = realname(base, newv)
#           dst = openfile(rn_new, True)
#           src = openfile(rn_prev, False)
# 
#           CHUNK = 4096
#           off = 0
#           while True:
#             data = src.readat(CHUNK, off)
#             if not data:
#               break
#             dst.writeat(data, off)
#             off = off + len(data)
# 
#           src.close()
#           vers[base] = newv
#           bases.add(base)
#           self._base = base; self._ver = newv; self._rn = rn_new; self._f = dst
#           open_set.add(rn_new)
#           return
# 
#         if cur is None:
#           raise FileNotFoundError("No such file: " + base)
#         rn_lat = realname(base, cur)
#         if rn_lat in open_set:
#           raise FileInUseError("File is already open: " + rn_lat)
#         f = openfile(rn_lat, False)
#         self._base = base; self._ver = cur; self._rn = rn_lat; self._f = f
#         open_set.add(rn_lat)
#         return
# 
#       if create:
#         raise RepyArgumentError("Cannot create explicit version files")
#       if cur is None or v <= 0 or v > cur:
#         raise FileNotFoundError("No such version: " + name)
#       rn = realname(base, v)
#       if rn in open_set:
#         raise FileInUseError("File is already open: " + rn)
#       f = openfile(rn, False)
#       self._base = base; self._ver = v; self._rn = rn; self._f = f
#       open_set.add(rn)
#     finally:
#       lock.release()
# 
#   def readat(self, nbytes, offset):
#     return self._f.readat(nbytes, offset)
# 
#   def writeat(self, data, offset):
#     lock.acquire(True)
#     try:
#       cur = latest(self._base)
#       if cur is None:
#         raise FileNotFoundError("No such file: " + self._base)
#       if self._ver != cur:
#         raise FileInUseError("Cannot write to an immutable (old) version")
#       return self._f.writeat(data, offset)
#     finally:
#       lock.release()
# 
#   def close(self):
#     try:
#       return self._f.close()
#     finally:
#       lock.acquire(True)
#       try:
#         if self._rn in open_set:
#           open_set.remove(self._rn)
#       finally:
#         lock.release()
# 
# def LPopenfile(filename, create):
#   return VMFile(filename, create)
# 
# def LPremovefile(filename):
#   raise RepyArgumentError("removefile is disabled for versioned/immutable files")
# 
# def LPlistfiles():
#   lock.acquire(True)
#   try:
#     return list(bases)
#   finally:
#     lock.release()
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile4", True)
f1.writeat("Original", 0)
f1.close()

f2 = openfile("testfile4", True)
f2.writeat("NewVersion", 0)
f2.close()

# Try to open and write to the base version (now immutable)
f3 = openfile("testfile4", False)
try:
    f3.writeat("Hack", 0)
    log("ERROR: Should not allow writing to old version\n")
    exitall()
except FileInUseError:
    pass
f3.close()

