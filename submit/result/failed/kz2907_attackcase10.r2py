"""
==============================================================================
ATTACK CASE: kz2907_attackcase10.r2py
==============================================================================
Target NetID:        kz2907
Original Test:       test14_offset_writes.r2py
Test File Path:      submit/general_tests/test14_offset_writes.r2py

RUNNER INFORMATION:
  Runner ID:         runner-6358
  Task UUID:         96adfe8b-84b0-458e-bdec-61d5487913d5
  Machine Type:      t3.medium
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:58.215815
  End Time:          2025-10-27T19:24:03.971967
  Runtime:           5.7562 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       3973c51ce5f3fdcea4ea6762593038bb
  Attack MD5:        7bfa3cf4af9d4fc392c6c7a0cf6750ba
  Combined MD5:      940dc74a266026c6b36d169442b1eb8e

FAILURE DETAILS:
  Reason:            ERROR: Content with large offset should be preserved


STDOUT:
  ERROR: Content with large offset should be preserved

ORIGINAL TEST DESCRIPTION:
  Test 14: Large offset writes
  Verifies that data written at large offsets is preserved across versions

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: kz2907)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# 
# original_openfile = openfile
# original_removefile = removefile  
# original_listfiles = listfiles
# 
# immutable_files = set() 
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# MAX_VERSIONS_PER_FILE = 100
# 
# class VMFile():
#     def __init__(self, filename, create):
#         self.filename = filename 
#         self.creating_version = False
# 
#         if create:
#             if self.is_versioned_fname(filename):
#                 raise Exception("Cannot create versioned files directly")
# 
#             self.creating_version = True
#             if filename in original_listfiles():
#                 existing_versions = self.get_all_versions(filename)
# 
#                 if existing_versions:
#                     next_version = max(existing_versions) + 1
# 
#                 else:
#                     next_version = 2
#                 if next_version > MAX_VERSIONS_PER_FILE:
#                     raise Exception("Too many versions")
#                 version_name = filename + '.v' + str(next_version)
#                 
#                 self.VMfile = original_openfile(version_name, True)
#                 self.filename = version_name
#                 self.is_base_file = False
#                 
#             else:
#                 # New file
#                 self.creating_version = False
#                 self.VMfile = original_openfile(filename, True)
#                 self.filename = filename
#                 self.is_base_file = True
#         else:
#             # Open existing (could be original or version)
#             self.VMfile = original_openfile(filename, False)
#             self.filename = filename
# 
#     def is_versioned_fname(self, filename):
#         if self.creating_version:
#             return False
# 
#         if ".v" in filename:
#             parts = filename.split(".v", 1)
#             if len(parts) == 2 and parts[1].isdigit():
#                 return True
#         return False
#     
#     def get_all_versions(self, filename):
#         files = original_listfiles()
#         versions = []
# 
#         if filename in files:
#             versions.append(1)
#         for file in files:
#             if file.startswith(filename + '.v'):
#                 try:
#                     version_num = int(file.split('.v')[-1])
#                     versions.append(version_num)
#                 except ValueError:
#                     pass
# 
#         return versions 
#                 
#                 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if self.filename in immutable_files:
#             raise Exception("Cannot write to immutable file: " + str(self.filename))
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
#         if self.creating_version:
#             immutable_files.add(self.filename)
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise Exception("Cannot remove immutable file")
# 
# def LPlistfiles():
#     return original_listfiles()
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

f1 = openfile("testfile14", True)
f1.writeat("Start", 0)
# Fill the gap with spaces to avoid SeekPastEndOfFileError
f1.writeat(" " * 95, 5)
f1.writeat("End", 100)
f1.close()

f2 = openfile("testfile14", True)
content = f2.readat(None, 0)
if len(content) < 103:
    log("ERROR: Content with large offset should be preserved\n")
    exitall()
if content[100:103] != "End":
    log("ERROR: Data at offset should be preserved\n")
    exitall()
f2.close()

