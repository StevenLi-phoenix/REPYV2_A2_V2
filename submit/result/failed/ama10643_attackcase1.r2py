"""
==============================================================================
ATTACK CASE: ama10643_attackcase1.r2py
==============================================================================
Target NetID:        ama10643
Original Test:       test03_no_explicit_version.r2py
Test File Path:      submit/general_tests/test03_no_explicit_version.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3479
  Task UUID:         35fa69b2-e59e-4b65-a107-4192440872fd
  Machine Type:      Standard_D4s_v3
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:19:08.065700
  End Time:          2025-10-27T19:19:11.298119
  Runtime:           3.2324 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       d3924293069449c47f3ea7a499b16f9f
  Attack MD5:        0b741119a5b52397192943ffa568e39b
  Combined MD5:      7b9aa66a31429823cab4707e323a6e70

FAILURE DETAILS:
  Reason:            ERROR: Should not allow explicit version creation


STDOUT:
  ERROR: Should not allow explicit version creation

ORIGINAL TEST DESCRIPTION:
  Test 3: Cannot create explicit version files
  Verifies that users cannot directly create files with version pattern (e.g., file.v5)

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: ama10643)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
# 
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# 
# class VMFile():
# 
#     def __init__(self, filename, create):
#         self.in_use = False ##flag I will trigger it to true if file open
#         # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
#         if create:
#             if filename in listfiles():
#                 if ".v" in filename:
#                     position_of_v_char = filename.find(".v")
#                     if len(filename) > (position_of_v_char+2):##This is to make sure that what is after the character v is int as per specification
#                         char_after_v_char = filename[position_of_v_char+2]
#                         if char_after_v_char.isdigit():
#                             raise RepyArgumentError("Cannot create explicit version files")
# 
#                 ##check its version:
#                 version= True #there exist at least one version of the file
#                 count_version=0 #to count how many version exist
#                 temp_name="" #evantually will contain the file name of the new version
#                 while version:
#                     count_version=count_version+1
#                     temp_name=filename+".v"+str(count_version)
#                     if temp_name in listfiles():
#                         version=True
#                     else:
#                         version=False
#                 # File exists → create next version
#                 last_version=count_version-1
#                 if last_version>0:
#                     last_version_filename = filename + ".v" + str(last_version)
#                 else:
#                     last_version_filename = filename
# 
#                 prev_file = openfile(last_version_filename, False)
# 
#                 content = prev_file.readat(None, 0)
# 
#                 new_name = temp_name
#                 self.VMfile = openfile(new_name, True)
#                 self.VMfile.writeat(content, 0)
#             else:
#                 # File doesn't exist → create filename
#                 self.VMfile = openfile(filename, True)
#         else:
#             # Open existing file normally, but check if it is exist first
# 
#             if filename not in listfiles():
#                 raise FileNotFoundError("File not found")
# 
# 
#             self.VMfile = openfile(filename, False)
#             self.in_use = True
# 
# 
#     def readat(self, num_bytes, offset):
# 
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
# 
#         if self.in_use == True:
#             raise FileInUseError("FileInUseError")
# 
#         return self.VMfile.writeat(data, offset)
# 
#     def close(self):
# 
#         return self.VMfile.close()
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# 
# def LPremovefile(filename):
#     raise RepyArgumentError
#     removefile(filename)
# 
# 
# def LPlistfiles():
#     files= listfiles()
#     files_to_show=[]
#     for filename in files:
#         if ".v" in filename:
#             position_of_v_char = filename.find(".v")
#             if len(filename) > (position_of_v_char + 2):  ##This is to make sure that what is after the character v is int as per specification
#                 char_after_v_char = filename[position_of_v_char + 2]
#                 if char_after_v_char.isdigit():
#                     continue
#         files_to_show.append(filename)
# 
#     return files_to_show
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)),
#                 "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str,
#                "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)),
#               "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

try:
    f1 = openfile("testfile3.v5", True)
    log("ERROR: Should not allow explicit version creation\n")
    exitall()
except RepyArgumentError:
    pass

