"""
==============================================================================
ATTACK CASE: jq2272_attackcase11.r2py
==============================================================================
Target NetID:        jq2272
Original Test:       test20_immutability_enforcement.r2py
Test File Path:      submit/general_tests/test20_immutability_enforcement.r2py

RUNNER INFORMATION:
  Runner ID:         runner-3551
  Task UUID:         b6aef756-f0ce-4047-8791-8a7bfffefa8d
  Machine Type:      c5.xlarge
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:01.084999
  End Time:          2025-10-27T19:23:06.436706
  Runtime:           5.3517 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       7b90093b5809c3311fe378778bf483ec
  Attack MD5:        b2a8ad98a6911bcd1c0c5534521a675b
  Combined MD5:      ad36a6625e61b7d0f5ae49f953a21b91

FAILURE DETAILS:
  Reason:            ERROR: Should not be able to write to old version


STDOUT:
  ERROR: Should not be able to write to old version

ORIGINAL TEST DESCRIPTION:
  Targets: sa9082, wjl9629, hl5031
  Vulnerability: Immutability not properly enforced across edge cases
  Attack: Test immutability with various file opening patterns and edge case names

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jq2272)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
#     
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"  
# OBJC = "objc"
# 
# # parses a given filename and returns a tuple (name: str, version: int)
# # version will be 0 if a version number is not specified
# def parse_name(filename):
#     splitted = filename.split('.');
# 
#     # does not have a version number
#     if (len(splitted) == 1):
#         return (filename, 0);
# 
#     tail = splitted[-1];
#     if (len(tail) > 0 and tail[0] == 'v'):
#         # trailing part might be a version number
#         try:
#             version = int(tail[1:]);
#             if (version > 0):
#                 # valid version number
#                 return ("".join(filename[:-1]), version);
#             else:
#                 return (filename, 0);
#         except:
#             # not a valid version number
#             return (filename, 0);
#     else:
#         # trailing part is not a version number
#         return (filename, 0);
# 
# class VMFile():
#     def __init__(self, filename, create):
#         name, version = parse_name(filename);
#         self.writeable = True;
#         self.lockfile = None;
# 
#         # look for next version number
#         filelist = listfiles();
# 
#         new_version = 1;
#         while ((name + ".v" + str(new_version)) in filelist):
#             new_version += 1;
# 
#         if (version == 0):
#             # no version number provided
#             if (create):
#                 self.file = openfile(name + ".v" + str(new_version), True);
#             else:
#                 self.file = openfile(name + ".v" + str(new_version - 1), False);
# 
#             # check for lockfile
#             if ((name + ".v0" in filelist)):
#                 # lockfile present, cannot open
#                 raise FileInUseError;
#         else:
#             # version number given
#             try:
#                 self.file = openfile(filename, False);
#                 self.writeable = False;
#             except FileNotFoundError:
#                 raise RepyArgumentError("Cannot create explicit version files");
# 
#         # create lockfile
#         if (self.writeable):
#             self.lockfile = name + ".v0";
#             openfile(self.lockfile, True).close();
# 
#     def readat(self, num_bytes, offset):
#         return self.file.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         if (not self.writeable):
#             raise FileInUseError("Cannot write to old versions");
#         return self.file.writeat(data, offset)
# 
#     def close(self):
#         if (self.lockfile):
#             removefile(self.lockfile);
#         return self.file.close();
# 
# 
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     raise RepyArgumentError("Cannot delete files");
# 
# def LPlistfiles():
#     res = set();
#     for filename in listfiles():
#         res.add(parse_name(filename)[0]);
#     return list(res);
# 
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# 
# ============================================================================

# Test 1: Basic immutability
f = openfile("immutable", True)
f.writeat("v0", 0)
f.close()

# Create version
f = openfile("immutable", True)
f.writeat("v1", 0)
f.close()

# Try to open base and write (should fail - it's an old version)
try:
    fold = openfile("immutable", False)
    try:
        fold.writeat("hack", 0)
        log("ERROR: Should not be able to write to old version\n")
        exitall()
    except FileInUseError:
        # Expected
        pass
    fold.close()
except FileNotFoundError:
    pass

# Test 2: Edge case filename
f2 = openfile("normal", True)
f2.writeat("test", 0)
f2.close()

# Version it
f3 = openfile("normal", True)
content = f3.readat(None, 0)
if content != "test":
    log("ERROR: Version should copy content\n")
    exitall()
f3.close()

# Verify listfiles
files = listfiles()
if "normal" not in files:
    log("ERROR: Base file should be in listfiles\n")
    exitall()
if "normal.v1" in files:
    log("ERROR: Version should not be in listfiles\n")
    exitall()
