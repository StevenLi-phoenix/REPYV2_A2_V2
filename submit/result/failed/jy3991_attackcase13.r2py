"""
==============================================================================
ATTACK CASE: jy3991_attackcase13.r2py
==============================================================================
Target NetID:        jy3991
Original Test:       test15_sequential_ops.r2py
Test File Path:      submit/general_tests/test15_sequential_ops.r2py

RUNNER INFORMATION:
  Runner ID:         runner-1290
  Task UUID:         7e1c6d48-c7a0-4927-ac10-b3bc0cc37dac
  Machine Type:      m5.large
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:23:20.407905
  End Time:          2025-10-27T19:23:25.740725
  Runtime:           5.3328 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       8dc6f3e89499277bfe1eea7f2a1a46b2
  Attack MD5:        d0584f68fecf13199f2537c0dfd9b8ab
  Combined MD5:      2e34915a5b906473bb8174419db61135

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 216, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 8, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 130, in writeat
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 216, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 8, in <module>
    "VMFile wrapper class", line 3, in writeat
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 130, in writeat
  Exception (with type 'exceptions.Exception'): Write denied: version immutable: testfile15
  ---

ORIGINAL TEST DESCRIPTION:
  Test 15: Sequential read/write operations
  Verifies that sequential writes work correctly

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: jy3991)
# ============================================================================
# """
# This security layer inadequately handles the Versioned and Immutable functionality
# 
# Note:
#     This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
#     Also you need to give it an application to run.
#     python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
# 
# """
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# _real_openfile   = openfile
# _real_listfiles  = listfiles
# _real_removefile = removefile
# # -----------------------------------------------------------------------------------------
# 
# _file_versions = {}              # base -> [actual versioned names in creation order]
# _immutable_versions = set()      # set of version filenames that are immutable
# 
# # returns (base, versionnum) if "name.vN" else (name, None)
# def _is_versioned_name(name):
#     if name.rfind(".v") != -1:
#         base, maybe = name.rsplit(".v", 1)
#         if maybe.isdigit():
#             return base, int(maybe)
#     return name, None
# 
# # return next version filename for base (base.vN)
# def _next_version_name(base):
#     lst = _file_versions.get(base, [])
#     if not lst:
#         return base
#     maxv = 0
#     for fname in lst:
#         b, v = _is_versioned_name(fname)
#         if v is not None and v > maxv:
#             maxv = v
#     nextv = maxv + 1
#     return base + ".v" + str(nextv)
# 
# def _register_version(base, actual_name):
#     lst = _file_versions.get(base)
#     if lst is None:
#         _file_versions[base] = [actual_name]
#     else:
#         lst.append(actual_name)
# 
# def _get_latest_for_base(base):
#     lst = _file_versions.get(base, [])
#     if not lst:
#         return None
#     return lst[-1]
# 
# # VMFile wrapper with immutability and versioning
# class VMFile(object):
#     def __init__(self, filename, create):
#         """
#         filename: provided name
#         create: boolean that create a new writable
#         Behavior:
#           create is True:
#               if base doesn't exist anywhere, create base name, register it
#               if base exists, create new version "base.vN" and open that for writing
#           create is False:
#                open the latest version (or the specific version) read-only
#         """
#         base, ver = _is_versioned_name(filename)
# 
#         if create:
#             if ver is not None:
#                 # Creating with explicit version name; allow and register
#                 self.actual_name = filename
#                 self.VMfile = _real_openfile(self.actual_name, True)
#                 _register_version(base, self.actual_name)
#             else:
#                 curr_files = _real_listfiles()
#                 if base not in _file_versions and base not in curr_files:
#                     self.actual_name = base
#                     self.VMfile = _real_openfile(self.actual_name, True)
#                     _register_version(base, self.actual_name)
#                 else:
#                     nextname = _next_version_name(base)
#                     if nextname == base:           # safety: ensure we pick .v1 if registry is empty
#                         nextname = base + ".v1"
#                     self.actual_name = nextname
#                     self.VMfile = _real_openfile(self.actual_name, True)
#                     _register_version(base, self.actual_name)
#         else:
#             if ver is not None:
#                 self.actual_name = filename
#                 self.VMfile = _real_openfile(self.actual_name, False)
#             else:
#                 latest = _get_latest_for_base(base)
#                 if latest is None:
#                     curr_files = _real_listfiles()
#                     if base in curr_files:
#                         self.actual_name = base
#                     else:
#                         # find highest .vN on disk
#                         candidate = None
#                         maxv = -1
#                         for cf in curr_files:
#                             b, v = _is_versioned_name(cf)
#                             if b == base and v is not None and v > maxv:
#                                 candidate = cf
#                                 maxv = v
#                         if candidate is not None:
#                             self.actual_name = candidate
#                         else:
#                             # nothing found - try base (underlying may raise)
#                             self.actual_name = base
#                 else:
#                     self.actual_name = latest
#                 self.VMfile = _real_openfile(self.actual_name, False)
# 
#         self._has_been_written = False
# 
#     def readat(self, num_bytes, offset):
#         return self.VMfile.readat(num_bytes, offset)
# 
#     def writeat(self, data, offset):
#         # policy: deny writes if this version is already marked immutable
#         if self.actual_name in _immutable_versions:
#             raise Exception("Write denied: version immutable: " + self.actual_name)
#         rv = self.VMfile.writeat(data, offset)
#         self._has_been_written = True
#         # mark immutable after first write
#         _immutable_versions.add(self.actual_name)
#         return rv
# 
#     def close(self):
#         return self.VMfile.close()
# 
# # Exported helper wrappers used by CHILD_CONTEXT_DEF
# def LPopenfile(filename, create):
#     return VMFile(filename, create)
# 
# # remove a specific version or all versions for the base
# def LPremovefile(filename):
#     base, ver = _is_versioned_name(filename)
#     if ver is not None:
#         _real_removefile(filename)
#         if base in _file_versions:
#             try:
#                 _file_versions[base].remove(filename)
#             except ValueError:
#                 pass
#             if not _file_versions[base]:
#                 _file_versions.pop(base, None)
#         _immutable_versions.discard(filename)
#     else:
#         versions = list(_file_versions.get(base, []))
#         if not versions:
#             # discover from disk as fallback
#             for f in _real_listfiles():
#                 b, v = _is_versioned_name(f)
#                 if b == base:
#                     versions.append(f)
#         for vname in versions:
#             try:
#                 _real_removefile(vname)
#             except Exception:
#                 pass
#             _immutable_versions.discard(vname)
#         _file_versions.pop(base, None)
# 
# # list unique base names (for clarity)
# def LPlistfiles():
#     bases = set(_file_versions.keys())
#     for f in _real_listfiles():
#         base, ver = _is_versioned_name(f)
#         bases.add(base)
#     return sorted(list(bases))
# 
# # The code below sets up type checking and variable hiding for you.
# # You should not change anything below this point.
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: [str],
#     TARGET: LPlistfiles
# }
# 
# # Execute the user code
# secure_dispatch_module()
# ============================================================================

f1 = openfile("testfile15", True)
f1.writeat("AAAA", 0)
f1.writeat("BBBB", 4)
f1.writeat("CCCC", 8)
content = f1.readat(12, 0)
if content != "AAAABBBBCCCC":
    log("ERROR: Sequential writes should work\n")
    exitall()
f1.close()

