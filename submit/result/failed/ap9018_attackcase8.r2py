"""
==============================================================================
ATTACK CASE: ap9018_attackcase8.r2py
==============================================================================
Target NetID:        ap9018
Original Test:       test19_concurrent_operations.r2py
Test File Path:      submit/general_tests/test19_concurrent_operations.r2py

RUNNER INFORMATION:
  Runner ID:         runner-6357
  Task UUID:         0d6c8b09-b874-4714-937d-54aece140b21
  Machine Type:      Standard_D4s_v3
  Execution Server:  http://100.88.83.27:8000

EXECUTION INFORMATION:
  Status:            FAILED
  Start Time:        2025-10-27T19:19:34.097599
  End Time:          2025-10-27T19:19:39.655867
  Runtime:           5.5583 seconds
  Exit Code:         143

FILE HASHES:
  Monitor MD5:       be589d490cebbb981747691e2cda3e82
  Attack MD5:        8143de6ae6a73bfd42f8007901f5d459
  Combined MD5:      5bdc6d1630f923c29036a479a3112b7a

FAILURE DETAILS:
  Reason:            ---
Uncaught exception!
---
Following is a full traceback, and a user traceback.
The user traceback 

STDOUT:
  ---
  Uncaught exception!
  ---
  Following is a full traceback, and a user traceback.
  The user traceback excludes non-user modules. The most recent call is displayed last.
  Full debugging traceback:
    "/app/repy.py", line 134, in execute_namespace_until_completion
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "monitor.r2py", line 140, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "/app/namespace.py", line 957, in __do_func_call
    "/app/namespace.py", line 1219, in wrapped_function
    "/app/virtual_namespace.py", line 116, in evaluate
    "/app/safe.py", line 610, in safe_run
    "attack.r2py", line 25, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 94, in LPopenfile
  User traceback:
    "/app/encasementlib.r2py", line 240, in <module>
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "monitor.r2py", line 140, in <module>
    "/app/encasementlib.r2py", line 175, in _secure_dispatch_closure
    "/app/encasementlib.r2py", line 225, in secure_dispatch
    "attack.r2py", line 25, in <module>
    "wrapper.r2py", line 255, in _wrapped_objc
    "wrapper.r2py", line 202, in _wrapped_func
    "monitor.r2py", line 94, in LPopenfile
  Exception (with type 'exceptions.Exception'): bad filename
  ---

ORIGINAL TEST DESCRIPTION:
  Target: ds8282
  Vulnerability: Cannot open multiple different versions for reading simultaneously
  Attack: Open different versions for reading at the same time

==============================================================================
"""

# ============================================================================
# REFERENCE MONITOR CODE (Target: ap9018)
# ============================================================================
# # My reference monitor
# # immutable version one
# # reads from .a, writes to .b
# # on close, copies b to a only if content starts with S and ends with E
# 
# TYPE = "type"
# ARGS = "args"
# RETURN = "return"
# EXCP = "exceptions"
# TARGET = "target"
# FUNC = "func"
# OBJC = "objc"
# 
# # helper fn to check filename
# def okname(name):
#     if not name:
#         return False
#     for c in name:
#         if not (c.islower() or c.isdigit()):
#             return False
#     if "." in name:
#         return False
#     return True
# 
# class VMFile:
#     def __init__(self, filename, create):
#         # base and copies
#         self.base = filename
#         self.a = filename + ".a"
#         self.b = filename + ".b"
#         self.lock = createlock()
#         self.closed = False
# 
#         # if file exists make copy, else make new one
#         if create:
#             if self.a in listfiles():
#                 self.afile = openfile(self.a, False)
#                 self.bfile = openfile(self.b, True)
#                 data = self.afile.readat(None, 0)
#                 if data:
#                     self.bfile.writeat(data, 0)
#             else:
#                 self.afile = openfile(self.a, True)
#                 self.bfile = openfile(self.b, True)
#                 self.afile.writeat("SE", 0)
#         else:
#             self.afile = openfile(self.a, False)
#             self.bfile = openfile(self.b, True)
#             data = self.afile.readat(None, 0)
#             if data:
#                 self.bfile.writeat(data, 0)
# 
#     # always read from a
#     def readat(self, n, off):
#         return self.afile.readat(n, off)
# 
#     # always write to b
#     def writeat(self, data, off):
#         if self.closed:
#             raise Exception("file closed")
#         return self.bfile.writeat(data, off)
# 
#     # close and maybe copy
#     def close(self):
#         self.lock.acquire(True)
#         try:
#             if self.closed:
#                 return
#             stuff = self.bfile.readat(None, 0)
#             good = False
#             if stuff and len(stuff) >= 2:
#                 if stuff[0] == "S" and stuff[-1] == "E":
#                     good = True
#             if good:
#                 try:
#                     self.afile.close()
#                 except:
#                     pass
#                 self.afile = openfile(self.a, True)
#                 self.afile.writeat(stuff, 0)
#             try:
#                 self.bfile.close()
#             finally:
#                 try:
#                     self.afile.close()
#                 finally:
#                     self.closed = True
#         finally:
#             self.lock.release()
# 
# # wrapper funcs
# def LPopenfile(filename, create):
#     if not okname(filename):
#         raise Exception("bad filename")
#     if filename.endswith(".a") or filename.endswith(".b"):
#         raise Exception("bad name ext")
#     return VMFile(filename, create)
# 
# def LPremovefile(filename):
#     removefile(filename)
# 
# def LPlistfiles():
#     return listfiles()
# 
# 
# 
# 
# sec_file_def = {
#     "obj-type": VMFile,
#     "name": "VMFile",
#     "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
#     "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
#     "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
# }
# 
# CHILD_CONTEXT_DEF["openfile"] = {
#     TYPE: OBJC,
#     ARGS: (str, bool),
#     EXCP: Exception,
#     RETURN: sec_file_def,
#     TARGET: LPopenfile
# }
# 
# CHILD_CONTEXT_DEF["removefile"] = {
#     TYPE: FUNC,
#     ARGS: (str,),
#     EXCP: Exception,
#     RETURN: type(None),
#     TARGET: LPremovefile
# }
# 
# CHILD_CONTEXT_DEF["listfiles"] = {
#     TYPE: FUNC,
#     ARGS: None,
#     EXCP: Exception,
#     RETURN: list,
#     TARGET: LPlistfiles
# }
# 
# secure_dispatch_module()
# 
# ============================================================================

# Create base file and multiple versions
f = openfile("multi", True)
f.writeat("v0", 0)
f.close()

f = openfile("multi", True)
f.writeat("v1", 0)
f.close()

f = openfile("multi", True)
f.writeat("v2", 0)
f.close()

# Try to open base and v1 simultaneously for reading
# Per spec, reading old versions should be allowed
try:
    fbase = openfile("multi", False)
    try:
        fv1 = openfile("multi.v1", False)
        # Should be able to read from both
        c1 = fbase.readat(None, 0)
        c2 = fv1.readat(None, 0)
        fv1.close()
    except FileInUseError:
        # Implementation may prevent this but spec doesn't forbid it
        pass
    fbase.close()
except FileNotFoundError:
    # Some implementations may not allow opening old versions
    pass
