"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

opened=set()

def get_base_name(filename):
    """
    Get the base name and version of a file.
    """
    last_dot = filename.rfind('.')
    if last_dot == -1:
        return filename, None
    extension = filename[last_dot+1:]
    if extension[0] == 'v' and extension[1:].isdigit() and (str(int(extension[1:])) == extension[1:]):
        return filename[:last_dot], int(extension[1:])
    else:
        return filename, None

class VMFile():
    def __init__(self, filename, create):
    # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
    # (Incomplete: does not handle further versions like v2, v3, etc.)

        base_name, version = get_base_name(filename)
        self.filename = base_name
        if (version is not None):
            self.version_ext = ".v" + str(version)
        else:
            self.version_ext = ""


        if create:
            if self.filename in opened:
                raise FileInUseError()

            if version is not None:
                raise RepyArgumentError("Cannot create explicit version files")


            if base_name in listfiles():
                version = 1
                files = set(listfiles())
                prev_name = base_name
                new_name = base_name + ".v" + str(version)
                while new_name in files:
                    version += 1
                    prev_name = new_name
                    new_name = base_name + ".v" + str(version)
                # File exists → create version 1
                prev_file = openfile(prev_name, False)
                content = prev_file.readat(None, 0)
                prev_file.close()

                self.VMfile = openfile(new_name, True)
                self.VMfile.writeat(content, 0)
            else:
                # File doesn't exist → create filename
                self.VMfile = openfile(base_name, True)

            opened.add(self.filename)
            self.newest_version = True
            self.writable = True
        else:
            # Open existing file normally
            self.VMfile = openfile(filename, False)
            self.writable = False
            self.newest_version = False

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not self.writable:
            raise FileInUseError("File is not writable: '" + self.filename + self.version_ext + "'")
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.newest_version:
            opened.remove(self.filename)
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File is not allowed to be removed: '" + filename + "'")

def LPlistfiles():
    unversioned_files = []
    for file in listfiles():
        base_name, version = get_base_name(file)
        if version is None:
            unversioned_files.append(file)
    return unversioned_files


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()