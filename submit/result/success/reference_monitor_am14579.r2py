"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

latest_versions = {}
open_files = set()

def _parse_filename(filename):
    try:
        parts = filename.rsplit('.v', 1)
        if len(parts) != 2:
            return filename, None

        base_name, version_str = parts

        if version_str.isdigit() and base_name:
            return base_name, int(version_str)
        else:
            return filename, None
    except (ValueError, TypeError):
        return filename, None

class VMFile():
    def __init__(self, actual_file_obj, full_name, is_immutable):
        self.VMfile = actual_file_obj
        self.full_name = full_name
        self.is_immutable = is_immutable
        open_files.add(self.full_name)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_immutable:
            raise FileInUseError("Cannot write to an older, immutable version")
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.full_name in open_files:
            open_files.remove(self.full_name)
        return self.VMfile.close()

def LPopenfile(filename, create):
    base_name, version_num = _parse_filename(filename)

    if version_num is not None:
        if create:
            raise RepyArgumentError("Cannot create explicit version files")

        if filename in open_files:
            raise FileInUseError("This version of the file is already open")

        file_obj = openfile(filename, False)

        return VMFile(file_obj, filename, is_immutable=True)

    else:
        if create:
            if base_name in latest_versions:
                latest_num = latest_versions[base_name]

                if latest_num == 0:
                    latest_name = base_name
                else:
                    latest_name = base_name + ".v" + str(latest_num)

                if latest_name in open_files:
                    raise FileInUseError("Cannot create new version, latest is still open")

                prev_file = openfile(latest_name, False)
                content = prev_file.readat(None, 0)
                prev_file.close()

                new_num = latest_num + 1
                new_name = base_name + ".v" + str(new_num)
                file_obj = openfile(new_name, True)
                file_obj.writeat(content, 0)

                latest_versions[base_name] = new_num

                return VMFile(file_obj, new_name, is_immutable=False)

            else:
                file_obj = openfile(base_name, True)
                latest_versions[base_name] = 0
                return VMFile(file_obj, base_name, is_immutable=False)

        else:
            if base_name not in latest_versions:
                raise FileNotFoundError("File has not been created through this monitor")

            if filename in open_files:
                raise FileInUseError("File is already open")

            file_obj = openfile(filename, False)

            return VMFile(file_obj, filename, is_immutable=True)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    return list(latest_versions.keys())

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()