"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

files = {}

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        if create:
            found = filename.rfind(".v")
            if found != -1:
                ind = filename.find(".v")
                ind += 2
                if filename[ind:].isdigit():
                    raise RepyArgumentError("Cannot create explicit version files")
            elif filename in listfiles():
                # File exists → create version 1
                try:
                    prev_file = openfile(filename, False)
                    content = prev_file.readat(None, 0)
                    prev_file.close()
                except FileInUseError:
                    raise FileInUseError
                else: 
                    i = files[filename] + 1
                    var = "v{}".format(i)
                    new_name = filename + "." + var
                    files[filename] += 1
                    
                    self.VMfile = openfile(new_name, True)
                    self.VMfile.writeat(content, 0)
            else:
                # File doesn't exist → create filename
                self.VMfile = openfile(filename, True)
                files[filename] = 0
        else:
            # Open existing file normally
            try:
                self.VMfile = openfile(filename, False)
            except FileNotFoundError:
                raise FileNotFoundError

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        found = self.filename.rfind(".v")
        if found != -1:
            ind = self.filename.rfind(".v")
            ind += 2
            if self.filename[ind:].isdigit():
                value = int(self.filename[ind:])
                if value < files[self.filename[:ind-2]]:
                    raise FileInUseError
        
        else:
            if self.filename in files and files[self.filename] > 0:
                raise FileInUseError
            else:
                return self.VMfile.writeat(data, offset)

    def close(self):
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError
    

def LPlistfiles():
    all_files = []
    for file in files.keys():
        all_files.append(file)
    return all_files


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()