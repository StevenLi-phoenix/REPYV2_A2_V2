"""
This security layer handles Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext = {}
mycontext['open_files'] = {} 


class VMFile():
    def __init__(self, filename, create):

        self.filename = filename
        self.is_old_version = False
        

        if '.v' in filename:
            parts = filename.rsplit('.v', 1)
            self.base_name = parts[0]
            try:
                self.version_num = int(parts[1])
                self.is_versioned_file = True
            except:

                self.base_name = filename
                self.version_num = None
                self.is_versioned_file = False
        else:
            self.base_name = filename
            self.version_num = None
            self.is_versioned_file = False
        

        if create:
            if self.is_versioned_file:
                raise RepyArgumentError("Cannot create explicit version files")
            
            if filename in mycontext['open_files']:
                raise FileInUseError("Cannot create new version while latest version is open")
            
            all_files = listfiles()
            
            if filename in all_files:
                
                highest_version = 0
                for f in all_files:
                    if f.startswith(filename + '.v'):
                        try:
                            version_str = f.split('.v')[1]
                            version_num = int(version_str)
                            if version_num > highest_version:
                                highest_version = version_num
                        except:
                            pass
                
                if highest_version > 0:
                    source_filename = filename + '.v' + str(highest_version)
                else:
                    source_filename = filename
                
                src_file = openfile(source_filename, False)
                content = src_file.readat(None, 0)
                src_file.close()
                
                new_version_num = highest_version + 1
                new_filename = filename + '.v' + str(new_version_num)
                
                self.VMfile = openfile(new_filename, True)
                self.VMfile.writeat(content, 0)
                
                self.filename = new_filename
                self.base_name = filename
                self.version_num = new_version_num
                self.is_versioned_file = True
                self.is_old_version = False
                
                mycontext['open_files'][new_filename] = True
                
            else:
                self.VMfile = openfile(filename, True)
                self.is_old_version = False
                mycontext['open_files'][filename] = True
        else:
            all_files = listfiles()
            
            if filename not in all_files:
                raise FileNotFoundError("File does not exist")
            
            self.VMfile = openfile(filename, False)
            
           
            if self.is_versioned_file:
                highest_version = 0
                for f in all_files:
                    if f.startswith(self.base_name + '.v'):
                        try:
                            version_str = f.split('.v')[1]
                            version_num = int(version_str)
                            if version_num > highest_version:
                                highest_version = version_num
                        except:
                            pass
                
                if self.version_num < highest_version:
                    self.is_old_version = True
                else:
                    self.is_old_version = False
            else:
                has_versions = False
                for f in all_files:
                    if f.startswith(filename + '.v'):
                        has_versions = True
                        break
                
                if has_versions:
                    self.is_old_version = True
                else:
                    self.is_old_version = False
            
            mycontext['open_files'][filename] = True

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_old_version:
            raise FileInUseError("Cannot write to versioned files")
        
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.filename in mycontext['open_files']:
            del mycontext['open_files'][self.filename]
        
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    all_files = listfiles()
    
    base_files = []
    seen_bases = {}
    
    for f in all_files:
        if '.v' in f:
            base = f.rsplit('.v', 1)[0]
            if base not in seen_bases:
                seen_bases[base] = True
        else:
            if f not in seen_bases:
                seen_bases[f] = True
    
    for base in seen_bases:
        base_files.append(base)
    
    return base_files


sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

secure_dispatch_module()
