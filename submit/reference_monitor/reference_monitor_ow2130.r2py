"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

def checkValidFileName(name):
    if not name:
        return False
    if len(name) > 120:
        return False
    if name in ('.', '..'):
        return False
    if name[0] == '.':
        return False
    for ch in name:
        ok = ('a' <= ch <= 'z') or ('0' <= ch <= '9') or ch in ('-', '_', '.')
        if not ok:
            return False
    return True

def fileVersionSplitter(name):
    parts = name.rsplit('.v', 1)
    if len(parts) == 2:
        defBase, suffix = parts
        try:
            n = int(suffix)
            if n >= 1:
                return defBase, n
        except:
            pass
    if '.v' not in name:
        return name, 0
    else:
        return name, None

def fileNextVersionCheck(defBase, existing_names):
    maxN = -1
    if defBase in existing_names:
        if 0 > maxN:
            maxN = 0
    prefix = defBase + '.v'
    for fn in existing_names:
        if fn.startswith(prefix):
            defBase2, n = fileVersionSplitter(fn)
            if n is not None:
                if n > maxN:
                    maxN = n
    if maxN < 0:
        return defBase
    else:
        return defBase + '.v' + str(maxN + 1)

def fileReaderFull(fileobj):
    return fileobj.readat(None, 0)

newestFileOpen = {}

def newestNameCapture(defBase, files):
    latest = None
    maxN = -1
    if defBase in files:
        latest = defBase
        maxN = 0
    prefix = defBase + '.v'
    for fn in files:
        if fn.startswith(prefix):
            defBase2, n = fileVersionSplitter(fn)
            if n is not None and n > maxN:
                maxN = n
                latest = fn
    return latest

class VMFile():
    def __init__(self, filename, create):
        if not checkValidFileName(filename):
            raise RepyArgumentError("invalid filename")
        files = listfiles()
        if create:
            defBase, ver = fileVersionSplitter(filename)
            if ver is None:
                raise RepyArgumentError("invalid filename")
            if ver >= 1:
                raise RepyArgumentError("Cannot create explicit version files")
            latest = newestNameCapture(defBase, files)
            if latest is not None and newestFileOpen.get(latest, 0) > 0:
                raise FileInUseError("Latest Version Open")
            newFileName = fileNextVersionCheck(defBase, files)
            oldFileName = None
            if newFileName != defBase:
                if defBase in files:
                    maxName = defBase
                    maxN = 0
                else:
                    maxName = None
                    maxN = -1
                prefix = defBase + '.v'
                for fn in files:
                    if fn.startswith(prefix):
                        defBase2, n = fileVersionSplitter(fn)
                        if n is not None and n > maxN:
                            maxN = n
                            maxName = fn
                oldFileName = maxName
            self.isNewVersion = True
            self.nameCap = newFileName
            self.VMfile = openfile(newFileName, True)
            if oldFileName is not None:
                prev = openfile(oldFileName, False)
                content = fileReaderFull(prev)
                if content:
                    self.VMfile.writeat(content, 0)
                prev.close()
            newestFileOpen[newFileName] = newestFileOpen.get(newFileName, 0) + 1
        else:
            if filename not in files:
                raise FileNotFoundError("file does not exist")
            self.isNewVersion = False
            self.nameCap = filename
            self.VMfile = openfile(filename, False)
            defBase, ver = fileVersionSplitter(filename)
            latest = newestNameCapture(defBase, files)
            if latest == filename:
                newestFileOpen[filename] = newestFileOpen.get(filename, 0) + 1

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not self.isNewVersion:
            raise FileInUseError("writes to existing versions are not allowed")
        return self.VMfile.writeat(data, offset)

    def close(self):
        try:
            return self.VMfile.close()
        finally:
            cnt = newestFileOpen.get(self.nameCap, 0)
            if cnt > 0:
                newestFileOpen[self.nameCap] = cnt - 1

def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("remove not allowed")

def LPlistfiles():
    unchangedN = listfiles()
    defBases = {}
    for name in unchangedN:
        b, n = fileVersionSplitter(name)
        if n is None:
            defBases[name] = True
        else:
            defBases[b] = True
    return list(defBases.keys())

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()