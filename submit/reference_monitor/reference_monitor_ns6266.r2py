"""
Defensive Security System for Immutable, Versioned Files

This security layer implements a complete defensive system that enforces:
1. Immutable, versioned files with linear version ordering
2. Protection against tampering and circumvention
3. Proper error handling for all edge cases

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

if 'file_versions' not in mycontext:
    mycontext['file_versions'] = {}  # Maps base filename to highest version number
if 'open_files' not in mycontext:
    mycontext['open_files'] = set()  # Tracks currently open files
if 'closed_versions' not in mycontext:
    mycontext['closed_versions'] = set()  # Tracks closed versions (immutable)

def _is_explicit_version_filename(filename):
    # Returns: (is_version, base_filename, version_number)
    idx = filename.rfind('.v')
    if idx == -1:
        return (False, None, None)
    
    base = filename[:idx]
    suffix = filename[idx + 2:]  # everything after '.v'

    # Validate base and suffix
    if base == "" or suffix == "" or not suffix.isdigit():
        return (False, None, None)
    return (True, base, int(suffix))

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        self.is_version_file = False
        self.version_num = None
        self.base_filename = filename
        
        is_version, base, ver_num = _is_explicit_version_filename(filename)

        self.is_version_file = is_version
        if is_version:
            self.base_filename = base
            self.version_num = ver_num
        else:
            self.base_filename = filename
            self.version_num = None
        
        # Handle version file access
        if self.is_version_file:
            if create:
                raise RepyArgumentError("Cannot create explicit version files")
            if filename not in _context["listfiles"]():
                raise FileNotFoundError
            self.VMfile = openfile(filename, False)
            return
        
        # Handle regular file operations
        if create:
            # Check if file is already open
            if filename in mycontext['open_files']:
                raise FileInUseError
            
            # If file exists, create new version
            if filename in _context["listfiles"]():
                # Get current highest version
                if filename in mycontext['file_versions']:
                    next_version = mycontext['file_versions'][filename] + 1
                else:
                    next_version = 1
                
                # Read content from latest version
                latest_file = openfile(filename, False)
                content = latest_file.readat(None, 0)
                latest_file.close()
                
                # Create new version
                version_filename = self.base_filename + '.v' + str(next_version)
                self.VMfile = openfile(version_filename, True)
                self.VMfile.writeat(content, 0)
                
                # Update version tracking
                mycontext['file_versions'][self.base_filename] = next_version
            else:
                # Create new file
                self.VMfile = openfile(filename, True)
                mycontext['file_versions'][filename] = 0  # 0 means original file
            
            # Mark file as open
            mycontext['open_files'].add(filename)
        else:
            # Open existing file
            if filename not in _context["listfiles"]():
                raise FileNotFoundError
            self.VMfile = openfile(filename, False)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # Check if this is a version file (older version)
        if self.is_version_file:
            raise FileInUseError  # Cannot write to older versions
        
        if self.filename not in mycontext['open_files']:
            raise FileInUseError

        return self.VMfile.writeat(data, offset)

    def close(self):
        result = self.VMfile.close()

        if self.is_version_file:
            mycontext['closed_versions'].add(self.filename)
        else:
            # Base files: remove from open_files to allow next version creation
            if self.filename in mycontext['open_files']:
                mycontext['open_files'].remove(self.filename)
        
        return result
        

def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    # File deletion is not allowed
    raise RepyArgumentError("File deletion not allowed")

def LPlistfiles():
    # Return only base filenames, not version files
    all_files = _context["listfiles"]()
    base_files = set()
    
    for filename in all_files:
        is_version, base, _ = _is_explicit_version_filename(filename)
        if is_version:
            base_files.add(base)
        else:
            base_files.add(filename)
    return list(base_files)


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()