"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext["open_files"] = set()

def getNextVersion(filename):
    version = 1
    while(filename + ".v" + str(version) in listfiles()):
        version += 1
    return version

class VMFile():
    def __init__(self, filename, create):

        self.filename = filename
        self.is_old = ".v" in filename

        if filename in mycontext["open_files"]:
            raise FileInUseError("New version cannot be created while latest is open")

        if create and '.v' in filename:
            raise RepyArgumentError("Cannot create explicit version files")

        # If a file with the same 'filename' already exists, this creates a new version such as 'filename.v1'.
        if create:
            if filename in listfiles():
                # File exists → create next version 
                next_version = getNextVersion(filename)

                prev_file = openfile(filename, False)
                content = prev_file.readat(None, 0)
                prev_file.close()

                new_name = filename + ".v" + str(next_version)
                version_file = openfile(new_name, True)
                version_file.writeat(content, 0)
                version_file.close()

                self.VMfile = openfile(filename, False)
                
            else:
                # File doesn't exist → create filename
                self.VMfile = openfile(filename, True)
        else:
            # Open existing file normally
            self.VMfile = openfile(filename, False)
        
        if '.v' not in filename:
            mycontext["open_files"].add(filename)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_old:
            raise FileInUseError("Cannot write to old versions")
        return self.VMfile.writeat(data, offset)

    def close(self):
        if '.v' not in self.filename:   
            mycontext["open_files"].discard(self.filename)
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion not allowed")

def LPlistfiles():
    all_files = listfiles()
    filtered_files = [file for file in all_files if ".v" not in file]
    return filtered_files


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()