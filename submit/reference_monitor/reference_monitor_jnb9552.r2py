"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

openList = []

class VMFile():
    def __init__(self, filename, create):      
        self.filename = filename
        self.create = create
        if create:
            if ".v" in filename:
                raise RepyArgumentError("Cannot create explicit version files")
            elif filename in openList:
                raise FileInUseError
            else :
                if filename in listfiles():
                    prev_file = openfile(filename, False)
                    content = prev_file.readat(None, 0)
                    new_name = filename
                    file_version = 1
                    while new_name in listfiles():
                        new_name = filename + ".v" + str(file_version)
                        file_version = file_version + 1
                    self.VMfile = openfile(new_name, True)
                    openList.append(new_name)
                    self.VMfile.writeat(content, 0)
                else:
                    self.VMfile = openfile(filename, True)
        else:
            if not (filename in listfiles()):
                raise FileNotFoundError
            elif not self.VMfile.closed:
                raise FileInUseError
            else:
                # Open existing file normally
                self.VMfile = openfile(filename, False)
        openList.append(self.filename)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not ".v" in self.filename and not self.create:
            raise FileInUseError
        return self.VMfile.writeat(data, offset)

    def close(self):
        openList.remove(self.filename)
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("Cannot remove files")

def LPlistfiles():
    fileList = listfiles()
    for x in fileList:
        if ".v" in x:
            fileList.remove(x)
    return fileList


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()