"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

def isversioned(filename):
# Checks if a file is actually versioned (e.g. filename + ".v" + str(num))
    ver_index = filename.find(".v")
    if ver_index == -1:
        return False
    ver_num = filename[ver_index + 2:]
# Check if part after ".v" is numeric
    try:
        int(ver_num)
        return True
    except ValueError:
        return False


class VMFile():
    def __init__(self, filename, create):
        self.filename = filename # Store filename for use in write method
        self.create = False # Stores whether a file is being created

    # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.
        if create:
            self.create = True
        # Manual version creation is not allowed
            if isversioned(filename):
                raise RepyArgumentError("Cannot create explicit version files")

        # Copying data of lastest version to put into new version
            if filename in mycontext:
                # File exists → create new version
                if mycontext[filename] > 1:
                    prev_filename = filename + ".v" + str(mycontext[filename] - 1)
                else:
                    prev_filename = filename
                prev_file = openfile(prev_filename, False)
                content = prev_file.readat(None, 0)

        # Creating new file and putting copied data into it
                new_name = filename + ".v" + str(mycontext[filename])
                self.VMfile = openfile(new_name, True)
                self.VMfile.writeat(content, 0)
                self.filename = new_name
            else:
                # File doesn't exist → create filename
                mycontext[filename] = 0
                self.VMfile = openfile(filename, True)
        else:
            # Open existing file normally
            self.VMfile = openfile(filename, False)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        filename = self.filename
        ver = 0

    # Writing to older versions is not allowed
        if isversioned(filename):
            ver_index = self.filename.find(".v")
            ver = int(self.filename[ver_index + 2:])
            filename = self.filename[:ver_index] # getting rid of version from name
        if (ver != mycontext[filename]):
            raise FileInUseError

        return self.VMfile.writeat(data, offset)

    def close(self):
        filename = self.filename
        if isversioned(filename):
            ver_index = self.filename.find(".v")
            filename = self.filename[:ver_index] # getting rid of version from name
        if self.create:
            mycontext[filename] += 1 # Making file immutable after closing for first time
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError

def LPlistfiles():
    return list(mycontext.keys())


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()
