"""
This security layer implements Versioned and Immutable file functionality
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Global dictionaries to track state
version_counts = {}
open_files = {}


def is_version_filename(filename):
    """Check if filename is a versioned file (ends with .vN where N is digits)"""
    if '.v' not in filename:
        return False
    
    parts = filename.split('.v')
    if len(parts) < 2:
        return False
    
    last_part = parts[-1]
    
    if len(last_part) == 0:
        return False
    
    # Check if last part is all digits
    for char in last_part:
        if char not in '0123456789':
            return False
    
    return True


def get_base_filename(filename):
    # Extract base filename from versioned filename
    if not is_version_filename(filename):
        return filename
    
    # Find last .v
    parts = filename.split('.v')
    # Rejoin all parts except the last 
    # last part has the version number)
    return '.v'.join(parts[:-1])


class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        self.is_closed = False
        
        # Prevent manual version creation
        if is_version_filename(filename) and create:
            raise RepyArgumentError("Cannot create explicit version files")
        
        if create:
            base_filename = get_base_filename(filename)
            
            # Check if file is already open
            if base_filename in open_files and open_files[base_filename]:
                raise FileInUseError("Cannot create version while file is open")
            
            if base_filename in listfiles():
                # File exists, create new version
                
                # Determine next version number
                if base_filename in version_counts:
                    next_version = version_counts[base_filename] + 1
                else:
                    next_version = 1
                
                # Read content from current version
                prev_file = openfile(base_filename, False)
                content = prev_file.readat(None, 0)
                prev_file.close()
                
                # Create versioned file with old content
                version_name = base_filename + ".v" + str(next_version)
                version_file = openfile(version_name, True)
                version_file.writeat(content, 0)
                version_file.close()
                
                # Open base file for new writes
                self.VMfile = openfile(base_filename, False)
                
                # Update tracking
                version_counts[base_filename] = next_version
                open_files[base_filename] = True
            else:
                # File doesn't exist, create new
                self.VMfile = openfile(base_filename, True)
                open_files[base_filename] = True
        else:
            # Open existing file for reading
            self.VMfile = openfile(filename, False)
            
            # Don't mark versioned files as "open" in our tracking
            # since they're read-only anyway
            if not is_version_filename(filename):
                # This is just for reading, don't block version creation
                pass

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # Block writes to old versions
        if is_version_filename(self.filename):
            raise FileInUseError("Cannot write to old versions")
        
        return self.VMfile.writeat(data, offset)

    def close(self):
        # Prevent double-close issues
        if self.is_closed:
            return None
        
        self.is_closed = True
        
        # Mark file as closed
        base_filename = get_base_filename(self.filename)
        if base_filename in open_files:
            open_files[base_filename] = False
        
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)


def LPremovefile(filename):
    raise RepyArgumentError("File deletion not allowed")


def LPlistfiles():
    all_files = listfiles()
    base_files = []
    
    for f in all_files:
        if not is_version_filename(f):
            base_files.append(f)
    
    return base_files


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

secure_dispatch_module()