"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""

original_openfile = openfile
original_removefile = removefile  
original_listfiles = listfiles

immutable_files = set() 

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

MAX_VERSIONS_PER_FILE = 100

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename 
        self.creating_version = False

        if create:
            if self.is_versioned_fname(filename):
                raise Exception("Cannot create versioned files directly")

            self.creating_version = True
            if filename in original_listfiles():
                existing_versions = self.get_all_versions(filename)

                if existing_versions:
                    next_version = max(existing_versions) + 1

                else:
                    next_version = 2
                if next_version > MAX_VERSIONS_PER_FILE:
                    raise Exception("Too many versions")
                version_name = filename + '.v' + str(next_version)
                
                self.VMfile = original_openfile(version_name, True)
                self.filename = version_name
                self.is_base_file = False
                
            else:
                # New file
                self.creating_version = False
                self.VMfile = original_openfile(filename, True)
                self.filename = filename
                self.is_base_file = True
        else:
            # Open existing (could be original or version)
            self.VMfile = original_openfile(filename, False)
            self.filename = filename

    def is_versioned_fname(self, filename):
        if self.creating_version:
            return False

        if ".v" in filename:
            parts = filename.split(".v", 1)
            if len(parts) == 2 and parts[1].isdigit():
                return True
        return False
    
    def get_all_versions(self, filename):
        files = original_listfiles()
        versions = []

        if filename in files:
            versions.append(1)
        for file in files:
            if file.startswith(filename + '.v'):
                try:
                    version_num = int(file.split('.v')[-1])
                    versions.append(version_num)
                except ValueError:
                    pass

        return versions 
                
                
    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.filename in immutable_files:
            raise Exception("Cannot write to immutable file: " + str(self.filename))
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.creating_version:
            immutable_files.add(self.filename)
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise Exception("Cannot remove immutable file")

def LPlistfiles():
    return original_listfiles()


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()
