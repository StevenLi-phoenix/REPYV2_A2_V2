"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class VMFile():
    def __init__(self, filename, create):
    # If a file with the same 'filename' already exists, this creates a new version 'filename.v1'.

        # Initialize entries
        if 'open_files' not in mycontext:
            mycontext['open_files'] = {}
        if 'file_versions' not in mycontext:
            mycontext['file_versions'] = {}
        
        self.filename = filename
        self.create = create
        self.readonly = False

        # Explicit version file creation not allowed
        if ".v" in filename:
            parts = filename.rsplit('.v', 1)
            if len(parts) == 2 and parts[1].isdigit():
                self.base_filename = parts[0]
                self.version_num = int(parts[1])
                self.is_version_file = True
                
                # Cannot create explicit version files
                if create:
                    raise RepyArgumentError("Cannot create explicit version files")
            else:
                self.base_filename = filename
                self.version_num = None
                self.is_version_file = False
        else:
            self.base_filename = filename
            self.version_num = None
            self.is_version_file = False

        if create:
             # Check if file is already open
            if self.base_filename in mycontext['open_files']:
                raise FileInUseError("File is already open")
            
            all_files = listfiles()
            
            if self.base_filename in all_files:
                # File exists -> create new version
                current_version = mycontext['file_versions'].get(self.base_filename, 1)
                new_version = current_version + 1
                
                # Read most recent version file with the content
                versioned_name = self.base_filename + '.v' + str(current_version)
                versioned_file = openfile(versioned_name, False)
                content = versioned_file.readat(None, 0)
                versioned_file.close()
                versioned_file.readonly = True
                versioned_file.is_version_file = True
                
                # Update version counter and create new current version file
                mycontext['file_versions'][self.base_filename] = new_version
                new_name = self.base_filename + '.v' + str(new_version)
                self.VMfile = openfile(new_name, True)
                self.VMfile.writeat(content, 0)
            else:
                # New file -> create initial version
                self.VMfile = openfile(self.base_filename, True)
                mycontext['file_versions'][self.base_filename] = 0
            
            # Mark file as open
            mycontext['open_files'][self.base_filename] = True
        else:
            all_files = listfiles()
        
            if self.is_version_file:
                # Opening a specific version file -> always read-only
                if self.filename not in all_files:
                    raise FileNotFoundError("File does not exist")
                
                # All version files are read-only
                self.readonly = True
                self.VMfile = openfile(self.filename, False)

            else:
                # Opening the newest version file
                if self.filename not in all_files:
                    raise FileNotFoundError("File does not exist")
                
                # Check if file is already open
                if self.filename in mycontext['open_files']:
                    raise FileInUseError("File is already open")
                
                # Newest files are writable 
                self.readonly = False
                self.VMfile = openfile(self.filename, False)
                mycontext['open_files'][self.filename] = True
    
    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.readonly:
            raise FileInUseError("Cannot write to old version.")
        return self.VMfile.writeat(data, offset)

    def close(self):
        if not self.is_version_file and self.base_filename in mycontext.get('open_files', {}):
            del mycontext['open_files'][self.base_filename]
        return self.VMfile.close()

def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    all_files = listfiles()
    base_files = []

    for file in all_files:
        if ".v" in file:
            parts = file.rsplit('.v', 1)
            if len(parts) == 2 and parts[1].isdigit():
                if parts[0] not in base_files:
                    base_files.append(parts[0])
        elif file not in base_files:
                base_files.append(file)
        
    return base_files


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()