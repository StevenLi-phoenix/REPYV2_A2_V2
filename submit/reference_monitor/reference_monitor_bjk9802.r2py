"""
This security layer handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Represents the latest version number for each base filename.
file_versions = {}

# A set containing the string names of all files currently open.
open_files = set()


def get_version_info(filename):
    """Parses a filename to extract its base name and version number."""
    if '.v' in filename:
        parts = filename.rsplit('.v', 1)
        base, version_str = parts
        if version_str.isdigit():
            return base, int(version_str)
    # If no version string is found, it's version 0
    return filename, 0


class VMFile():
    def __init__(self, real_filename):
        self.real_filename = real_filename
        self.basename, self.version = get_version_info(real_filename)
        
        # Determine if this file is the latest version
        latest_version = file_versions.get(self.basename, 0)
        self.is_latest = (self.version == latest_version)
        
        # Open the actual file
        self.VMfile = openfile(real_filename, False)

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # Writing is only allowed on the latest version of a file
        if not self.is_latest:
            raise FileInUseError("Cannot write to an older version of a file.")
        return self.VMfile.writeat(data, offset)

    def close(self):
        # Remove the file from the set of open files upon closing
        if self.real_filename in open_files:
            open_files.remove(self.real_filename)
        return self.VMfile.close()


def LPopenfile(filename, create):
    basename, version = get_version_info(filename)

    # Disallow manual creation of versioned files like 'file.txt.v1'
    if version > 0 and create:
        raise RepyArgumentError("Cannot create explicit version files")

    if create:
        # This is a request to create or get the latest version
        if basename not in file_versions:
            # This is a brand new file
            file_versions[basename] = 0
            openfile(basename, True).close() # Create the file
            real_filename_to_open = basename
        else:
            # File exists, so we must create a new version
            latest_version_num = file_versions[basename]
            latest_version_name = basename
            if latest_version_num > 0:
                latest_version_name += ".v" + str(latest_version_num)

            # A new version cannot be created if the current latest is open
            if latest_version_name in open_files:
                raise FileInUseError("Cannot create a new version while the latest is open.")

            # Copy content from the old version to the new one
            prev_file = openfile(latest_version_name, False)
            content = prev_file.readat(None, 0)
            prev_file.close()

            new_version_num = latest_version_num + 1
            new_version_name = basename + ".v" + str(new_version_num)
            
            new_file = openfile(new_version_name, True)
            new_file.writeat(content, 0)
            new_file.close()

            # Update the latest version number
            file_versions[basename] = new_version_num
            real_filename_to_open = new_version_name
    else:
        # Open an existing file
        # openfile will raise FileNotFoundError if it does not exist
        real_filename_to_open = filename

    # Prevent opening a file that is already in use
    if real_filename_to_open in open_files:
        raise FileInUseError("File is already open.")
    
    open_files.add(real_filename_to_open)
    return VMFile(real_filename_to_open)


def LPremovefile(filename):
    # File deletion is not allowed.
    raise RepyArgumentError("File deletion is not permitted.")


def LPlistfiles():
    # Only show the base filenames, not the versioned files.
    return list(file_versions.keys())


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()