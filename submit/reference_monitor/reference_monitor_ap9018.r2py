# My reference monitor
# immutable version one
# reads from .a, writes to .b
# on close, copies b to a only if content starts with S and ends with E

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

# helper fn to check filename
def okname(name):
    if not name:
        return False
    for c in name:
        if not (c.islower() or c.isdigit()):
            return False
    if "." in name:
        return False
    return True

class VMFile:
    def __init__(self, filename, create):
        # base and copies
        self.base = filename
        self.a = filename + ".a"
        self.b = filename + ".b"
        self.lock = createlock()
        self.closed = False

        # if file exists make copy, else make new one
        if create:
            if self.a in listfiles():
                self.afile = openfile(self.a, False)
                self.bfile = openfile(self.b, True)
                data = self.afile.readat(None, 0)
                if data:
                    self.bfile.writeat(data, 0)
            else:
                self.afile = openfile(self.a, True)
                self.bfile = openfile(self.b, True)
                self.afile.writeat("SE", 0)
        else:
            self.afile = openfile(self.a, False)
            self.bfile = openfile(self.b, True)
            data = self.afile.readat(None, 0)
            if data:
                self.bfile.writeat(data, 0)

    # always read from a
    def readat(self, n, off):
        return self.afile.readat(n, off)

    # always write to b
    def writeat(self, data, off):
        if self.closed:
            raise Exception("file closed")
        return self.bfile.writeat(data, off)

    # close and maybe copy
    def close(self):
        self.lock.acquire(True)
        try:
            if self.closed:
                return
            stuff = self.bfile.readat(None, 0)
            good = False
            if stuff and len(stuff) >= 2:
                if stuff[0] == "S" and stuff[-1] == "E":
                    good = True
            if good:
                try:
                    self.afile.close()
                except:
                    pass
                self.afile = openfile(self.a, True)
                self.afile.writeat(stuff, 0)
            try:
                self.bfile.close()
            finally:
                try:
                    self.afile.close()
                finally:
                    self.closed = True
        finally:
            self.lock.release()

# wrapper funcs
def LPopenfile(filename, create):
    if not okname(filename):
        raise Exception("bad filename")
    if filename.endswith(".a") or filename.endswith(".b"):
        raise Exception("bad name ext")
    return VMFile(filename, create)

def LPremovefile(filename):
    removefile(filename)

def LPlistfiles():
    return listfiles()




sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

secure_dispatch_module()
