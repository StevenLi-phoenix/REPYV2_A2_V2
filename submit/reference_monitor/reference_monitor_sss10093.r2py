"""
This security layer handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

open_files = {}
file_versions = {}
closed_versions = set()
created_files = set()

def validate_filename(filename):
    """Validate filename according to RepyV2 rules - return True if valid"""
    if not filename or not isinstance(filename, str):
        return False
    
    if len(filename) > 120:
        return False
    
    disallowed_chars = ['/', '\\', '\t', '\n', '\r', '\0', ' ']
    for char in disallowed_chars:
        if char in filename:
            return False
    
    if filename in ['.', '..', '']:
        return False
    
    if filename.startswith('.'):
        return False
    
    return True

class VMFile():
    def __init__(self, filename, create):
        if not validate_filename(filename):
            raise FileNotFoundError("File not found")
        
        self.filename = filename
        self.is_version_file = ".v" in filename and filename.count(".v") == 1
        self.is_closed = False
        
        if self.is_version_file:
            parts = filename.split(".v")
            if len(parts) != 2:
                raise FileNotFoundError("File not found")
            try:
                version_num = int(parts[1])
                if version_num <= 0:
                    raise FileNotFoundError("File not found")
            except ValueError:
                raise FileNotFoundError("File not found")
        
        if create and self.is_version_file:
            raise RepyArgumentError("Cannot create explicit version files")
        
        if self.is_version_file:
            if create:
                raise RepyArgumentError("Cannot create explicit version files")
            else:
                if filename in open_files:
                    raise FileInUseError("File is already open")
                try:
                    self.VMfile = openfile(filename, False)
                    open_files[filename] = self
                    return
                except:
                    raise FileNotFoundError("File not found")
        
        base_name = filename
        
        if create:
            if base_name in open_files:
                raise FileInUseError("File is already open")
            
            for open_filename in open_files:
                if open_filename.startswith(base_name + ".v") or open_filename == base_name:
                    raise FileInUseError("File is already open")
            
            if base_name in created_files:
                current_version = file_versions.get(base_name, 0)
                new_version = current_version + 1
                new_version_name = base_name + ".v" + str(new_version)
                
                try:
                    if current_version == 0:
                        prev_file = openfile(base_name, False)
                    else:
                        latest_version_name = base_name + ".v" + str(current_version)
                        prev_file = openfile(latest_version_name, False)
                    
                    content = prev_file.readat(None, 0)
                    prev_file.close()
                    
                    self.VMfile = openfile(new_version_name, True)
                    self.VMfile.writeat(content, 0)
                    self.filename = new_version_name
                    file_versions[base_name] = new_version
                except:
                    raise FileNotFoundError("File not found")
            else:
                try:
                    self.VMfile = openfile(base_name, True)
                    file_versions[base_name] = 0
                    created_files.add(base_name)
                except:
                    raise FileNotFoundError("File not found")
        else:
            if filename in open_files:
                raise FileInUseError("File is already open")
            try:
                self.VMfile = openfile(filename, False)
            except:
                raise FileNotFoundError("File not found")
        
        open_files[self.filename] = self

    def readat(self, num_bytes, offset):
        if self.is_closed:
            raise FileInUseError("File is already closed")
        try:
            return self.VMfile.readat(num_bytes, offset)
        except:
            raise FileNotFoundError("File not found")

    def writeat(self, data, offset):
        if self.is_closed:
            raise FileInUseError("File is already closed")
        
        if self.filename in closed_versions:
            raise FileInUseError("File is already closed")
        
        if self.is_version_file:
            try:
                base_name = self.filename.split(".v")[0]
                version_num = int(self.filename.split(".v")[1])
                current_version = file_versions.get(base_name, 0)
                
                if version_num < current_version:
                    raise FileInUseError("Cannot write to older version")
            except:
                raise FileInUseError("Cannot write to older version")
        
        try:
            return self.VMfile.writeat(data, offset)
        except:
            raise FileNotFoundError("File not found")

    def close(self):
        if self.is_closed:
            return None
        
        try:
            result = self.VMfile.close()
        except:
            result = None
        
        self.is_closed = True
        
        closed_versions.add(self.filename)
        
        if self.filename in open_files:
            del open_files[self.filename]
        
        return result


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    all_files = listfiles()
    base_files = []
    
    for filename in all_files:
        if ".v" in filename and filename.count(".v") == 1:
            parts = filename.split(".v")
            if len(parts) == 2:
                try:
                    int(parts[1])
                    continue
                except ValueError:
                    pass
        
        base_files.append(filename)
    
    return base_files

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

secure_dispatch_module()
