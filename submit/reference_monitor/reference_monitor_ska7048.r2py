"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

open_files = {}

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        self.is_version_file = False

        if create:
            if ".v" in filename:
                parts = filename.split(".v")
                if len(parts) == 2:
                    try:
                        int(parts[1])
                        raise RepyArgumentError("Cannot create explicit version files")
                    except ValueError:
                        pass
        
        if ".v" in filename:
            parts = filename.split(".v")
            if len(parts) == 2:
                try:
                    int(parts[1])
                    self.is_version_file = True
                except ValueError:
                    pass
                        
        if filename in open_files:
            raise FileInUseError("cant open file that is already open")
        
        if create:
            if filename in listfiles():

                all_files = listfiles()
                highest_version = 0
                
                for file in all_files:
                    if file.startswith(filename + ".v"):
                        version_part = file[len(filename) + 2:]
                        try:
                            version_num = int(version_part)
                            if version_num > highest_version:
                                highest_version = version_num
                        except ValueError:
                            pass
                
                new_version = highest_version + 1
                new_name = filename + ".v" + str(new_version)
                
                prev_file = openfile(filename, False)
                content = prev_file.readat(None, 0)
                prev_file.close()
                
                version_file = openfile(new_name, True)
                version_file.writeat(content, 0)
                version_file.close()
                
                self.VMfile = openfile(filename, True)
                self.VMfile.writeat(content, 0)
                
            else:
                # File doesn't exist â†’ create it
                self.VMfile = openfile(filename, True)
        else:
            # Open existing file normally
            self.VMfile = openfile(filename, False)

        open_files[filename] = True

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_version_file:
            raise FileInUseError("cannot write to old versions")
        
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.filename in open_files:
            del open_files[self.filename]
        
        return self.VMfile.close()

def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("file deletion isnt allowed")

def LPlistfiles():
    all_files = listfiles()
    filtered_files = []
    for filename in all_files:
        is_version = False
        if ".v" in filename:
            parts = filename.split(".v")
            if len(parts) == 2:
                try:
                    int(parts[1])
                    is_version = True
                except ValueError:
                    pass
        
        if not is_version:
            filtered_files.append(filename)
    
    return filtered_files





# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()