"""
Defensive Security System - Reference Monitor for Immutable Versioned Files
Author: djt8795
This security layer enforces immutable, versioned files in Repy V2.
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Global tracking of open files
_open_files = {}

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        self.create = create
        self.is_closed = False
        self.is_version_file = False
        self.version_number = None
        self.original_filename = None
        
        # Check if this is a version file (pattern: filename.vNUMBER)
        if '.v' in filename:
            version_index = filename.rfind('.v')
            if version_index > 0:
                version_part = filename[version_index + 2:]
                # More strict version detection: must be exactly digits, no other characters
                if version_part.isdigit() and len(version_part) > 0:
                    self.is_version_file = True
                    self.version_number = int(version_part)
                    self.original_filename = filename[:version_index]
        
        # Handle version file creation
        if self.is_version_file and create:
            raise RepyArgumentError("Cannot create explicit version files")
        
        # Handle regular file operations
        if not self.is_version_file:
            if create:
                # Check if file already exists using underlying system
                try:
                    # Try to open without create to check existence
                    test_file = openfile(filename, False)
                    test_file.close()
                    # File exists, create new version
                    self._create_new_version(filename)
                    # Add the new version file to open files tracking
                    _open_files[filename] = self
                except FileNotFoundError:
                    # File doesn't exist, create new file
                    self.VMfile = openfile(filename, True)
                    _open_files[filename] = self
            else:
                # Open existing file
                self.VMfile = openfile(filename, False)
                _open_files[filename] = self
        else:
            # Handle version file access
            if not create:
                # Check if version exists
                self.VMfile = openfile(filename, False)
            else:
                raise RepyArgumentError("Cannot create version files")

    def _create_new_version(self, filename):
        """Create a new version of an existing file"""
        # Check if the original file is currently open
        if filename in _open_files:
            raise FileInUseError("Cannot create new version while file is open")
        
        # Find the highest version number by checking all files
        max_version = 0
        try:
            all_files = listfiles()
            for f in all_files:
                if f.startswith(filename + '.v'):
                    try:
                        # Extract version number from filename like "filename.v123"
                        version_part = f[len(filename) + 2:]  # Skip "filename.v"
                        if version_part.isdigit():
                            version_num = int(version_part)
                            max_version = max(max_version, version_num)
                    except:
                        continue
        except:
            pass
        
        # Create new version
        new_version = max_version + 1
        new_filename = filename + '.v' + str(new_version)
        
        # Copy content from the original file
        try:
            original_file = openfile(filename, False)
            content = original_file.readat(None, 0)
            original_file.close()
            
            # Create new version file
            self.VMfile = openfile(new_filename, True)
            if content:
                self.VMfile.writeat(content, 0)
        except:
            # If copying fails, create empty version
            self.VMfile = openfile(new_filename, True)

    def readat(self, num_bytes, offset):
        if self.is_closed:
            raise FileClosedError("File is closed")
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_closed:
            raise FileClosedError("File is closed")
        
        # Check if this is a version file (older version)
        if self.is_version_file:
            raise FileInUseError("Cannot write to older version files")
        
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.is_closed:
            raise FileClosedError("File is already closed")
        
        self.is_closed = True
        # Remove from open files tracking if it's not a version file
        if not self.is_version_file and self.filename in _open_files:
            del _open_files[self.filename]
        return self.VMfile.close()

def LPopenfile(filename, create):
    # Validate filename
    if not filename or filename == '.' or filename == '..' or filename.startswith('.'):
        raise RepyArgumentError("Invalid filename")
    
    if len(filename) > 120:
        raise RepyArgumentError("Filename too long")
    
    # Check for invalid characters
    valid_chars = set('abcdefghijklmnopqrstuvwxyz0123456789.-_')
    for c in filename:
        if c not in valid_chars:
            raise RepyArgumentError("Invalid characters in filename")
    
    return VMFile(filename, create)

def LPremovefile(filename):
    # File deletion is not allowed
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    # Return only original filenames, not version files
    all_files = listfiles()
    original_files = []
    for f in all_files:
        # Check if this is a version file (pattern: filename.vNUMBER)
        if '.v' in f:
            version_index = f.rfind('.v')
            if version_index > 0:
                version_part = f[version_index + 2:]
                # If it's a version file, skip it
                if version_part.isdigit() and len(version_part) > 0:
                    continue
        original_files.append(f)
    return original_files

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()
