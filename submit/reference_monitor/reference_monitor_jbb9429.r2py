"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class VMFile():
    latest_versions = {}

    def __init__(self, filename, create):
        if create :
            version, name = _version_split_name(filename)
            if version != -1 : raise RepyArgumentError("Cannot create explicit version files")

            if filename in LPlistfiles():
                prev_file = openfile(filename, False)
                content = prev_file.readat(None, 0)
                prev_file.close()

                new_name = filename + ".v" + str(version + 1)
                self.VMfile = openfile(new_name, True)
                self.filename = new_name
                self.VMfile.writeat(content, 0)
                VMFile.latest_versions[filename] = version + 1

            else:
                filename = name + ".v1" 
                self.VMfile = openfile(filename, True)
                
                VMFile.latest_versions[name] = 1
                self.filename = filename
            
        else :
            version, name = _version_split_name(filename)

            # Deafult to open the latest version if none is specified
            if version == -1 and VMFile.latest_versions.get(filename):
                filename = name + ".v" + str(VMFile.latest_versions[filename])
            

            self.VMfile = openfile(filename, False)
            self.filename = filename
            return

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        version, name  = _version_split_name(self.filename)
        if version != VMFile.latest_versions[name] : raise FileInUseError

        return self.VMfile.writeat(data, offset)

    def close(self):
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError('File deletion is not allowed')

def LPlistfiles():
    names = set()
    for name in listfiles():
        _, name = _version_split_name(name)
        names.add(name)
    return list(names)

def _version_split_name(filename):
    suffix_idx = filename.rfind(".v")
    if suffix_idx == -1:
        return -1, filename

    version_part = filename[suffix_idx + 2:]
    if not version_part or not version_part.isdigit():
        return -1, filename

    return int(version_part), filename[:suffix_idx]


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: [str],
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()
