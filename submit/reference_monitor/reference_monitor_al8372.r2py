"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py  
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

_original_listfiles = listfiles

open_files = {}
version_counts = {}
latest_open_counts = {}

def highest_version_num(base_name):
    if base_name in version_counts:
        return version_counts[base_name]
    latest_num = 0
    for name in _original_listfiles():
        if '.v' in name:
            p = name.rsplit('.v', 1)
            if len(p) == 2 and len(p[1]) > 0 and p[1].isdigit() and p[0] == base_name:
                n = int(p[1])
                if n > latest_num:
                    latest_num = n
    return latest_num

class VMFile():
    def __init__(self, filename, create):
        self.filename = filename
        self._writable = False  
        self.closed = False
        
        base_name = filename
        ver_num = None
        if '.v' in filename:
            parts = filename.rsplit('.v', 1)
            if len(parts) == 2 and len(parts[1]) > 0 and parts[1].isdigit():
                base_name = parts[0]
                ver_num = int(parts[1])
        is_version_file = (ver_num is not None)
        
        if create and is_version_file:
            raise RepyArgumentError("Cannot create explicit version files")
        
        if create:
            file_exists = False
            all_files = _original_listfiles()
            for f in all_files:
                if f == filename or f.startswith(filename + ".v"):
                    file_exists = True
                    break

            if file_exists:
                latest_num = highest_version_num(base_name)
                
                if latest_num == 0:
                    prev_name = base_name
                else:
                    prev_name = base_name + ".v" + str(latest_num)
                    
                if latest_open_counts.get(base_name, 0) > 0 or open_files.get(prev_name, False):
                    raise FileInUseError("File is already open")
                    
                prev_file = openfile(prev_name, False)
                content = prev_file.readat(None, 0)
                prev_file.close()
                
                new_name = base_name + ".v" + str(latest_num + 1)
                self.VMfile = openfile(new_name, True)
                self.VMfile.writeat(content, 0)
                self.actual_filename = new_name
                version_counts[base_name] = latest_num + 1
            else:
                self.VMfile = openfile(filename, True)
                self.actual_filename = filename
                version_counts[base_name] = 0
            
            open_files[self.actual_filename] = True
            latest_open_counts[base_name] = latest_open_counts.get(base_name, 0) + 1
            self._writable = True 
        else:
            if filename not in _original_listfiles():
                raise FileNotFoundError("File not found")
            
            if filename in open_files and open_files[filename]:
                raise FileInUseError("File is already open")
            
            self.VMfile = openfile(filename, False)
            self.actual_filename = filename
            open_files[self.actual_filename] = True
            
            latest_num_for_base = highest_version_num(base_name)
            opened_is_latest = (ver_num is None and latest_num_for_base == 0) or \
                           (ver_num is not None and ver_num == latest_num_for_base)
            if opened_is_latest:
                latest_open_counts[base_name] = latest_open_counts.get(base_name, 0) + 1
            
            self._writable = False

    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not self._writable or self.closed:
            raise FileInUseError("Cannot write to this file")
        return self.VMfile.writeat(data, offset)

    def close(self):
        if self.closed:
            return
        self.closed = True
        self._writable = False
        
        if self.actual_filename in open_files:
            open_files[self.actual_filename] = False
        
        base_name = self.actual_filename
        ver_num = None
        if '.v' in self.actual_filename:
            parts = self.actual_filename.rsplit('.v', 1)
            if len(parts) == 2 and len(parts[1]) > 0 and parts[1].isdigit():
                base_name = parts[0]
                ver_num = int(parts[1])

        latest_num_for_base = highest_version_num(base_name)
        was_latest = (ver_num is None and latest_num_for_base == 0) or \
                 (ver_num is not None and ver_num == latest_num_for_base)
        if was_latest:
            current = latest_open_counts.get(base_name, 0)
            if current > 0:
                latest_open_counts[base_name] = current - 1
        
        return self.VMfile.close()

def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename):
    raise RepyArgumentError("File deletion is not allowed")

def LPlistfiles():
    all_files = _original_listfiles()
    result = []
    
    for f in all_files:
        is_version = False
        if '.v' in f:
            parts = f.rsplit('.v', 1)
            if len(parts) == 2 and len(parts[1]) > 0 and parts[1].isdigit():
                is_version = True
        
        if not is_version:
            result.append(f)
    
    return result

sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

secure_dispatch_module()
