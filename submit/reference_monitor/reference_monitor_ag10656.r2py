"""
This security layer inadequately handles the Versioned and Immutable functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class VMFile():
    def __init__(self, filename, create):
        
        self.filename_input = filename
        self.filename_output = ''

        if create:
            
            self._is_editing_version_file()
            
            # ---------- Versioning, creating ----------        
            if self.filename_input in listfiles():
                
                try:
                    prev_file_name, count = self._find_prev_file()
                    prev_file = openfile(prev_file_name, False)
                    content = prev_file.readat(None, 0)
                    prev_file.close()
                except:
                    raise FileInUseError('Cannot open new while old version is open')
                
                # Setting new name
                new_name = self.filename_input + ".v" + str(count+1)
                self.VMfile = openfile(new_name, True)
                self.VMfile.writeat(content, 0)
                self.filename_output = new_name
                
            else:
                # File doesn't exist â†’ create filename
                self.VMfile = openfile(self.filename_input, True)
                self.filename_output = filename
                
        
        else:
            # Open existing file normally
            self.VMfile = openfile(self.filename_input, False)
            self.filename_output = filename
    
    
    def _is_version(self):
        
        # Handling manually using create=True on versioned files ----------
        splitFilename = self.filename_input.split('.')
        suffix = splitFilename[-1]
        isVersion = True
        for ch in splitFilename[-1][1:]:
            isVersion = isVersion and ch.isdigit()
            
        return suffix[0] == 'v' and isVersion
    
    def _is_editing_version_file(self):
        # If it is a file, then handle versioning error. If it doesn't exist, remove version suffix and create.
        splitFilename = self.filename_input.split('.')
        if splitFilename[0] in listfiles():
            if self._is_version():
                raise RepyArgumentError('Cannot create explicit version files')
    
    
    def _find_prev_file(self):
        # Counting occcurences of filename
        count = 0
        for name in listfiles():
            if name[:-3] == self.filename_input:
                count+=1
        
        # Modify this to pick from the previous version
        if count == 0:
            fin_str = ''
        else:
            fin_str = '.v'+str(count)
        
        return self.filename_input + fin_str , count

    
    def readat(self, num_bytes, offset):
        return self.VMfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        
        filename = self.filename_output
        try:
            suffix_int = int(filename.split('.')[-1][1:])
        except (IndexError, ValueError):
            # IndexError: no last part or [1:] slice fails
            # ValueError: conversion to int fails
            suffix_int = 0

        isLast = True
        
        for n in listfiles():
            n = n.split('.')
            if n[0] == filename.split('.')[0]:        
                suffix = n[-1]
                isVersion = True
                for ch in n[-1][1:]:
                    isVersion = isVersion and ch.isdigit()
                
                if suffix[0] == 'v' and isVersion:
                    if int(suffix[1:]) > suffix_int:
                        
                        isLast = False
                        break
            
        if not isLast:
            raise FileInUseError('Writing to older version is permanently disallowed')
        
        return self.VMfile.writeat(data, offset)

    def close(self):
        return self.VMfile.close()


def LPopenfile(filename, create):
    return VMFile(filename, create)

def LPremovefile(filename=''):
    # should raise RepyArgumentError, none allowed
    raise RepyArgumentError('Removing not allowed')

def LPlistfiles():
    # should return only files, not their versions
    # need to handle non created files. 
    file_list = listfiles()
    s = set()

    for file_name in file_list:
        file_name = file_name.split('.') # get rid of the version part
        isVersion = True
        for ch in file_name[-1][1:]:
            isVersion = isVersion and ch.isdigit()
        
        if file_name[-1][0] == 'v' and isVersion:
            file_name = '.'.join(file_name[:-1])
            s.add(file_name)
        else:
            file_name = '.'.join(file_name)
            s.add(file_name)
    
    # converting into list
    file_list = list(s)
    file_list.sort()
    return file_list

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": VMFile,
    "name": "VMFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": VMFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": VMFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": VMFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

CHILD_CONTEXT_DEF["listfiles"] = {
    TYPE: FUNC,
    ARGS: None,
    EXCP: Exception,
    RETURN: list,
    TARGET: LPlistfiles
}

# Execute the user code
secure_dispatch_module()